{"ast":null,"code":"import _objectWithoutProperties from \"C:/DaoWebsite/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _wrapNativeSuper from \"C:/DaoWebsite/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nimport _createForOfIteratorHelper from \"C:/DaoWebsite/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _slicedToArray from \"C:/DaoWebsite/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"C:/DaoWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"C:/DaoWebsite/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _asyncToGenerator from \"C:/DaoWebsite/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _inherits from \"C:/DaoWebsite/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/DaoWebsite/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"C:/DaoWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/DaoWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar _excluded = [\"commitment\"],\n    _excluded2 = [\"commitment\"];\nimport _regeneratorRuntime from \"C:\\\\DaoWebsite\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport nacl from 'tweetnacl';\nimport { Buffer } from 'buffer';\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport { serialize, deserialize, deserializeUnchecked } from 'borsh';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport { blob } from '@solana/buffer-layout';\nimport { toBigIntLE, toBufferLE } from 'bigint-buffer';\nimport { coerce, instance, string, tuple, literal, unknown, union, type, optional, any, number, array, nullable, create, boolean, record, assert as assert$7 } from 'superstruct';\nimport { Client } from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport secp256k1 from 'secp256k1';\nimport sha3 from 'js-sha3';\n\nvar toBuffer = function toBuffer(arr) {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n\nvar hash$1 = {};\nvar utils$9 = {};\nvar minimalisticAssert = assert$6;\n\nfunction assert$6(val, msg) {\n  if (!val) throw new Error(msg || 'Assertion failed');\n}\n\nassert$6.equal = function assertEqual(l, r, msg) {\n  if (l != r) throw new Error(msg || 'Assertion failed: ' + l + ' != ' + r);\n};\n\nvar inherits_browser = {\n  exports: {}\n};\n\nif (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  inherits_browser.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor;\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      });\n    }\n  };\n} else {\n  // old school shim for old browsers\n  inherits_browser.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor;\n\n      var TempCtor = function TempCtor() {};\n\n      TempCtor.prototype = superCtor.prototype;\n      ctor.prototype = new TempCtor();\n      ctor.prototype.constructor = ctor;\n    }\n  };\n}\n\nvar assert$5 = minimalisticAssert;\nvar inherits = inherits_browser.exports;\nutils$9.inherits = inherits;\n\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg)) return msg.slice();\n  if (!msg) return [];\n  var res = [];\n\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = c >> 6 | 192;\n          res[p++] = c & 63 | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = c >> 18 | 240;\n          res[p++] = c >> 12 & 63 | 128;\n          res[p++] = c >> 6 & 63 | 128;\n          res[p++] = c & 63 | 128;\n        } else {\n          res[p++] = c >> 12 | 224;\n          res[p++] = c >> 6 & 63 | 128;\n          res[p++] = c & 63 | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0) msg = '0' + msg;\n\n      for (i = 0; i < msg.length; i += 2) {\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n      }\n    }\n  } else {\n    for (i = 0; i < msg.length; i++) {\n      res[i] = msg[i] | 0;\n    }\n  }\n\n  return res;\n}\n\nutils$9.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n\n  for (var i = 0; i < msg.length; i++) {\n    res += zero2(msg[i].toString(16));\n  }\n\n  return res;\n}\n\nutils$9.toHex = toHex;\n\nfunction htonl(w) {\n  var res = w >>> 24 | w >>> 8 & 0xff00 | w << 8 & 0xff0000 | (w & 0xff) << 24;\n  return res >>> 0;\n}\n\nutils$9.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little') w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n\n  return res;\n}\n\nutils$9.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1) return '0' + word;else return word;\n}\n\nutils$9.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7) return '0' + word;else if (word.length === 6) return '00' + word;else if (word.length === 5) return '000' + word;else if (word.length === 4) return '0000' + word;else if (word.length === 3) return '00000' + word;else if (word.length === 2) return '000000' + word;else if (word.length === 1) return '0000000' + word;else return word;\n}\n\nutils$9.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert$5(len % 4 === 0);\n  var res = new Array(len / 4);\n\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big') w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];\n    res[i] = w >>> 0;\n  }\n\n  return res;\n}\n\nutils$9.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = m >>> 16 & 0xff;\n      res[k + 2] = m >>> 8 & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = m >>> 16 & 0xff;\n      res[k + 1] = m >>> 8 & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n\n  return res;\n}\n\nutils$9.split32 = split32;\n\nfunction rotr32$1(w, b) {\n  return w >>> b | w << 32 - b;\n}\n\nutils$9.rotr32 = rotr32$1;\n\nfunction rotl32$2(w, b) {\n  return w << b | w >>> 32 - b;\n}\n\nutils$9.rotl32 = rotl32$2;\n\nfunction sum32$3(a, b) {\n  return a + b >>> 0;\n}\n\nutils$9.sum32 = sum32$3;\n\nfunction sum32_3$1(a, b, c) {\n  return a + b + c >>> 0;\n}\n\nutils$9.sum32_3 = sum32_3$1;\n\nfunction sum32_4$2(a, b, c, d) {\n  return a + b + c + d >>> 0;\n}\n\nutils$9.sum32_4 = sum32_4$2;\n\nfunction sum32_5$2(a, b, c, d, e) {\n  return a + b + c + d + e >>> 0;\n}\n\nutils$9.sum32_5 = sum32_5$2;\n\nfunction sum64$1(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n  var lo = al + bl >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\n\nutils$9.sum64 = sum64$1;\n\nfunction sum64_hi$1(ah, al, bh, bl) {\n  var lo = al + bl >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\n\nutils$9.sum64_hi = sum64_hi$1;\n\nfunction sum64_lo$1(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\n\nutils$9.sum64_lo = sum64_lo$1;\n\nfunction sum64_4_hi$1(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = lo + bl >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = lo + cl >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = lo + dl >>> 0;\n  carry += lo < dl ? 1 : 0;\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\n\nutils$9.sum64_4_hi = sum64_4_hi$1;\n\nfunction sum64_4_lo$1(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\n\nutils$9.sum64_4_lo = sum64_4_lo$1;\n\nfunction sum64_5_hi$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = lo + bl >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = lo + cl >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = lo + dl >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = lo + el >>> 0;\n  carry += lo < el ? 1 : 0;\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\n\nutils$9.sum64_5_hi = sum64_5_hi$1;\n\nfunction sum64_5_lo$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n  return lo >>> 0;\n}\n\nutils$9.sum64_5_lo = sum64_5_lo$1;\n\nfunction rotr64_hi$1(ah, al, num) {\n  var r = al << 32 - num | ah >>> num;\n  return r >>> 0;\n}\n\nutils$9.rotr64_hi = rotr64_hi$1;\n\nfunction rotr64_lo$1(ah, al, num) {\n  var r = ah << 32 - num | al >>> num;\n  return r >>> 0;\n}\n\nutils$9.rotr64_lo = rotr64_lo$1;\n\nfunction shr64_hi$1(ah, al, num) {\n  return ah >>> num;\n}\n\nutils$9.shr64_hi = shr64_hi$1;\n\nfunction shr64_lo$1(ah, al, num) {\n  var r = ah << 32 - num | al >>> num;\n  return r >>> 0;\n}\n\nutils$9.shr64_lo = shr64_lo$1;\nvar common$5 = {};\nvar utils$8 = utils$9;\nvar assert$4 = minimalisticAssert;\n\nfunction BlockHash$4() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\n\ncommon$5.BlockHash = BlockHash$4;\n\nBlockHash$4.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils$8.toArray(msg, enc);\n  if (!this.pending) this.pending = msg;else this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length; // Enough data, try updating\n\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending; // Process pending data in blocks\n\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0) this.pending = null;\n    msg = utils$8.join32(msg, 0, msg.length - r, this.endian);\n\n    for (var i = 0; i < msg.length; i += this._delta32) {\n      this._update(msg, i, i + this._delta32);\n    }\n  }\n\n  return this;\n};\n\nBlockHash$4.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert$4(this.pending === null);\n  return this._digest(enc);\n};\n\nBlockHash$4.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - (len + this.padLength) % bytes;\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n\n  for (var i = 1; i < k; i++) {\n    res[i] = 0;\n  } // Append length\n\n\n  len <<= 3;\n\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++) {\n      res[i++] = 0;\n    }\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = len >>> 24 & 0xff;\n    res[i++] = len >>> 16 & 0xff;\n    res[i++] = len >>> 8 & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = len >>> 8 & 0xff;\n    res[i++] = len >>> 16 & 0xff;\n    res[i++] = len >>> 24 & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++) {\n      res[i++] = 0;\n    }\n  }\n\n  return res;\n};\n\nvar sha = {};\nvar common$4 = {};\nvar utils$7 = utils$9;\nvar rotr32 = utils$7.rotr32;\n\nfunction ft_1$1(s, x, y, z) {\n  if (s === 0) return ch32$1(x, y, z);\n  if (s === 1 || s === 3) return p32(x, y, z);\n  if (s === 2) return maj32$1(x, y, z);\n}\n\ncommon$4.ft_1 = ft_1$1;\n\nfunction ch32$1(x, y, z) {\n  return x & y ^ ~x & z;\n}\n\ncommon$4.ch32 = ch32$1;\n\nfunction maj32$1(x, y, z) {\n  return x & y ^ x & z ^ y & z;\n}\n\ncommon$4.maj32 = maj32$1;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\n\ncommon$4.p32 = p32;\n\nfunction s0_256$1(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\n\ncommon$4.s0_256 = s0_256$1;\n\nfunction s1_256$1(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\n\ncommon$4.s1_256 = s1_256$1;\n\nfunction g0_256$1(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;\n}\n\ncommon$4.g0_256 = g0_256$1;\n\nfunction g1_256$1(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;\n}\n\ncommon$4.g1_256 = g1_256$1;\nvar utils$6 = utils$9;\nvar common$3 = common$5;\nvar shaCommon$1 = common$4;\nvar rotl32$1 = utils$6.rotl32;\nvar sum32$2 = utils$6.sum32;\nvar sum32_5$1 = utils$6.sum32_5;\nvar ft_1 = shaCommon$1.ft_1;\nvar BlockHash$3 = common$3.BlockHash;\nvar sha1_K = [0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6];\n\nfunction SHA1() {\n  if (!(this instanceof SHA1)) return new SHA1();\n  BlockHash$3.call(this);\n  this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n  this.W = new Array(80);\n}\n\nutils$6.inherits(SHA1, BlockHash$3);\nvar _1 = SHA1;\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++) {\n    W[i] = msg[start + i];\n  }\n\n  for (; i < W.length; i++) {\n    W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n  }\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5$1(rotl32$1(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32$1(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32$2(this.h[0], a);\n  this.h[1] = sum32$2(this.h[1], b);\n  this.h[2] = sum32$2(this.h[2], c);\n  this.h[3] = sum32$2(this.h[3], d);\n  this.h[4] = sum32$2(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$6.toHex32(this.h, 'big');else return utils$6.split32(this.h, 'big');\n};\n\nvar utils$5 = utils$9;\nvar common$2 = common$5;\nvar shaCommon = common$4;\nvar assert$3 = minimalisticAssert;\nvar sum32$1 = utils$5.sum32;\nvar sum32_4$1 = utils$5.sum32_4;\nvar sum32_5 = utils$5.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\nvar BlockHash$2 = common$2.BlockHash;\nvar sha256_K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n\nfunction SHA256$1() {\n  if (!(this instanceof SHA256$1)) return new SHA256$1();\n  BlockHash$2.call(this);\n  this.h = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\n\nutils$5.inherits(SHA256$1, BlockHash$2);\nvar _256 = SHA256$1;\nSHA256$1.blockSize = 512;\nSHA256$1.outSize = 256;\nSHA256$1.hmacStrength = 192;\nSHA256$1.padLength = 64;\n\nSHA256$1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++) {\n    W[i] = msg[start + i];\n  }\n\n  for (; i < W.length; i++) {\n    W[i] = sum32_4$1(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n  }\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n  assert$3(this.k.length === W.length);\n\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32$1(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32$1(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32$1(T1, T2);\n  }\n\n  this.h[0] = sum32$1(this.h[0], a);\n  this.h[1] = sum32$1(this.h[1], b);\n  this.h[2] = sum32$1(this.h[2], c);\n  this.h[3] = sum32$1(this.h[3], d);\n  this.h[4] = sum32$1(this.h[4], e);\n  this.h[5] = sum32$1(this.h[5], f);\n  this.h[6] = sum32$1(this.h[6], g);\n  this.h[7] = sum32$1(this.h[7], h);\n};\n\nSHA256$1.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$5.toHex32(this.h, 'big');else return utils$5.split32(this.h, 'big');\n};\n\nvar utils$4 = utils$9;\nvar SHA256 = _256;\n\nfunction SHA224() {\n  if (!(this instanceof SHA224)) return new SHA224();\n  SHA256.call(this);\n  this.h = [0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4];\n}\n\nutils$4.inherits(SHA224, SHA256);\nvar _224 = SHA224;\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex') return utils$4.toHex32(this.h.slice(0, 7), 'big');else return utils$4.split32(this.h.slice(0, 7), 'big');\n};\n\nvar utils$3 = utils$9;\nvar common$1 = common$5;\nvar assert$2 = minimalisticAssert;\nvar rotr64_hi = utils$3.rotr64_hi;\nvar rotr64_lo = utils$3.rotr64_lo;\nvar shr64_hi = utils$3.shr64_hi;\nvar shr64_lo = utils$3.shr64_lo;\nvar sum64 = utils$3.sum64;\nvar sum64_hi = utils$3.sum64_hi;\nvar sum64_lo = utils$3.sum64_lo;\nvar sum64_4_hi = utils$3.sum64_4_hi;\nvar sum64_4_lo = utils$3.sum64_4_lo;\nvar sum64_5_hi = utils$3.sum64_5_hi;\nvar sum64_5_lo = utils$3.sum64_5_lo;\nvar BlockHash$1 = common$1.BlockHash;\nvar sha512_K = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];\n\nfunction SHA512$1() {\n  if (!(this instanceof SHA512$1)) return new SHA512$1();\n  BlockHash$1.call(this);\n  this.h = [0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1, 0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\n\nutils$3.inherits(SHA512$1, BlockHash$1);\nvar _512 = SHA512$1;\nSHA512$1.blockSize = 1024;\nSHA512$1.outSize = 512;\nSHA512$1.hmacStrength = 192;\nSHA512$1.padLength = 128;\n\nSHA512$1.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W; // 32 x 32bit words\n\n  for (var i = 0; i < 32; i++) {\n    W[i] = msg[start + i];\n  }\n\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]); // i - 2\n\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14]; // i - 7\n\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]); // i - 15\n\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32]; // i - 16\n\n    var c3_lo = W[i - 31];\n    W[i] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);\n  }\n};\n\nSHA512$1.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n  assert$2(this.k.length === W.length);\n\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n    var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n    hh = gh;\n    hl = gl;\n    gh = fh;\n    gl = fl;\n    fh = eh;\n    fl = el;\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n    dh = ch;\n    dl = cl;\n    ch = bh;\n    cl = bl;\n    bh = ah;\n    bl = al;\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512$1.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$3.toHex32(this.h, 'big');else return utils$3.split32(this.h, 'big');\n};\n\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = xh & yh ^ ~xh & zh;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = xl & yl ^ ~xl & zl;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = xh & yh ^ xh & zh ^ yh & zh;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = xl & yl ^ xl & zl ^ yl & zl;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2); // 34\n\n  var c2_hi = rotr64_hi(xl, xh, 7); // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2); // 34\n\n  var c2_lo = rotr64_lo(xl, xh, 7); // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9); // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9); // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29); // 61\n\n  var c2_hi = shr64_hi(xh, xl, 6);\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29); // 61\n\n  var c2_lo = shr64_lo(xh, xl, 6);\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nvar utils$2 = utils$9;\nvar SHA512 = _512;\n\nfunction SHA384() {\n  if (!(this instanceof SHA384)) return new SHA384();\n  SHA512.call(this);\n  this.h = [0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939, 0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4];\n}\n\nutils$2.inherits(SHA384, SHA512);\nvar _384 = SHA384;\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$2.toHex32(this.h.slice(0, 12), 'big');else return utils$2.split32(this.h.slice(0, 12), 'big');\n};\n\nsha.sha1 = _1;\nsha.sha224 = _224;\nsha.sha256 = _256;\nsha.sha384 = _384;\nsha.sha512 = _512;\nvar ripemd = {};\nvar utils$1 = utils$9;\nvar common = common$5;\nvar rotl32 = utils$1.rotl32;\nvar sum32 = utils$1.sum32;\nvar sum32_3 = utils$1.sum32_3;\nvar sum32_4 = utils$1.sum32_4;\nvar BlockHash = common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160)) return new RIPEMD160();\n  BlockHash.call(this);\n  this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n  this.endian = 'little';\n}\n\nutils$1.inherits(RIPEMD160, BlockHash);\nripemd.ripemd160 = RIPEMD160;\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(rotl32(sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]), E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(rotl32(sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$1.toHex32(this.h, 'little');else return utils$1.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15) return x ^ y ^ z;else if (j <= 31) return x & y | ~x & z;else if (j <= 47) return (x | ~y) ^ z;else if (j <= 63) return x & z | y & ~z;else return x ^ (y | ~z);\n}\n\nfunction K(j) {\n  if (j <= 15) return 0x00000000;else if (j <= 31) return 0x5a827999;else if (j <= 47) return 0x6ed9eba1;else if (j <= 63) return 0x8f1bbcdc;else return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15) return 0x50a28be6;else if (j <= 31) return 0x5c4dd124;else if (j <= 47) return 0x6d703ef3;else if (j <= 63) return 0x7a6d76e9;else return 0x00000000;\n}\n\nvar r = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];\nvar rh = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];\nvar s = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];\nvar sh = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];\nvar utils = utils$9;\nvar assert$1 = minimalisticAssert;\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac)) return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\n\nvar hmac = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize) key = new this.Hash().update(key).digest();\n  assert$1(key.length <= this.blockSize); // Add padding to key\n\n  for (var i = key.length; i < this.blockSize; i++) {\n    key.push(0);\n  }\n\n  for (i = 0; i < key.length; i++) {\n    key[i] ^= 0x36;\n  }\n\n  this.inner = new this.Hash().update(key); // 0x36 ^ 0x5c = 0x6a\n\n  for (i = 0; i < key.length; i++) {\n    key[i] ^= 0x6a;\n  }\n\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n\n(function (exports) {\n  var hash = exports;\n  hash.utils = utils$9;\n  hash.common = common$5;\n  hash.sha = sha;\n  hash.ripemd = ripemd;\n  hash.hmac = hmac; // Proxy hash functions to the main object\n\n  hash.sha1 = hash.sha.sha1;\n  hash.sha256 = hash.sha.sha256;\n  hash.sha224 = hash.sha.sha224;\n  hash.sha384 = hash.sha.sha384;\n  hash.sha512 = hash.sha.sha512;\n  hash.ripemd160 = hash.ripemd.ripemd160;\n})(hash$1);\n\nvar hash = hash$1;\nvar version$2 = \"logger/5.6.0\";\nvar _permanentCensorErrors = false;\nvar _censorErrors = false;\nvar LogLevels = {\n  debug: 1,\n  \"default\": 2,\n  info: 2,\n  warning: 3,\n  error: 4,\n  off: 5\n};\nvar _logLevel = LogLevels[\"default\"];\nvar _globalLogger = null;\n\nfunction _checkNormalize() {\n  try {\n    var missing = []; // Make sure all forms of normalization are supported\n\n    [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach(function (form) {\n      try {\n        if (\"test\".normalize(form) !== \"test\") {\n          throw new Error(\"bad normalize\");\n        }\n\n        ;\n      } catch (error) {\n        missing.push(form);\n      }\n    });\n\n    if (missing.length) {\n      throw new Error(\"missing \" + missing.join(\", \"));\n    }\n\n    if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n      throw new Error(\"broken implementation\");\n    }\n  } catch (error) {\n    return error.message;\n  }\n\n  return null;\n}\n\nvar _normalizeError = _checkNormalize();\n\nvar LogLevel;\n\n(function (LogLevel) {\n  LogLevel[\"DEBUG\"] = \"DEBUG\";\n  LogLevel[\"INFO\"] = \"INFO\";\n  LogLevel[\"WARNING\"] = \"WARNING\";\n  LogLevel[\"ERROR\"] = \"ERROR\";\n  LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\n\nvar ErrorCode;\n\n(function (ErrorCode) {\n  ///////////////////\n  // Generic Errors\n  // Unknown Error\n  ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\"; // Not Implemented\n\n  ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\"; // Unsupported Operation\n  //   - operation\n\n  ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\"; // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n  //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n\n  ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\"; // Some sort of bad response from the server\n\n  ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\"; // Timeout\n\n  ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\"; ///////////////////\n  // Operational  Errors\n  // Buffer Overrun\n\n  ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\"; // Numeric Fault\n  //   - operation: the operation being executed\n  //   - fault: the reason this faulted\n\n  ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\"; ///////////////////\n  // Argument Errors\n  // Missing new operator to an object\n  //  - name: The name of the class\n\n  ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\"; // Invalid argument (e.g. value is incompatible with type) to a function:\n  //   - argument: The argument name that was invalid\n  //   - value: The value of the argument\n\n  ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\"; // Missing argument to a function:\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n\n  ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\"; // Too many arguments\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n\n  ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\"; ///////////////////\n  // Blockchain Errors\n  // Call exception\n  //  - transaction: the transaction\n  //  - address?: the contract address\n  //  - args?: The arguments passed into the function\n  //  - method?: The Solidity method signature\n  //  - errorSignature?: The EIP848 error signature\n  //  - errorArgs?: The EIP848 error parameters\n  //  - reason: The reason (only for EIP848 \"Error(string)\")\n\n  ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\"; // Insufficient funds (< value + gasLimit * gasPrice)\n  //   - transaction: the transaction attempted\n\n  ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\"; // Nonce has already been used\n  //   - transaction: the transaction attempted\n\n  ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\"; // The replacement fee for the transaction is too low\n  //   - transaction: the transaction attempted\n\n  ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\"; // The gas limit could not be estimated\n  //   - transaction: the transaction passed to estimateGas\n\n  ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\"; // The transaction was replaced by one with a higher gas price\n  //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n  //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n  //   - hash: original transaction hash\n  //   - replacement: the full TransactionsResponse for the replacement\n  //   - receipt: the receipt of the replacement\n\n  ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n})(ErrorCode || (ErrorCode = {}));\n\nvar HEX = \"0123456789abcdef\";\n\nvar Logger = /*#__PURE__*/function () {\n  function Logger(version) {\n    _classCallCheck(this, Logger);\n\n    Object.defineProperty(this, \"version\", {\n      enumerable: true,\n      value: version,\n      writable: false\n    });\n  }\n\n  _createClass(Logger, [{\n    key: \"_log\",\n    value: function _log(logLevel, args) {\n      var level = logLevel.toLowerCase();\n\n      if (LogLevels[level] == null) {\n        this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n      }\n\n      if (_logLevel > LogLevels[level]) {\n        return;\n      }\n\n      console.log.apply(console, args);\n    }\n  }, {\n    key: \"debug\",\n    value: function debug() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      this._log(Logger.levels.DEBUG, args);\n    }\n  }, {\n    key: \"info\",\n    value: function info() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      this._log(Logger.levels.INFO, args);\n    }\n  }, {\n    key: \"warn\",\n    value: function warn() {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      this._log(Logger.levels.WARNING, args);\n    }\n  }, {\n    key: \"makeError\",\n    value: function makeError(message, code, params) {\n      // Errors are being censored\n      if (_censorErrors) {\n        return this.makeError(\"censored error\", code, {});\n      }\n\n      if (!code) {\n        code = Logger.errors.UNKNOWN_ERROR;\n      }\n\n      if (!params) {\n        params = {};\n      }\n\n      var messageDetails = [];\n      Object.keys(params).forEach(function (key) {\n        var value = params[key];\n\n        try {\n          if (value instanceof Uint8Array) {\n            var hex = \"\";\n\n            for (var i = 0; i < value.length; i++) {\n              hex += HEX[value[i] >> 4];\n              hex += HEX[value[i] & 0x0f];\n            }\n\n            messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n          } else {\n            messageDetails.push(key + \"=\" + JSON.stringify(value));\n          }\n        } catch (error) {\n          messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n        }\n      });\n      messageDetails.push(\"code=\".concat(code));\n      messageDetails.push(\"version=\".concat(this.version));\n      var reason = message;\n      var url = \"\";\n\n      switch (code) {\n        case ErrorCode.NUMERIC_FAULT:\n          {\n            url = \"NUMERIC_FAULT\";\n            var fault = message;\n\n            switch (fault) {\n              case \"overflow\":\n              case \"underflow\":\n              case \"division-by-zero\":\n                url += \"-\" + fault;\n                break;\n\n              case \"negative-power\":\n              case \"negative-width\":\n                url += \"-unsupported\";\n                break;\n\n              case \"unbound-bitwise-result\":\n                url += \"-unbound-result\";\n                break;\n            }\n\n            break;\n          }\n\n        case ErrorCode.CALL_EXCEPTION:\n        case ErrorCode.INSUFFICIENT_FUNDS:\n        case ErrorCode.MISSING_NEW:\n        case ErrorCode.NONCE_EXPIRED:\n        case ErrorCode.REPLACEMENT_UNDERPRICED:\n        case ErrorCode.TRANSACTION_REPLACED:\n        case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n          url = code;\n          break;\n      }\n\n      if (url) {\n        message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n      }\n\n      if (messageDetails.length) {\n        message += \" (\" + messageDetails.join(\", \") + \")\";\n      } // @TODO: Any??\n\n\n      var error = new Error(message);\n      error.reason = reason;\n      error.code = code;\n      Object.keys(params).forEach(function (key) {\n        error[key] = params[key];\n      });\n      return error;\n    }\n  }, {\n    key: \"throwError\",\n    value: function throwError(message, code, params) {\n      throw this.makeError(message, code, params);\n    }\n  }, {\n    key: \"throwArgumentError\",\n    value: function throwArgumentError(message, name, value) {\n      return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n        argument: name,\n        value: value\n      });\n    }\n  }, {\n    key: \"assert\",\n    value: function assert(condition, message, code, params) {\n      if (!!condition) {\n        return;\n      }\n\n      this.throwError(message, code, params);\n    }\n  }, {\n    key: \"assertArgument\",\n    value: function assertArgument(condition, message, name, value) {\n      if (!!condition) {\n        return;\n      }\n\n      this.throwArgumentError(message, name, value);\n    }\n  }, {\n    key: \"checkNormalize\",\n    value: function checkNormalize(message) {\n      if (_normalizeError) {\n        this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"String.prototype.normalize\",\n          form: _normalizeError\n        });\n      }\n    }\n  }, {\n    key: \"checkSafeUint53\",\n    value: function checkSafeUint53(value, message) {\n      if (typeof value !== \"number\") {\n        return;\n      }\n\n      if (message == null) {\n        message = \"value not safe\";\n      }\n\n      if (value < 0 || value >= 0x1fffffffffffff) {\n        this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n          operation: \"checkSafeInteger\",\n          fault: \"out-of-safe-range\",\n          value: value\n        });\n      }\n\n      if (value % 1) {\n        this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n          operation: \"checkSafeInteger\",\n          fault: \"non-integer\",\n          value: value\n        });\n      }\n    }\n  }, {\n    key: \"checkArgumentCount\",\n    value: function checkArgumentCount(count, expectedCount, message) {\n      if (message) {\n        message = \": \" + message;\n      } else {\n        message = \"\";\n      }\n\n      if (count < expectedCount) {\n        this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n          count: count,\n          expectedCount: expectedCount\n        });\n      }\n\n      if (count > expectedCount) {\n        this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n          count: count,\n          expectedCount: expectedCount\n        });\n      }\n    }\n  }, {\n    key: \"checkNew\",\n    value: function checkNew(target, kind) {\n      if (target === Object || target == null) {\n        this.throwError(\"missing new\", Logger.errors.MISSING_NEW, {\n          name: kind.name\n        });\n      }\n    }\n  }, {\n    key: \"checkAbstract\",\n    value: function checkAbstract(target, kind) {\n      if (target === kind) {\n        this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, {\n          name: target.name,\n          operation: \"new\"\n        });\n      } else if (target === Object || target == null) {\n        this.throwError(\"missing new\", Logger.errors.MISSING_NEW, {\n          name: kind.name\n        });\n      }\n    }\n  }], [{\n    key: \"globalLogger\",\n    value: function globalLogger() {\n      if (!_globalLogger) {\n        _globalLogger = new Logger(version$2);\n      }\n\n      return _globalLogger;\n    }\n  }, {\n    key: \"setCensorship\",\n    value: function setCensorship(censorship, permanent) {\n      if (!censorship && permanent) {\n        this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"setCensorship\"\n        });\n      }\n\n      if (_permanentCensorErrors) {\n        if (!censorship) {\n          return;\n        }\n\n        this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"setCensorship\"\n        });\n      }\n\n      _censorErrors = !!censorship;\n      _permanentCensorErrors = !!permanent;\n    }\n  }, {\n    key: \"setLogLevel\",\n    value: function setLogLevel(logLevel) {\n      var level = LogLevels[logLevel.toLowerCase()];\n\n      if (level == null) {\n        Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n        return;\n      }\n\n      _logLevel = level;\n    }\n  }, {\n    key: \"from\",\n    value: function from(version) {\n      return new Logger(version);\n    }\n  }]);\n\n  return Logger;\n}();\n\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\nvar version$1 = \"bytes/5.6.0\";\nvar logger = new Logger(version$1); ///////////////////////////////\n\nfunction isHexable(value) {\n  return !!value.toHexString;\n}\n\nfunction addSlice(array) {\n  if (array.slice) {\n    return array;\n  }\n\n  array.slice = function () {\n    var args = Array.prototype.slice.call(arguments);\n    return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n  };\n\n  return array;\n}\n\nfunction isInteger(value) {\n  return typeof value === \"number\" && value == value && value % 1 === 0;\n}\n\nfunction isBytes(value) {\n  if (value == null) {\n    return false;\n  }\n\n  if (value.constructor === Uint8Array) {\n    return true;\n  }\n\n  if (typeof value === \"string\") {\n    return false;\n  }\n\n  if (!isInteger(value.length) || value.length < 0) {\n    return false;\n  }\n\n  for (var i = 0; i < value.length; i++) {\n    var v = value[i];\n\n    if (!isInteger(v) || v < 0 || v >= 256) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction arrayify(value, options) {\n  if (!options) {\n    options = {};\n  }\n\n  if (typeof value === \"number\") {\n    logger.checkSafeUint53(value, \"invalid arrayify value\");\n    var result = [];\n\n    while (value) {\n      result.unshift(value & 0xff);\n      value = parseInt(String(value / 256));\n    }\n\n    if (result.length === 0) {\n      result.push(0);\n    }\n\n    return addSlice(new Uint8Array(result));\n  }\n\n  if (options.allowMissingPrefix && typeof value === \"string\" && value.substring(0, 2) !== \"0x\") {\n    value = \"0x\" + value;\n  }\n\n  if (isHexable(value)) {\n    value = value.toHexString();\n  }\n\n  if (isHexString(value)) {\n    var hex = value.substring(2);\n\n    if (hex.length % 2) {\n      if (options.hexPad === \"left\") {\n        hex = \"0x0\" + hex.substring(2);\n      } else if (options.hexPad === \"right\") {\n        hex += \"0\";\n      } else {\n        logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n      }\n    }\n\n    var _result = [];\n\n    for (var i = 0; i < hex.length; i += 2) {\n      _result.push(parseInt(hex.substring(i, i + 2), 16));\n    }\n\n    return addSlice(new Uint8Array(_result));\n  }\n\n  if (isBytes(value)) {\n    return addSlice(new Uint8Array(value));\n  }\n\n  return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\n\nfunction isHexString(value, length) {\n  if (typeof value !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n    return false;\n  }\n\n  if (length && value.length !== 2 + 2 * length) {\n    return false;\n  }\n\n  return true;\n}\n\nvar version = \"sha2/5.6.0\";\nnew Logger(version);\n\nfunction sha256(data) {\n  return \"0x\" + hash.sha256().update(arrayify(data)).digest(\"hex\");\n}\n\nvar Struct = /*#__PURE__*/function () {\n  function Struct(properties) {\n    _classCallCheck(this, Struct);\n\n    Object.assign(this, properties);\n  }\n\n  _createClass(Struct, [{\n    key: \"encode\",\n    value: function encode() {\n      return Buffer.from(serialize(SOLANA_SCHEMA, this));\n    }\n  }], [{\n    key: \"decode\",\n    value: function decode(data) {\n      return deserialize(SOLANA_SCHEMA, this, data);\n    }\n  }, {\n    key: \"decodeUnchecked\",\n    value: function decodeUnchecked(data) {\n      return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n    }\n  }]);\n\n  return Struct;\n}(); // Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\n\n\nvar Enum = /*#__PURE__*/function (_Struct) {\n  _inherits(Enum, _Struct);\n\n  var _super = _createSuper(Enum);\n\n  function Enum(properties) {\n    var _this;\n\n    _classCallCheck(this, Enum);\n\n    _this = _super.call(this, properties);\n    _this.enum = '';\n\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n\n    Object.keys(properties).map(function (key) {\n      _this.enum = key;\n    });\n    return _this;\n  }\n\n  return _createClass(Enum);\n}(Struct);\n\nvar SOLANA_SCHEMA = new Map();\n/**\n * Maximum length of derived pubkey seed\n */\n\nvar MAX_SEED_LENGTH = 32;\n/**\n * Value to be converted into public key\n */\n\nfunction isPublicKeyData(value) {\n  return value._bn !== undefined;\n}\n/**\n * A public key\n */\n\n\nvar PublicKey = /*#__PURE__*/function (_Struct2) {\n  _inherits(PublicKey, _Struct2);\n\n  var _super2 = _createSuper(PublicKey);\n\n  /** @internal */\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  function PublicKey(value) {\n    var _this2;\n\n    _classCallCheck(this, PublicKey);\n\n    _this2 = _super2.call(this, {});\n    _this2._bn = void 0;\n\n    if (isPublicKeyData(value)) {\n      _this2._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        var decoded = bs58.decode(value);\n\n        if (decoded.length != 32) {\n          throw new Error(\"Invalid public key input\");\n        }\n\n        _this2._bn = new BN(decoded);\n      } else {\n        _this2._bn = new BN(value);\n      }\n\n      if (_this2._bn.byteLength() > 32) {\n        throw new Error(\"Invalid public key input\");\n      }\n    }\n\n    return _this2;\n  }\n  /**\n   * Default public key value. (All zeros)\n   */\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n\n\n  _createClass(PublicKey, [{\n    key: \"equals\",\n    value: function equals(publicKey) {\n      return this._bn.eq(publicKey._bn);\n    }\n    /**\n     * Return the base-58 representation of the public key\n     */\n\n  }, {\n    key: \"toBase58\",\n    value: function toBase58() {\n      return bs58.encode(this.toBytes());\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toBase58();\n    }\n    /**\n     * Return the byte array representation of the public key\n     */\n\n  }, {\n    key: \"toBytes\",\n    value: function toBytes() {\n      return this.toBuffer();\n    }\n    /**\n     * Return the Buffer representation of the public key\n     */\n\n  }, {\n    key: \"toBuffer\",\n    value: function toBuffer() {\n      var b = this._bn.toArrayLike(Buffer);\n\n      if (b.length === 32) {\n        return b;\n      }\n\n      var zeroPad = Buffer.alloc(32);\n      b.copy(zeroPad, 32 - b.length);\n      return zeroPad;\n    }\n    /**\n     * Return the base-58 representation of the public key\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.toBase58();\n    }\n    /**\n     * Derive a public key from another key, a seed, and a program ID.\n     * The program ID will also serve as the owner of the public key, giving\n     * it permission to write data to the account.\n     */\n\n    /* eslint-disable require-await */\n\n  }], [{\n    key: \"createWithSeed\",\n    value: function () {\n      var _createWithSeed = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(fromPublicKey, seed, programId) {\n        var buffer, hash;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                buffer = Buffer.concat([fromPublicKey.toBuffer(), Buffer.from(seed), programId.toBuffer()]);\n                hash = sha256(new Uint8Array(buffer)).slice(2);\n                return _context.abrupt(\"return\", new PublicKey(Buffer.from(hash, 'hex')));\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function createWithSeed(_x, _x2, _x3) {\n        return _createWithSeed.apply(this, arguments);\n      }\n\n      return createWithSeed;\n    }()\n    /**\n     * Derive a program address from seeds and a program ID.\n     */\n\n    /* eslint-disable require-await */\n\n  }, {\n    key: \"createProgramAddressSync\",\n    value: function createProgramAddressSync(seeds, programId) {\n      var buffer = Buffer.alloc(0);\n      seeds.forEach(function (seed) {\n        if (seed.length > MAX_SEED_LENGTH) {\n          throw new TypeError(\"Max seed length exceeded\");\n        }\n\n        buffer = Buffer.concat([buffer, toBuffer(seed)]);\n      });\n      buffer = Buffer.concat([buffer, programId.toBuffer(), Buffer.from('ProgramDerivedAddress')]);\n      var hash = sha256(new Uint8Array(buffer)).slice(2);\n      var publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n\n      if (is_on_curve(publicKeyBytes)) {\n        throw new Error(\"Invalid seeds, address must fall off the curve\");\n      }\n\n      return new PublicKey(publicKeyBytes);\n    }\n    /**\n     * Async version of createProgramAddressSync\n     * For backwards compatibility\n     */\n\n    /* eslint-disable require-await */\n\n  }, {\n    key: \"createProgramAddress\",\n    value: function () {\n      var _createProgramAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(seeds, programId) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", this.createProgramAddressSync(seeds, programId));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function createProgramAddress(_x4, _x5) {\n        return _createProgramAddress.apply(this, arguments);\n      }\n\n      return createProgramAddress;\n    }()\n    /**\n     * Find a valid program address\n     *\n     * Valid program addresses must fall off the ed25519 curve.  This function\n     * iterates a nonce until it finds one that when combined with the seeds\n     * results in a valid program address.\n     */\n\n  }, {\n    key: \"findProgramAddressSync\",\n    value: function findProgramAddressSync(seeds, programId) {\n      var nonce = 255;\n      var address;\n\n      while (nonce != 0) {\n        try {\n          var seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n          address = this.createProgramAddressSync(seedsWithNonce, programId);\n        } catch (err) {\n          if (err instanceof TypeError) {\n            throw err;\n          }\n\n          nonce--;\n          continue;\n        }\n\n        return [address, nonce];\n      }\n\n      throw new Error(\"Unable to find a viable program address nonce\");\n    }\n    /**\n     * Async version of findProgramAddressSync\n     * For backwards compatibility\n     */\n\n  }, {\n    key: \"findProgramAddress\",\n    value: function () {\n      var _findProgramAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(seeds, programId) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", this.findProgramAddressSync(seeds, programId));\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function findProgramAddress(_x6, _x7) {\n        return _findProgramAddress.apply(this, arguments);\n      }\n\n      return findProgramAddress;\n    }()\n    /**\n     * Check that a pubkey is on the ed25519 curve.\n     */\n\n  }, {\n    key: \"isOnCurve\",\n    value: function isOnCurve(pubkeyData) {\n      var pubkey = new PublicKey(pubkeyData);\n      return is_on_curve(pubkey.toBytes()) == 1;\n    }\n  }]);\n\n  return PublicKey;\n}(Struct);\n\nPublicKey.default = new PublicKey('11111111111111111111111111111111');\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']]\n}); // @ts-ignore\n\nvar naclLowLevel = nacl.lowlevel; // Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\n\nfunction is_on_curve(p) {\n  var r = [naclLowLevel.gf(), naclLowLevel.gf(), naclLowLevel.gf(), naclLowLevel.gf()];\n  var t = naclLowLevel.gf(),\n      chk = naclLowLevel.gf(),\n      num = naclLowLevel.gf(),\n      den = naclLowLevel.gf(),\n      den2 = naclLowLevel.gf(),\n      den4 = naclLowLevel.gf(),\n      den6 = naclLowLevel.gf();\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\n\nvar gf1 = naclLowLevel.gf([1]);\nvar I = naclLowLevel.gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);\n\nfunction neq25519(a, b) {\n  var c = new Uint8Array(32),\n      d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\n\n\nvar Account = /*#__PURE__*/function () {\n  /** @internal */\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  function Account(secretKey) {\n    _classCallCheck(this, Account);\n\n    this._keypair = void 0;\n\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n  /**\n   * The public key for this account\n   */\n\n\n  _createClass(Account, [{\n    key: \"publicKey\",\n    get: function get() {\n      return new PublicKey(this._keypair.publicKey);\n    }\n    /**\n     * The **unencrypted** secret key for this account\n     */\n\n  }, {\n    key: \"secretKey\",\n    get: function get() {\n      return toBuffer(this._keypair.secretKey);\n    }\n  }]);\n\n  return Account;\n}();\n\nvar BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey('BPFLoader1111111111111111111111111111111111');\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\n\nvar PACKET_DATA_SIZE = 1280 - 40 - 8;\nvar SIGNATURE_LENGTH_IN_BYTES = 64;\n/**\n * Layout for a public key\n */\n\nvar publicKey = function publicKey() {\n  var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'publicKey';\n  return BufferLayout.blob(32, property);\n};\n/**\n * Layout for a Rust String type\n */\n\n\nvar rustString = function rustString() {\n  var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'string';\n  var rsl = BufferLayout.struct([BufferLayout.u32('length'), BufferLayout.u32('lengthPadding'), BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars')], property);\n\n  var _decode = rsl.decode.bind(rsl);\n\n  var _encode = rsl.encode.bind(rsl);\n\n  var rslShim = rsl;\n\n  rslShim.decode = function (b, offset) {\n    var data = _decode(b, offset);\n\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = function (str, b, offset) {\n    var data = {\n      chars: Buffer.from(str, 'utf8')\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = function (str) {\n    return BufferLayout.u32().span + BufferLayout.u32().span + Buffer.from(str, 'utf8').length;\n  };\n\n  return rslShim;\n};\n/**\n * Layout for an Authorized object\n */\n\n\nvar authorized = function authorized() {\n  var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'authorized';\n  return BufferLayout.struct([publicKey('staker'), publicKey('withdrawer')], property);\n};\n/**\n * Layout for a Lockup object\n */\n\n\nvar lockup = function lockup() {\n  var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'lockup';\n  return BufferLayout.struct([BufferLayout.ns64('unixTimestamp'), BufferLayout.ns64('epoch'), publicKey('custodian')], property);\n};\n/**\n *  Layout for a VoteInit object\n */\n\n\nvar voteInit = function voteInit() {\n  var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'voteInit';\n  return BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedVoter'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission')], property);\n};\n\nfunction getAlloc(type, fields) {\n  var alloc = 0;\n  type.layout.fields.forEach(function (item) {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n\nfunction decodeLength(bytes) {\n  var len = 0;\n  var size = 0;\n\n  for (;;) {\n    var elem = bytes.shift();\n    len |= (elem & 0x7f) << size * 7;\n    size += 1;\n\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n\n  return len;\n}\n\nfunction encodeLength(bytes, len) {\n  var rem_len = len;\n\n  for (;;) {\n    var elem = rem_len & 0x7f;\n    rem_len >>= 7;\n\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n/**\n * The message header, identifying signed and read-only account\n */\n\n\nvar PUBKEY_LENGTH = 32;\n/**\n * List of instructions to be processed atomically\n */\n\nvar Message = /*#__PURE__*/function () {\n  function Message(args) {\n    var _this3 = this;\n\n    _classCallCheck(this, Message);\n\n    this.header = void 0;\n    this.accountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.instructions = void 0;\n    this.indexToProgramIds = new Map();\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(function (account) {\n      return new PublicKey(account);\n    });\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(function (ix) {\n      return _this3.indexToProgramIds.set(ix.programIdIndex, _this3.accountKeys[ix.programIdIndex]);\n    });\n  }\n\n  _createClass(Message, [{\n    key: \"isAccountSigner\",\n    value: function isAccountSigner(index) {\n      return index < this.header.numRequiredSignatures;\n    }\n  }, {\n    key: \"isAccountWritable\",\n    value: function isAccountWritable(index) {\n      return index < this.header.numRequiredSignatures - this.header.numReadonlySignedAccounts || index >= this.header.numRequiredSignatures && index < this.accountKeys.length - this.header.numReadonlyUnsignedAccounts;\n    }\n  }, {\n    key: \"isProgramId\",\n    value: function isProgramId(index) {\n      return this.indexToProgramIds.has(index);\n    }\n  }, {\n    key: \"programIds\",\n    value: function programIds() {\n      return _toConsumableArray(this.indexToProgramIds.values());\n    }\n  }, {\n    key: \"nonProgramIds\",\n    value: function nonProgramIds() {\n      var _this4 = this;\n\n      return this.accountKeys.filter(function (_, index) {\n        return !_this4.isProgramId(index);\n      });\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      var numKeys = this.accountKeys.length;\n      var keyCount = [];\n      encodeLength(keyCount, numKeys);\n      var instructions = this.instructions.map(function (instruction) {\n        var accounts = instruction.accounts,\n            programIdIndex = instruction.programIdIndex;\n        var data = Array.from(bs58.decode(instruction.data));\n        var keyIndicesCount = [];\n        encodeLength(keyIndicesCount, accounts.length);\n        var dataCount = [];\n        encodeLength(dataCount, data.length);\n        return {\n          programIdIndex: programIdIndex,\n          keyIndicesCount: Buffer.from(keyIndicesCount),\n          keyIndices: accounts,\n          dataLength: Buffer.from(dataCount),\n          data: data\n        };\n      });\n      var instructionCount = [];\n      encodeLength(instructionCount, instructions.length);\n      var instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n      Buffer.from(instructionCount).copy(instructionBuffer);\n      var instructionBufferLength = instructionCount.length;\n      instructions.forEach(function (instruction) {\n        var instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(instruction.keyIndicesCount.length, 'keyIndicesCount'), BufferLayout.seq(BufferLayout.u8('keyIndex'), instruction.keyIndices.length, 'keyIndices'), BufferLayout.blob(instruction.dataLength.length, 'dataLength'), BufferLayout.seq(BufferLayout.u8('userdatum'), instruction.data.length, 'data')]);\n        var length = instructionLayout.encode(instruction, instructionBuffer, instructionBufferLength);\n        instructionBufferLength += length;\n      });\n      instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n      var signDataLayout = BufferLayout.struct([BufferLayout.blob(1, 'numRequiredSignatures'), BufferLayout.blob(1, 'numReadonlySignedAccounts'), BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'), BufferLayout.blob(keyCount.length, 'keyCount'), BufferLayout.seq(publicKey('key'), numKeys, 'keys'), publicKey('recentBlockhash')]);\n      var transaction = {\n        numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n        numReadonlySignedAccounts: Buffer.from([this.header.numReadonlySignedAccounts]),\n        numReadonlyUnsignedAccounts: Buffer.from([this.header.numReadonlyUnsignedAccounts]),\n        keyCount: Buffer.from(keyCount),\n        keys: this.accountKeys.map(function (key) {\n          return toBuffer(key.toBytes());\n        }),\n        recentBlockhash: bs58.decode(this.recentBlockhash)\n      };\n      var signData = Buffer.alloc(2048);\n      var length = signDataLayout.encode(transaction, signData);\n      instructionBuffer.copy(signData, length);\n      return signData.slice(0, length + instructionBuffer.length);\n    }\n    /**\n     * Decode a compiled message into a Message object.\n     */\n\n  }], [{\n    key: \"from\",\n    value: function from(buffer) {\n      // Slice up wire data\n      var byteArray = _toConsumableArray(buffer);\n\n      var numRequiredSignatures = byteArray.shift();\n      var numReadonlySignedAccounts = byteArray.shift();\n      var numReadonlyUnsignedAccounts = byteArray.shift();\n      var accountCount = decodeLength(byteArray);\n      var accountKeys = [];\n\n      for (var i = 0; i < accountCount; i++) {\n        var account = byteArray.slice(0, PUBKEY_LENGTH);\n        byteArray = byteArray.slice(PUBKEY_LENGTH);\n        accountKeys.push(bs58.encode(Buffer.from(account)));\n      }\n\n      var recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      var instructionCount = decodeLength(byteArray);\n      var instructions = [];\n\n      for (var _i = 0; _i < instructionCount; _i++) {\n        var programIdIndex = byteArray.shift();\n\n        var _accountCount = decodeLength(byteArray);\n\n        var accounts = byteArray.slice(0, _accountCount);\n        byteArray = byteArray.slice(_accountCount);\n        var dataLength = decodeLength(byteArray);\n        var dataSlice = byteArray.slice(0, dataLength);\n        var data = bs58.encode(Buffer.from(dataSlice));\n        byteArray = byteArray.slice(dataLength);\n        instructions.push({\n          programIdIndex: programIdIndex,\n          accounts: accounts,\n          data: data\n        });\n      }\n\n      var messageArgs = {\n        header: {\n          numRequiredSignatures: numRequiredSignatures,\n          numReadonlySignedAccounts: numReadonlySignedAccounts,\n          numReadonlyUnsignedAccounts: numReadonlyUnsignedAccounts\n        },\n        recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n        accountKeys: accountKeys,\n        instructions: instructions\n      };\n      return new Message(messageArgs);\n    }\n  }]);\n\n  return Message;\n}();\n\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n\nvar TransactionStatus;\n/**\n * Default (empty) signature\n */\n\n(function (TransactionStatus) {\n  TransactionStatus[TransactionStatus[\"BLOCKHEIGHT_EXCEEDED\"] = 0] = \"BLOCKHEIGHT_EXCEEDED\";\n  TransactionStatus[TransactionStatus[\"PROCESSED\"] = 1] = \"PROCESSED\";\n  TransactionStatus[TransactionStatus[\"TIMED_OUT\"] = 2] = \"TIMED_OUT\";\n})(TransactionStatus || (TransactionStatus = {}));\n\nvar DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n/**\n * Account metadata used to define instructions\n */\n\n/**\n * Transaction Instruction class\n */\n\nvar TransactionInstruction = /*#__PURE__*/function () {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n\n  /**\n   * Program Id to execute\n   */\n\n  /**\n   * Program input\n   */\n  function TransactionInstruction(opts) {\n    _classCallCheck(this, TransactionInstruction);\n\n    this.keys = void 0;\n    this.programId = void 0;\n    this.data = Buffer.alloc(0);\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  _createClass(TransactionInstruction, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        keys: this.keys.map(function (_ref) {\n          var pubkey = _ref.pubkey,\n              isSigner = _ref.isSigner,\n              isWritable = _ref.isWritable;\n          return {\n            pubkey: pubkey.toJSON(),\n            isSigner: isSigner,\n            isWritable: isWritable\n          };\n        }),\n        programId: this.programId.toJSON(),\n        data: _toConsumableArray(this.data)\n      };\n    }\n  }]);\n\n  return TransactionInstruction;\n}();\n/**\n * Pair of signature and corresponding public key\n */\n\n/**\n * Transaction class\n */\n\n\nvar Transaction = /*#__PURE__*/function () {\n  /**\n   * The transaction fee payer\n   */\n\n  /**\n   * Construct an empty Transaction\n   */\n  function Transaction(opts) {\n    _classCallCheck(this, Transaction);\n\n    this.signatures = [];\n    this.feePayer = void 0;\n    this.instructions = [];\n    this.recentBlockhash = void 0;\n    this.lastValidBlockHeight = void 0;\n    this.nonceInfo = void 0;\n    this._message = void 0;\n    this._json = void 0;\n\n    if (!opts) {\n      return;\n    } else if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {\n      var newOpts = opts;\n      Object.assign(this, newOpts);\n      this.recentBlockhash = newOpts.blockhash;\n      this.lastValidBlockHeight = newOpts.lastValidBlockHeight;\n    } else {\n      var oldOpts = opts;\n      Object.assign(this, oldOpts);\n      this.recentBlockhash = oldOpts.recentBlockhash;\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  _createClass(Transaction, [{\n    key: \"signature\",\n    get:\n    /**\n     * Signatures for the transaction.  Typically created by invoking the\n     * `sign()` method\n     */\n\n    /**\n     * The first (payer) Transaction signature\n     */\n    function get() {\n      if (this.signatures.length > 0) {\n        return this.signatures[0].signature;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        recentBlockhash: this.recentBlockhash || null,\n        feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n        nonceInfo: this.nonceInfo ? {\n          nonce: this.nonceInfo.nonce,\n          nonceInstruction: this.nonceInfo.nonceInstruction.toJSON()\n        } : null,\n        instructions: this.instructions.map(function (instruction) {\n          return instruction.toJSON();\n        }),\n        signers: this.signatures.map(function (_ref2) {\n          var publicKey = _ref2.publicKey;\n          return publicKey.toJSON();\n        })\n      };\n    }\n    /**\n     * Add one or more instructions to this Transaction\n     */\n\n  }, {\n    key: \"add\",\n    value: function add() {\n      var _this5 = this;\n\n      for (var _len4 = arguments.length, items = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        items[_key4] = arguments[_key4];\n      }\n\n      if (items.length === 0) {\n        throw new Error('No instructions');\n      }\n\n      items.forEach(function (item) {\n        if ('instructions' in item) {\n          _this5.instructions = _this5.instructions.concat(item.instructions);\n        } else if ('data' in item && 'programId' in item && 'keys' in item) {\n          _this5.instructions.push(item);\n        } else {\n          _this5.instructions.push(new TransactionInstruction(item));\n        }\n      });\n      return this;\n    }\n    /**\n     * Compile transaction data\n     */\n\n  }, {\n    key: \"compileMessage\",\n    value: function compileMessage() {\n      if (this._message && JSON.stringify(this.toJSON()) === JSON.stringify(this._json)) {\n        return this._message;\n      }\n\n      var nonceInfo = this.nonceInfo;\n\n      if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n        this.recentBlockhash = nonceInfo.nonce;\n        this.instructions.unshift(nonceInfo.nonceInstruction);\n      }\n\n      var recentBlockhash = this.recentBlockhash;\n\n      if (!recentBlockhash) {\n        throw new Error('Transaction recentBlockhash required');\n      }\n\n      if (this.instructions.length < 1) {\n        console.warn('No instructions provided');\n      }\n\n      var feePayer;\n\n      if (this.feePayer) {\n        feePayer = this.feePayer;\n      } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n        // Use implicit fee payer\n        feePayer = this.signatures[0].publicKey;\n      } else {\n        throw new Error('Transaction fee payer required');\n      }\n\n      for (var i = 0; i < this.instructions.length; i++) {\n        if (this.instructions[i].programId === undefined) {\n          throw new Error(\"Transaction instruction index \".concat(i, \" has undefined program id\"));\n        }\n      }\n\n      var programIds = [];\n      var accountMetas = [];\n      this.instructions.forEach(function (instruction) {\n        instruction.keys.forEach(function (accountMeta) {\n          accountMetas.push(_objectSpread({}, accountMeta));\n        });\n        var programId = instruction.programId.toString();\n\n        if (!programIds.includes(programId)) {\n          programIds.push(programId);\n        }\n      }); // Append programID account metas\n\n      programIds.forEach(function (programId) {\n        accountMetas.push({\n          pubkey: new PublicKey(programId),\n          isSigner: false,\n          isWritable: false\n        });\n      }); // Cull duplicate account metas\n\n      var uniqueMetas = [];\n      accountMetas.forEach(function (accountMeta) {\n        var pubkeyString = accountMeta.pubkey.toString();\n        var uniqueIndex = uniqueMetas.findIndex(function (x) {\n          return x.pubkey.toString() === pubkeyString;\n        });\n\n        if (uniqueIndex > -1) {\n          uniqueMetas[uniqueIndex].isWritable = uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n          uniqueMetas[uniqueIndex].isSigner = uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n        } else {\n          uniqueMetas.push(accountMeta);\n        }\n      }); // Sort. Prioritizing first by signer, then by writable\n\n      uniqueMetas.sort(function (x, y) {\n        if (x.isSigner !== y.isSigner) {\n          // Signers always come before non-signers\n          return x.isSigner ? -1 : 1;\n        }\n\n        if (x.isWritable !== y.isWritable) {\n          // Writable accounts always come before read-only accounts\n          return x.isWritable ? -1 : 1;\n        } // Otherwise, sort by pubkey, stringwise.\n\n\n        return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n      }); // Move fee payer to the front\n\n      var feePayerIndex = uniqueMetas.findIndex(function (x) {\n        return x.pubkey.equals(feePayer);\n      });\n\n      if (feePayerIndex > -1) {\n        var _uniqueMetas$splice = uniqueMetas.splice(feePayerIndex, 1),\n            _uniqueMetas$splice2 = _slicedToArray(_uniqueMetas$splice, 1),\n            payerMeta = _uniqueMetas$splice2[0];\n\n        payerMeta.isSigner = true;\n        payerMeta.isWritable = true;\n        uniqueMetas.unshift(payerMeta);\n      } else {\n        uniqueMetas.unshift({\n          pubkey: feePayer,\n          isSigner: true,\n          isWritable: true\n        });\n      } // Disallow unknown signers\n\n\n      var _iterator = _createForOfIteratorHelper(this.signatures),\n          _step;\n\n      try {\n        var _loop = function _loop() {\n          var signature = _step.value;\n          var uniqueIndex = uniqueMetas.findIndex(function (x) {\n            return x.pubkey.equals(signature.publicKey);\n          });\n\n          if (uniqueIndex > -1) {\n            if (!uniqueMetas[uniqueIndex].isSigner) {\n              uniqueMetas[uniqueIndex].isSigner = true;\n              console.warn('Transaction references a signature that is unnecessary, ' + 'only the fee payer and instruction signer accounts should sign a transaction. ' + 'This behavior is deprecated and will throw an error in the next major version release.');\n            }\n          } else {\n            throw new Error(\"unknown signer: \".concat(signature.publicKey.toString()));\n          }\n        };\n\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var numRequiredSignatures = 0;\n      var numReadonlySignedAccounts = 0;\n      var numReadonlyUnsignedAccounts = 0; // Split out signing from non-signing keys and count header values\n\n      var signedKeys = [];\n      var unsignedKeys = [];\n      uniqueMetas.forEach(function (_ref3) {\n        var pubkey = _ref3.pubkey,\n            isSigner = _ref3.isSigner,\n            isWritable = _ref3.isWritable;\n\n        if (isSigner) {\n          signedKeys.push(pubkey.toString());\n          numRequiredSignatures += 1;\n\n          if (!isWritable) {\n            numReadonlySignedAccounts += 1;\n          }\n        } else {\n          unsignedKeys.push(pubkey.toString());\n\n          if (!isWritable) {\n            numReadonlyUnsignedAccounts += 1;\n          }\n        }\n      });\n      var accountKeys = signedKeys.concat(unsignedKeys);\n      var instructions = this.instructions.map(function (instruction) {\n        var data = instruction.data,\n            programId = instruction.programId;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(function (meta) {\n            return accountKeys.indexOf(meta.pubkey.toString());\n          }),\n          data: bs58.encode(data)\n        };\n      });\n      instructions.forEach(function (instruction) {\n        assert(instruction.programIdIndex >= 0);\n        instruction.accounts.forEach(function (keyIndex) {\n          return assert(keyIndex >= 0);\n        });\n      });\n      return new Message({\n        header: {\n          numRequiredSignatures: numRequiredSignatures,\n          numReadonlySignedAccounts: numReadonlySignedAccounts,\n          numReadonlyUnsignedAccounts: numReadonlyUnsignedAccounts\n        },\n        accountKeys: accountKeys,\n        recentBlockhash: recentBlockhash,\n        instructions: instructions\n      });\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_compile\",\n    value: function _compile() {\n      var message = this.compileMessage();\n      var signedKeys = message.accountKeys.slice(0, message.header.numRequiredSignatures);\n\n      if (this.signatures.length === signedKeys.length) {\n        var valid = this.signatures.every(function (pair, index) {\n          return signedKeys[index].equals(pair.publicKey);\n        });\n        if (valid) return message;\n      }\n\n      this.signatures = signedKeys.map(function (publicKey) {\n        return {\n          signature: null,\n          publicKey: publicKey\n        };\n      });\n      return message;\n    }\n    /**\n     * Get a buffer of the Transaction data that need to be covered by signatures\n     */\n\n  }, {\n    key: \"serializeMessage\",\n    value: function serializeMessage() {\n      return this._compile().serialize();\n    }\n    /**\n     * Get the estimated fee associated with a transaction\n     */\n\n  }, {\n    key: \"getEstimatedFee\",\n    value: function () {\n      var _getEstimatedFee = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(connection) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return connection.getFeeForMessage(this.compileMessage());\n\n              case 2:\n                return _context4.abrupt(\"return\", _context4.sent.value);\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getEstimatedFee(_x8) {\n        return _getEstimatedFee.apply(this, arguments);\n      }\n\n      return getEstimatedFee;\n    }()\n    /**\n     * Specify the public keys which will be used to sign the Transaction.\n     * The first signer will be used as the transaction fee payer account.\n     *\n     * Signatures can be added with either `partialSign` or `addSignature`\n     *\n     * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n     * specified and it can be set in the Transaction constructor or with the\n     * `feePayer` property.\n     */\n\n  }, {\n    key: \"setSigners\",\n    value: function setSigners() {\n      for (var _len5 = arguments.length, signers = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        signers[_key5] = arguments[_key5];\n      }\n\n      if (signers.length === 0) {\n        throw new Error('No signers');\n      }\n\n      var seen = new Set();\n      this.signatures = signers.filter(function (publicKey) {\n        var key = publicKey.toString();\n\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      }).map(function (publicKey) {\n        return {\n          signature: null,\n          publicKey: publicKey\n        };\n      });\n    }\n    /**\n     * Sign the Transaction with the specified signers. Multiple signatures may\n     * be applied to a Transaction. The first signature is considered \"primary\"\n     * and is used identify and confirm transactions.\n     *\n     * If the Transaction `feePayer` is not set, the first signer will be used\n     * as the transaction fee payer account.\n     *\n     * Transaction fields should not be modified after the first call to `sign`,\n     * as doing so may invalidate the signature and cause the Transaction to be\n     * rejected.\n     *\n     * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n     */\n\n  }, {\n    key: \"sign\",\n    value: function sign() {\n      for (var _len6 = arguments.length, signers = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        signers[_key6] = arguments[_key6];\n      }\n\n      if (signers.length === 0) {\n        throw new Error('No signers');\n      } // Dedupe signers\n\n\n      var seen = new Set();\n      var uniqueSigners = [];\n\n      for (var _i2 = 0, _signers = signers; _i2 < _signers.length; _i2++) {\n        var signer = _signers[_i2];\n        var key = signer.publicKey.toString();\n\n        if (seen.has(key)) {\n          continue;\n        } else {\n          seen.add(key);\n          uniqueSigners.push(signer);\n        }\n      }\n\n      this.signatures = uniqueSigners.map(function (signer) {\n        return {\n          signature: null,\n          publicKey: signer.publicKey\n        };\n      });\n\n      var message = this._compile();\n\n      this._partialSign.apply(this, [message].concat(uniqueSigners));\n    }\n    /**\n     * Partially sign a transaction with the specified accounts. All accounts must\n     * correspond to either the fee payer or a signer account in the transaction\n     * instructions.\n     *\n     * All the caveats from the `sign` method apply to `partialSign`\n     */\n\n  }, {\n    key: \"partialSign\",\n    value: function partialSign() {\n      for (var _len7 = arguments.length, signers = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n        signers[_key7] = arguments[_key7];\n      }\n\n      if (signers.length === 0) {\n        throw new Error('No signers');\n      } // Dedupe signers\n\n\n      var seen = new Set();\n      var uniqueSigners = [];\n\n      for (var _i3 = 0, _signers2 = signers; _i3 < _signers2.length; _i3++) {\n        var signer = _signers2[_i3];\n        var key = signer.publicKey.toString();\n\n        if (seen.has(key)) {\n          continue;\n        } else {\n          seen.add(key);\n          uniqueSigners.push(signer);\n        }\n      }\n\n      var message = this._compile();\n\n      this._partialSign.apply(this, [message].concat(uniqueSigners));\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_partialSign\",\n    value: function _partialSign(message) {\n      var _this6 = this;\n\n      var signData = message.serialize();\n\n      for (var _len8 = arguments.length, signers = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {\n        signers[_key8 - 1] = arguments[_key8];\n      }\n\n      signers.forEach(function (signer) {\n        var signature = nacl.sign.detached(signData, signer.secretKey);\n\n        _this6._addSignature(signer.publicKey, toBuffer(signature));\n      });\n    }\n    /**\n     * Add an externally created signature to a transaction. The public key\n     * must correspond to either the fee payer or a signer account in the transaction\n     * instructions.\n     */\n\n  }, {\n    key: \"addSignature\",\n    value: function addSignature(pubkey, signature) {\n      this._compile(); // Ensure signatures array is populated\n\n\n      this._addSignature(pubkey, signature);\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_addSignature\",\n    value: function _addSignature(pubkey, signature) {\n      assert(signature.length === 64);\n      var index = this.signatures.findIndex(function (sigpair) {\n        return pubkey.equals(sigpair.publicKey);\n      });\n\n      if (index < 0) {\n        throw new Error(\"unknown signer: \".concat(pubkey.toString()));\n      }\n\n      this.signatures[index].signature = Buffer.from(signature);\n    }\n    /**\n     * Verify signatures of a complete, signed Transaction\n     */\n\n  }, {\n    key: \"verifySignatures\",\n    value: function verifySignatures() {\n      return this._verifySignatures(this.serializeMessage(), true);\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_verifySignatures\",\n    value: function _verifySignatures(signData, requireAllSignatures) {\n      var _iterator2 = _createForOfIteratorHelper(this.signatures),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _step2.value,\n              signature = _step2$value.signature,\n              _publicKey = _step2$value.publicKey;\n\n          if (signature === null) {\n            if (requireAllSignatures) {\n              return false;\n            }\n          } else {\n            if (!nacl.sign.detached.verify(signData, signature, _publicKey.toBuffer())) {\n              return false;\n            }\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return true;\n    }\n    /**\n     * Serialize the Transaction in the wire format.\n     */\n\n  }, {\n    key: \"serialize\",\n    value: function serialize(config) {\n      var _Object$assign = Object.assign({\n        requireAllSignatures: true,\n        verifySignatures: true\n      }, config),\n          requireAllSignatures = _Object$assign.requireAllSignatures,\n          verifySignatures = _Object$assign.verifySignatures;\n\n      var signData = this.serializeMessage();\n\n      if (verifySignatures && !this._verifySignatures(signData, requireAllSignatures)) {\n        throw new Error('Signature verification failed');\n      }\n\n      return this._serialize(signData);\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_serialize\",\n    value: function _serialize(signData) {\n      var signatures = this.signatures;\n      var signatureCount = [];\n      encodeLength(signatureCount, signatures.length);\n      var transactionLength = signatureCount.length + signatures.length * 64 + signData.length;\n      var wireTransaction = Buffer.alloc(transactionLength);\n      assert(signatures.length < 256);\n      Buffer.from(signatureCount).copy(wireTransaction, 0);\n      signatures.forEach(function (_ref4, index) {\n        var signature = _ref4.signature;\n\n        if (signature !== null) {\n          assert(signature.length === 64, \"signature has invalid length\");\n          Buffer.from(signature).copy(wireTransaction, signatureCount.length + index * 64);\n        }\n      });\n      signData.copy(wireTransaction, signatureCount.length + signatures.length * 64);\n      assert(wireTransaction.length <= PACKET_DATA_SIZE, \"Transaction too large: \".concat(wireTransaction.length, \" > \").concat(PACKET_DATA_SIZE));\n      return wireTransaction;\n    }\n    /**\n     * Deprecated method\n     * @internal\n     */\n\n  }, {\n    key: \"keys\",\n    get: function get() {\n      assert(this.instructions.length === 1);\n      return this.instructions[0].keys.map(function (keyObj) {\n        return keyObj.pubkey;\n      });\n    }\n    /**\n     * Deprecated method\n     * @internal\n     */\n\n  }, {\n    key: \"programId\",\n    get: function get() {\n      assert(this.instructions.length === 1);\n      return this.instructions[0].programId;\n    }\n    /**\n     * Deprecated method\n     * @internal\n     */\n\n  }, {\n    key: \"data\",\n    get: function get() {\n      assert(this.instructions.length === 1);\n      return this.instructions[0].data;\n    }\n    /**\n     * Parse a wire transaction into a Transaction object.\n     */\n\n  }], [{\n    key: \"from\",\n    value: function from(buffer) {\n      // Slice up wire data\n      var byteArray = _toConsumableArray(buffer);\n\n      var signatureCount = decodeLength(byteArray);\n      var signatures = [];\n\n      for (var i = 0; i < signatureCount; i++) {\n        var signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n        byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n        signatures.push(bs58.encode(Buffer.from(signature)));\n      }\n\n      return Transaction.populate(Message.from(byteArray), signatures);\n    }\n    /**\n     * Populate Transaction object from message and signatures\n     */\n\n  }, {\n    key: \"populate\",\n    value: function populate(message) {\n      var signatures = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var transaction = new Transaction();\n      transaction.recentBlockhash = message.recentBlockhash;\n\n      if (message.header.numRequiredSignatures > 0) {\n        transaction.feePayer = message.accountKeys[0];\n      }\n\n      signatures.forEach(function (signature, index) {\n        var sigPubkeyPair = {\n          signature: signature == bs58.encode(DEFAULT_SIGNATURE) ? null : bs58.decode(signature),\n          publicKey: message.accountKeys[index]\n        };\n        transaction.signatures.push(sigPubkeyPair);\n      });\n      message.instructions.forEach(function (instruction) {\n        var keys = instruction.accounts.map(function (account) {\n          var pubkey = message.accountKeys[account];\n          return {\n            pubkey: pubkey,\n            isSigner: transaction.signatures.some(function (keyObj) {\n              return keyObj.publicKey.toString() === pubkey.toString();\n            }) || message.isAccountSigner(account),\n            isWritable: message.isAccountWritable(account)\n          };\n        });\n        transaction.instructions.push(new TransactionInstruction({\n          keys: keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data)\n        }));\n      });\n      transaction._message = message;\n      transaction._json = transaction.toJSON();\n      return transaction;\n    }\n  }]);\n\n  return Transaction;\n}();\n\nvar SYSVAR_CLOCK_PUBKEY = new PublicKey('SysvarC1ock11111111111111111111111111111111');\nvar SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey('SysvarEpochSchedu1e111111111111111111111111');\nvar SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey('Sysvar1nstructions1111111111111111111111111');\nvar SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey('SysvarRecentB1ockHashes11111111111111111111');\nvar SYSVAR_RENT_PUBKEY = new PublicKey('SysvarRent111111111111111111111111111111111');\nvar SYSVAR_REWARDS_PUBKEY = new PublicKey('SysvarRewards111111111111111111111111111111');\nvar SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey('SysvarS1otHashes111111111111111111111111111');\nvar SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey('SysvarS1otHistory11111111111111111111111111');\nvar SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey('SysvarStakeHistory1111111111111111111111111');\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\nfunction sendAndConfirmTransaction(_x9, _x10, _x11, _x12) {\n  return _sendAndConfirmTransaction.apply(this, arguments);\n} // zzz\n\n\nfunction _sendAndConfirmTransaction() {\n  _sendAndConfirmTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee94(connection, transaction, signers, options) {\n    var sendOptions, signature, status;\n    return _regeneratorRuntime.wrap(function _callee94$(_context94) {\n      while (1) {\n        switch (_context94.prev = _context94.next) {\n          case 0:\n            sendOptions = options && {\n              skipPreflight: options.skipPreflight,\n              preflightCommitment: options.preflightCommitment || options.commitment,\n              maxRetries: options.maxRetries\n            };\n            _context94.next = 3;\n            return connection.sendTransaction(transaction, signers, sendOptions);\n\n          case 3:\n            signature = _context94.sent;\n\n            if (!(transaction.recentBlockhash != null && transaction.lastValidBlockHeight != null)) {\n              _context94.next = 10;\n              break;\n            }\n\n            _context94.next = 7;\n            return connection.confirmTransaction({\n              signature: signature,\n              blockhash: transaction.recentBlockhash,\n              lastValidBlockHeight: transaction.lastValidBlockHeight\n            }, options && options.commitment);\n\n          case 7:\n            _context94.t0 = _context94.sent.value;\n            _context94.next = 13;\n            break;\n\n          case 10:\n            _context94.next = 12;\n            return connection.confirmTransaction(signature, options && options.commitment);\n\n          case 12:\n            _context94.t0 = _context94.sent.value;\n\n          case 13:\n            status = _context94.t0;\n\n            if (!status.err) {\n              _context94.next = 16;\n              break;\n            }\n\n            throw new Error(\"Transaction \".concat(signature, \" failed (\").concat(JSON.stringify(status), \")\"));\n\n          case 16:\n            return _context94.abrupt(\"return\", signature);\n\n          case 17:\n          case \"end\":\n            return _context94.stop();\n        }\n      }\n    }, _callee94);\n  }));\n  return _sendAndConfirmTransaction.apply(this, arguments);\n}\n\nfunction sleep(ms) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, ms);\n  });\n}\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\n\n\nfunction encodeData(type, fields) {\n  var allocLength = type.layout.span >= 0 ? type.layout.span : getAlloc(type, fields);\n  var data = Buffer.alloc(allocLength);\n  var layoutFields = Object.assign({\n    instruction: type.index\n  }, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\n\n\nfunction decodeData(type, buffer) {\n  var data;\n\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\"invalid instruction; instruction index mismatch \".concat(data.instruction, \" != \").concat(type.index));\n  }\n\n  return data;\n}\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\n\n\nvar FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n/**\n * Calculator for transaction fees.\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\n\nvar NonceAccountLayout = BufferLayout.struct([BufferLayout.u32('version'), BufferLayout.u32('state'), publicKey('authorizedPubkey'), publicKey('nonce'), BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator')]);\nvar NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n/**\n * NonceAccount class\n */\n\nvar NonceAccount = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function NonceAccount(args) {\n    _classCallCheck(this, NonceAccount);\n\n    this.authorizedPubkey = void 0;\n    this.nonce = void 0;\n    this.feeCalculator = void 0;\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n\n\n  _createClass(NonceAccount, null, [{\n    key: \"fromAccountData\",\n    value: function fromAccountData(buffer) {\n      var nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n      return new NonceAccount({\n        authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n        nonce: new PublicKey(nonceAccount.nonce).toString(),\n        feeCalculator: nonceAccount.feeCalculator\n      });\n    }\n  }]);\n\n  return NonceAccount;\n}();\n\nvar encodeDecode = function encodeDecode(layout) {\n  var decode = layout.decode.bind(layout);\n  var encode = layout.encode.bind(layout);\n  return {\n    decode: decode,\n    encode: encode\n  };\n};\n\nvar bigInt = function bigInt(length) {\n  return function (property) {\n    var layout = blob(length, property);\n\n    var _encodeDecode = encodeDecode(layout),\n        encode = _encodeDecode.encode,\n        decode = _encodeDecode.decode;\n\n    var bigIntLayout = layout;\n\n    bigIntLayout.decode = function (buffer, offset) {\n      var src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = function (bigInt, buffer, offset) {\n      var src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n};\n\nvar u64 = bigInt(8);\n/**\n * Create account system transaction params\n */\n\n/**\n * System Instruction class\n */\n\nvar SystemInstruction = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function SystemInstruction() {\n    _classCallCheck(this, SystemInstruction);\n  }\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n\n\n  _createClass(SystemInstruction, null, [{\n    key: \"decodeInstructionType\",\n    value: function decodeInstructionType(instruction) {\n      this.checkProgramId(instruction.programId);\n      var instructionTypeLayout = BufferLayout.u32('instruction');\n      var typeIndex = instructionTypeLayout.decode(instruction.data);\n      var type;\n\n      for (var _i4 = 0, _Object$entries = Object.entries(SYSTEM_INSTRUCTION_LAYOUTS); _i4 < _Object$entries.length; _i4++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i4], 2),\n            ixType = _Object$entries$_i[0],\n            layout = _Object$entries$_i[1];\n\n        if (layout.index == typeIndex) {\n          type = ixType;\n          break;\n        }\n      }\n\n      if (!type) {\n        throw new Error('Instruction type incorrect; not a SystemInstruction');\n      }\n\n      return type;\n    }\n    /**\n     * Decode a create account system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeCreateAccount\",\n    value: function decodeCreateAccount(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n\n      var _decodeData = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Create, instruction.data),\n          lamports = _decodeData.lamports,\n          space = _decodeData.space,\n          programId = _decodeData.programId;\n\n      return {\n        fromPubkey: instruction.keys[0].pubkey,\n        newAccountPubkey: instruction.keys[1].pubkey,\n        lamports: lamports,\n        space: space,\n        programId: new PublicKey(programId)\n      };\n    }\n    /**\n     * Decode a transfer system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeTransfer\",\n    value: function decodeTransfer(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n\n      var _decodeData2 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Transfer, instruction.data),\n          lamports = _decodeData2.lamports;\n\n      return {\n        fromPubkey: instruction.keys[0].pubkey,\n        toPubkey: instruction.keys[1].pubkey,\n        lamports: lamports\n      };\n    }\n    /**\n     * Decode a transfer with seed system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeTransferWithSeed\",\n    value: function decodeTransferWithSeed(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n\n      var _decodeData3 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed, instruction.data),\n          lamports = _decodeData3.lamports,\n          seed = _decodeData3.seed,\n          programId = _decodeData3.programId;\n\n      return {\n        fromPubkey: instruction.keys[0].pubkey,\n        basePubkey: instruction.keys[1].pubkey,\n        toPubkey: instruction.keys[2].pubkey,\n        lamports: lamports,\n        seed: seed,\n        programId: new PublicKey(programId)\n      };\n    }\n    /**\n     * Decode an allocate system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeAllocate\",\n    value: function decodeAllocate(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 1);\n\n      var _decodeData4 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Allocate, instruction.data),\n          space = _decodeData4.space;\n\n      return {\n        accountPubkey: instruction.keys[0].pubkey,\n        space: space\n      };\n    }\n    /**\n     * Decode an allocate with seed system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeAllocateWithSeed\",\n    value: function decodeAllocateWithSeed(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 1);\n\n      var _decodeData5 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed, instruction.data),\n          base = _decodeData5.base,\n          seed = _decodeData5.seed,\n          space = _decodeData5.space,\n          programId = _decodeData5.programId;\n\n      return {\n        accountPubkey: instruction.keys[0].pubkey,\n        basePubkey: new PublicKey(base),\n        seed: seed,\n        space: space,\n        programId: new PublicKey(programId)\n      };\n    }\n    /**\n     * Decode an assign system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeAssign\",\n    value: function decodeAssign(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 1);\n\n      var _decodeData6 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Assign, instruction.data),\n          programId = _decodeData6.programId;\n\n      return {\n        accountPubkey: instruction.keys[0].pubkey,\n        programId: new PublicKey(programId)\n      };\n    }\n    /**\n     * Decode an assign with seed system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeAssignWithSeed\",\n    value: function decodeAssignWithSeed(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 1);\n\n      var _decodeData7 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed, instruction.data),\n          base = _decodeData7.base,\n          seed = _decodeData7.seed,\n          programId = _decodeData7.programId;\n\n      return {\n        accountPubkey: instruction.keys[0].pubkey,\n        basePubkey: new PublicKey(base),\n        seed: seed,\n        programId: new PublicKey(programId)\n      };\n    }\n    /**\n     * Decode a create account with seed system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeCreateWithSeed\",\n    value: function decodeCreateWithSeed(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n\n      var _decodeData8 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed, instruction.data),\n          base = _decodeData8.base,\n          seed = _decodeData8.seed,\n          lamports = _decodeData8.lamports,\n          space = _decodeData8.space,\n          programId = _decodeData8.programId;\n\n      return {\n        fromPubkey: instruction.keys[0].pubkey,\n        newAccountPubkey: instruction.keys[1].pubkey,\n        basePubkey: new PublicKey(base),\n        seed: seed,\n        lamports: lamports,\n        space: space,\n        programId: new PublicKey(programId)\n      };\n    }\n    /**\n     * Decode a nonce initialize system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeNonceInitialize\",\n    value: function decodeNonceInitialize(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n\n      var _decodeData9 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount, instruction.data),\n          authorized = _decodeData9.authorized;\n\n      return {\n        noncePubkey: instruction.keys[0].pubkey,\n        authorizedPubkey: new PublicKey(authorized)\n      };\n    }\n    /**\n     * Decode a nonce advance system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeNonceAdvance\",\n    value: function decodeNonceAdvance(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n      decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount, instruction.data);\n      return {\n        noncePubkey: instruction.keys[0].pubkey,\n        authorizedPubkey: instruction.keys[2].pubkey\n      };\n    }\n    /**\n     * Decode a nonce withdraw system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeNonceWithdraw\",\n    value: function decodeNonceWithdraw(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 5);\n\n      var _decodeData10 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount, instruction.data),\n          lamports = _decodeData10.lamports;\n\n      return {\n        noncePubkey: instruction.keys[0].pubkey,\n        toPubkey: instruction.keys[1].pubkey,\n        authorizedPubkey: instruction.keys[4].pubkey,\n        lamports: lamports\n      };\n    }\n    /**\n     * Decode a nonce authorize system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeNonceAuthorize\",\n    value: function decodeNonceAuthorize(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n\n      var _decodeData11 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount, instruction.data),\n          authorized = _decodeData11.authorized;\n\n      return {\n        noncePubkey: instruction.keys[0].pubkey,\n        authorizedPubkey: instruction.keys[1].pubkey,\n        newAuthorizedPubkey: new PublicKey(authorized)\n      };\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"checkProgramId\",\n    value: function checkProgramId(programId) {\n      if (!programId.equals(SystemProgram.programId)) {\n        throw new Error('invalid instruction; programId is not SystemProgram');\n      }\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"checkKeyLength\",\n    value: function checkKeyLength(keys, expectedLength) {\n      if (keys.length < expectedLength) {\n        throw new Error(\"invalid instruction; found \".concat(keys.length, \" keys, expected at least \").concat(expectedLength));\n      }\n    }\n  }]);\n\n  return SystemInstruction;\n}();\n/**\n * An enumeration of valid SystemInstructionType's\n */\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\n\n\nvar SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('programId')])\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports')])\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('space')])\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), publicKey('programId')])\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports'), rustString('seed'), publicKey('programId')])\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\n/**\n * Factory class for transactions to interact with the System program\n */\n\nvar SystemProgram = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function SystemProgram() {\n    _classCallCheck(this, SystemProgram);\n  }\n  /**\n   * Public key that identifies the System program\n   */\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n\n\n  _createClass(SystemProgram, null, [{\n    key: \"createAccount\",\n    value: function createAccount(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n      var data = encodeData(type, {\n        lamports: params.lamports,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      return new TransactionInstruction({\n        keys: [{\n          pubkey: params.fromPubkey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: params.newAccountPubkey,\n          isSigner: true,\n          isWritable: true\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a transaction instruction that transfers lamports from one account to another\n     */\n\n  }, {\n    key: \"transfer\",\n    value: function transfer(params) {\n      var data;\n      var keys;\n\n      if ('basePubkey' in params) {\n        var _type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n        data = encodeData(_type, {\n          lamports: BigInt(params.lamports),\n          seed: params.seed,\n          programId: toBuffer(params.programId.toBuffer())\n        });\n        keys = [{\n          pubkey: params.fromPubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: params.basePubkey,\n          isSigner: true,\n          isWritable: false\n        }, {\n          pubkey: params.toPubkey,\n          isSigner: false,\n          isWritable: true\n        }];\n      } else {\n        var _type2 = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n        data = encodeData(_type2, {\n          lamports: BigInt(params.lamports)\n        });\n        keys = [{\n          pubkey: params.fromPubkey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: params.toPubkey,\n          isSigner: false,\n          isWritable: true\n        }];\n      }\n\n      return new TransactionInstruction({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a transaction instruction that assigns an account to a program\n     */\n\n  }, {\n    key: \"assign\",\n    value: function assign(params) {\n      var data;\n      var keys;\n\n      if ('basePubkey' in params) {\n        var _type3 = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n        data = encodeData(_type3, {\n          base: toBuffer(params.basePubkey.toBuffer()),\n          seed: params.seed,\n          programId: toBuffer(params.programId.toBuffer())\n        });\n        keys = [{\n          pubkey: params.accountPubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: params.basePubkey,\n          isSigner: true,\n          isWritable: false\n        }];\n      } else {\n        var _type4 = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n        data = encodeData(_type4, {\n          programId: toBuffer(params.programId.toBuffer())\n        });\n        keys = [{\n          pubkey: params.accountPubkey,\n          isSigner: true,\n          isWritable: true\n        }];\n      }\n\n      return new TransactionInstruction({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a transaction instruction that creates a new account at\n     *   an address generated with `from`, a seed, and programId\n     */\n\n  }, {\n    key: \"createAccountWithSeed\",\n    value: function createAccountWithSeed(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n      var data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        lamports: params.lamports,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      var keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.newAccountPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n\n      if (params.basePubkey != params.fromPubkey) {\n        keys.push({\n          pubkey: params.basePubkey,\n          isSigner: true,\n          isWritable: false\n        });\n      }\n\n      return new TransactionInstruction({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a transaction that creates a new Nonce account\n     */\n\n  }, {\n    key: \"createNonceAccount\",\n    value: function createNonceAccount(params) {\n      var transaction = new Transaction();\n\n      if ('basePubkey' in params && 'seed' in params) {\n        transaction.add(SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId\n        }));\n      } else {\n        transaction.add(SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId\n        }));\n      }\n\n      var initParams = {\n        noncePubkey: params.noncePubkey,\n        authorizedPubkey: params.authorizedPubkey\n      };\n      transaction.add(this.nonceInitialize(initParams));\n      return transaction;\n    }\n    /**\n     * Generate an instruction to initialize a Nonce account\n     */\n\n  }, {\n    key: \"nonceInitialize\",\n    value: function nonceInitialize(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n      var data = encodeData(type, {\n        authorized: toBuffer(params.authorizedPubkey.toBuffer())\n      });\n      var instructionData = {\n        keys: [{\n          pubkey: params.noncePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      };\n      return new TransactionInstruction(instructionData);\n    }\n    /**\n     * Generate an instruction to advance the nonce in a Nonce account\n     */\n\n  }, {\n    key: \"nonceAdvance\",\n    value: function nonceAdvance(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n      var data = encodeData(type);\n      var instructionData = {\n        keys: [{\n          pubkey: params.noncePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: params.authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      };\n      return new TransactionInstruction(instructionData);\n    }\n    /**\n     * Generate a transaction instruction that withdraws lamports from a Nonce account\n     */\n\n  }, {\n    key: \"nonceWithdraw\",\n    value: function nonceWithdraw(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n      var data = encodeData(type, {\n        lamports: params.lamports\n      });\n      return new TransactionInstruction({\n        keys: [{\n          pubkey: params.noncePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: params.toPubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: params.authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a transaction instruction that authorizes a new PublicKey as the authority\n     * on a Nonce account.\n     */\n\n  }, {\n    key: \"nonceAuthorize\",\n    value: function nonceAuthorize(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n      var data = encodeData(type, {\n        authorized: toBuffer(params.newAuthorizedPubkey.toBuffer())\n      });\n      return new TransactionInstruction({\n        keys: [{\n          pubkey: params.noncePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: params.authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a transaction instruction that allocates space in an account without funding\n     */\n\n  }, {\n    key: \"allocate\",\n    value: function allocate(params) {\n      var data;\n      var keys;\n\n      if ('basePubkey' in params) {\n        var _type5 = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n        data = encodeData(_type5, {\n          base: toBuffer(params.basePubkey.toBuffer()),\n          seed: params.seed,\n          space: params.space,\n          programId: toBuffer(params.programId.toBuffer())\n        });\n        keys = [{\n          pubkey: params.accountPubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: params.basePubkey,\n          isSigner: true,\n          isWritable: false\n        }];\n      } else {\n        var _type6 = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n        data = encodeData(_type6, {\n          space: params.space\n        });\n        keys = [{\n          pubkey: params.accountPubkey,\n          isSigner: true,\n          isWritable: true\n        }];\n      }\n\n      return new TransactionInstruction({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n  }]);\n\n  return SystemProgram;\n}();\n\nSystemProgram.programId = new PublicKey('11111111111111111111111111111111'); // rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\n\nvar CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n/**\n * Program loader interface\n */\n\nvar Loader = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function Loader() {\n    _classCallCheck(this, Loader);\n  }\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n\n\n  _createClass(Loader, null, [{\n    key: \"getMinNumSignatures\",\n    value: function getMinNumSignatures(dataLength) {\n      return 2 * ( // Every transaction requires two signatures (payer + program)\n      Math.ceil(dataLength / Loader.chunkSize) + 1 + // Add one for Create transaction\n      1) // Add one for Finalize transaction\n      ;\n    }\n    /**\n     * Loads a generic program\n     *\n     * @param connection The connection to use\n     * @param payer System account that pays to load the program\n     * @param program Account to load the program into\n     * @param programId Public key that identifies the loader\n     * @param data Program octets\n     * @return true if program was loaded successfully, false if program was already loaded\n     */\n\n  }, {\n    key: \"load\",\n    value: function () {\n      var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(connection, payer, program, programId, data) {\n        var balanceNeeded, programInfo, transaction, dataLayout, chunkSize, offset, array, transactions, bytes, _data, _transaction, REQUESTS_PER_SECOND, _dataLayout, _data2, _transaction2;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return connection.getMinimumBalanceForRentExemption(data.length);\n\n              case 2:\n                balanceNeeded = _context5.sent;\n                _context5.next = 5;\n                return connection.getAccountInfo(program.publicKey, 'confirmed');\n\n              case 5:\n                programInfo = _context5.sent;\n                transaction = null;\n\n                if (!(programInfo !== null)) {\n                  _context5.next = 16;\n                  break;\n                }\n\n                if (!programInfo.executable) {\n                  _context5.next = 11;\n                  break;\n                }\n\n                console.error('Program load failed, account is already executable');\n                return _context5.abrupt(\"return\", false);\n\n              case 11:\n                if (programInfo.data.length !== data.length) {\n                  transaction = transaction || new Transaction();\n                  transaction.add(SystemProgram.allocate({\n                    accountPubkey: program.publicKey,\n                    space: data.length\n                  }));\n                }\n\n                if (!programInfo.owner.equals(programId)) {\n                  transaction = transaction || new Transaction();\n                  transaction.add(SystemProgram.assign({\n                    accountPubkey: program.publicKey,\n                    programId: programId\n                  }));\n                }\n\n                if (programInfo.lamports < balanceNeeded) {\n                  transaction = transaction || new Transaction();\n                  transaction.add(SystemProgram.transfer({\n                    fromPubkey: payer.publicKey,\n                    toPubkey: program.publicKey,\n                    lamports: balanceNeeded - programInfo.lamports\n                  }));\n                }\n\n                _context5.next = 17;\n                break;\n\n              case 16:\n                transaction = new Transaction().add(SystemProgram.createAccount({\n                  fromPubkey: payer.publicKey,\n                  newAccountPubkey: program.publicKey,\n                  lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n                  space: data.length,\n                  programId: programId\n                }));\n\n              case 17:\n                if (!(transaction !== null)) {\n                  _context5.next = 20;\n                  break;\n                }\n\n                _context5.next = 20;\n                return sendAndConfirmTransaction(connection, transaction, [payer, program], {\n                  commitment: 'confirmed'\n                });\n\n              case 20:\n                dataLayout = BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.u32('offset'), BufferLayout.u32('bytesLength'), BufferLayout.u32('bytesLengthPadding'), BufferLayout.seq(BufferLayout.u8('byte'), BufferLayout.offset(BufferLayout.u32(), -8), 'bytes')]);\n                chunkSize = Loader.chunkSize;\n                offset = 0;\n                array = data;\n                transactions = [];\n\n              case 25:\n                if (!(array.length > 0)) {\n                  _context5.next = 39;\n                  break;\n                }\n\n                bytes = array.slice(0, chunkSize);\n                _data = Buffer.alloc(chunkSize + 16);\n                dataLayout.encode({\n                  instruction: 0,\n                  // Load instruction\n                  offset: offset,\n                  bytes: bytes,\n                  bytesLength: 0,\n                  bytesLengthPadding: 0\n                }, _data);\n                _transaction = new Transaction().add({\n                  keys: [{\n                    pubkey: program.publicKey,\n                    isSigner: true,\n                    isWritable: true\n                  }],\n                  programId: programId,\n                  data: _data\n                });\n                transactions.push(sendAndConfirmTransaction(connection, _transaction, [payer, program], {\n                  commitment: 'confirmed'\n                })); // Delay between sends in an attempt to reduce rate limit errors\n\n                if (!connection._rpcEndpoint.includes('solana.com')) {\n                  _context5.next = 35;\n                  break;\n                }\n\n                REQUESTS_PER_SECOND = 4;\n                _context5.next = 35;\n                return sleep(1000 / REQUESTS_PER_SECOND);\n\n              case 35:\n                offset += chunkSize;\n                array = array.slice(chunkSize);\n                _context5.next = 25;\n                break;\n\n              case 39:\n                _context5.next = 41;\n                return Promise.all(transactions);\n\n              case 41:\n                _dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n                _data2 = Buffer.alloc(_dataLayout.span);\n\n                _dataLayout.encode({\n                  instruction: 1 // Finalize instruction\n\n                }, _data2);\n\n                _transaction2 = new Transaction().add({\n                  keys: [{\n                    pubkey: program.publicKey,\n                    isSigner: true,\n                    isWritable: true\n                  }, {\n                    pubkey: SYSVAR_RENT_PUBKEY,\n                    isSigner: false,\n                    isWritable: false\n                  }],\n                  programId: programId,\n                  data: _data2\n                });\n                _context5.next = 47;\n                return sendAndConfirmTransaction(connection, _transaction2, [payer, program], {\n                  commitment: 'confirmed'\n                });\n\n              case 47:\n                return _context5.abrupt(\"return\", true);\n\n              case 48:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function load(_x13, _x14, _x15, _x16, _x17) {\n        return _load.apply(this, arguments);\n      }\n\n      return load;\n    }()\n  }]);\n\n  return Loader;\n}();\n\nLoader.chunkSize = CHUNK_SIZE;\nvar BPF_LOADER_PROGRAM_ID = new PublicKey('BPFLoader2111111111111111111111111111111111');\n/**\n * Factory class for transactions to interact with a program loader\n */\n\nvar BpfLoader = /*#__PURE__*/function () {\n  function BpfLoader() {\n    _classCallCheck(this, BpfLoader);\n  }\n\n  _createClass(BpfLoader, null, [{\n    key: \"getMinNumSignatures\",\n    value:\n    /**\n     * Minimum number of signatures required to load a program not including\n     * retries\n     *\n     * Can be used to calculate transaction fees\n     */\n    function getMinNumSignatures(dataLength) {\n      return Loader.getMinNumSignatures(dataLength);\n    }\n    /**\n     * Load a BPF program\n     *\n     * @param connection The connection to use\n     * @param payer Account that will pay program loading fees\n     * @param program Account to load the program into\n     * @param elf The entire ELF containing the BPF program\n     * @param loaderProgramId The program id of the BPF loader to use\n     * @return true if program was loaded successfully, false if program was already loaded\n     */\n\n  }, {\n    key: \"load\",\n    value: function load(connection, payer, program, elf, loaderProgramId) {\n      return Loader.load(connection, payer, program, loaderProgramId, elf);\n    }\n  }]);\n\n  return BpfLoader;\n}();\n/**\n * Compute Budget Instruction class\n */\n\n\nvar ComputeBudgetInstruction = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function ComputeBudgetInstruction() {\n    _classCallCheck(this, ComputeBudgetInstruction);\n  }\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n\n\n  _createClass(ComputeBudgetInstruction, null, [{\n    key: \"decodeInstructionType\",\n    value: function decodeInstructionType(instruction) {\n      this.checkProgramId(instruction.programId);\n      var instructionTypeLayout = BufferLayout.u8('instruction');\n      var typeIndex = instructionTypeLayout.decode(instruction.data);\n      var type;\n\n      for (var _i5 = 0, _Object$entries2 = Object.entries(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS); _i5 < _Object$entries2.length; _i5++) {\n        var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i5], 2),\n            ixType = _Object$entries2$_i[0],\n            layout = _Object$entries2$_i[1];\n\n        if (layout.index == typeIndex) {\n          type = ixType;\n          break;\n        }\n      }\n\n      if (!type) {\n        throw new Error('Instruction type incorrect; not a ComputeBudgetInstruction');\n      }\n\n      return type;\n    }\n    /**\n     * Decode request units compute budget instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeRequestUnits\",\n    value: function decodeRequestUnits(instruction) {\n      this.checkProgramId(instruction.programId);\n\n      var _decodeData12 = decodeData(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits, instruction.data),\n          units = _decodeData12.units,\n          additionalFee = _decodeData12.additionalFee;\n\n      return {\n        units: units,\n        additionalFee: additionalFee\n      };\n    }\n    /**\n     * Decode request heap frame compute budget instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeRequestHeapFrame\",\n    value: function decodeRequestHeapFrame(instruction) {\n      this.checkProgramId(instruction.programId);\n\n      var _decodeData13 = decodeData(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame, instruction.data),\n          bytes = _decodeData13.bytes;\n\n      return {\n        bytes: bytes\n      };\n    }\n    /**\n     * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeSetComputeUnitLimit\",\n    value: function decodeSetComputeUnitLimit(instruction) {\n      this.checkProgramId(instruction.programId);\n\n      var _decodeData14 = decodeData(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit, instruction.data),\n          units = _decodeData14.units;\n\n      return {\n        units: units\n      };\n    }\n    /**\n     * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeSetComputeUnitPrice\",\n    value: function decodeSetComputeUnitPrice(instruction) {\n      this.checkProgramId(instruction.programId);\n\n      var _decodeData15 = decodeData(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice, instruction.data),\n          microLamports = _decodeData15.microLamports;\n\n      return {\n        microLamports: microLamports\n      };\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"checkProgramId\",\n    value: function checkProgramId(programId) {\n      if (!programId.equals(ComputeBudgetProgram.programId)) {\n        throw new Error('invalid instruction; programId is not ComputeBudgetProgram');\n      }\n    }\n  }]);\n\n  return ComputeBudgetInstruction;\n}();\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\n\n\nvar COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units'), BufferLayout.u32('additionalFee')])\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')])\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units')])\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), u64('microLamports')])\n  }\n});\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\n\nvar ComputeBudgetProgram = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function ComputeBudgetProgram() {\n    _classCallCheck(this, ComputeBudgetProgram);\n  }\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n\n\n  _createClass(ComputeBudgetProgram, null, [{\n    key: \"requestUnits\",\n    value: function requestUnits(params) {\n      var type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n      var data = encodeData(type, params);\n      return new TransactionInstruction({\n        keys: [],\n        programId: this.programId,\n        data: data\n      });\n    }\n  }, {\n    key: \"requestHeapFrame\",\n    value: function requestHeapFrame(params) {\n      var type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n      var data = encodeData(type, params);\n      return new TransactionInstruction({\n        keys: [],\n        programId: this.programId,\n        data: data\n      });\n    }\n  }, {\n    key: \"setComputeUnitLimit\",\n    value: function setComputeUnitLimit(params) {\n      var type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n      var data = encodeData(type, params);\n      return new TransactionInstruction({\n        keys: [],\n        programId: this.programId,\n        data: data\n      });\n    }\n  }, {\n    key: \"setComputeUnitPrice\",\n    value: function setComputeUnitPrice(params) {\n      var type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n      var data = encodeData(type, {\n        microLamports: BigInt(params.microLamports)\n      });\n      return new TransactionInstruction({\n        keys: [],\n        programId: this.programId,\n        data: data\n      });\n    }\n  }]);\n\n  return ComputeBudgetProgram;\n}();\n\nComputeBudgetProgram.programId = new PublicKey('ComputeBudget111111111111111111111111111111');\nvar objToString = Object.prototype.toString;\n\nvar objKeys = Object.keys || function (obj) {\n  var keys = [];\n\n  for (var name in obj) {\n    keys.push(name);\n  }\n\n  return keys;\n};\n\nfunction stringify(val, isArrayProp) {\n  var i, max, str, keys, key, propVal, toStr;\n\n  if (val === true) {\n    return \"true\";\n  }\n\n  if (val === false) {\n    return \"false\";\n  }\n\n  switch (typeof val) {\n    case \"object\":\n      if (val === null) {\n        return null;\n      } else if (val.toJSON && typeof val.toJSON === \"function\") {\n        return stringify(val.toJSON(), isArrayProp);\n      } else {\n        toStr = objToString.call(val);\n\n        if (toStr === \"[object Array]\") {\n          str = '[';\n          max = val.length - 1;\n\n          for (i = 0; i < max; i++) {\n            str += stringify(val[i], true) + ',';\n          }\n\n          if (max > -1) {\n            str += stringify(val[i], true);\n          }\n\n          return str + ']';\n        } else if (toStr === \"[object Object]\") {\n          // only object is left\n          keys = objKeys(val).sort();\n          max = keys.length;\n          str = \"\";\n          i = 0;\n\n          while (i < max) {\n            key = keys[i];\n            propVal = stringify(val[key], false);\n\n            if (propVal !== undefined) {\n              if (str) {\n                str += ',';\n              }\n\n              str += JSON.stringify(key) + ':' + propVal;\n            }\n\n            i++;\n          }\n\n          return '{' + str + '}';\n        } else {\n          return JSON.stringify(val);\n        }\n      }\n\n    case \"function\":\n    case \"undefined\":\n      return isArrayProp ? null : undefined;\n\n    case \"string\":\n      return JSON.stringify(val);\n\n    default:\n      return isFinite(val) ? val : null;\n  }\n}\n\nvar fastStableStringify = function fastStableStringify(val) {\n  var returnVal = stringify(val, false);\n\n  if (returnVal !== undefined) {\n    return '' + returnVal;\n  }\n};\n\nvar fastStableStringify$1 = fastStableStringify;\nvar MINIMUM_SLOT_PER_EPOCH = 32; // Returns the number of trailing zeros in the binary representation of self.\n\nfunction trailingZeros(n) {\n  var trailingZeros = 0;\n\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n\n  return trailingZeros;\n} // Returns the smallest power of two greater than or equal to n\n\n\nfunction nextPowerOfTwo(n) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\n\n\nvar EpochSchedule = /*#__PURE__*/function () {\n  /** The maximum number of slots in each epoch */\n\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n\n  /** Indicates whether epochs start short and grow */\n\n  /** The first epoch with `slotsPerEpoch` slots */\n\n  /** The first slot of `firstNormalEpoch` */\n  function EpochSchedule(slotsPerEpoch, leaderScheduleSlotOffset, warmup, firstNormalEpoch, firstNormalSlot) {\n    _classCallCheck(this, EpochSchedule);\n\n    this.slotsPerEpoch = void 0;\n    this.leaderScheduleSlotOffset = void 0;\n    this.warmup = void 0;\n    this.firstNormalEpoch = void 0;\n    this.firstNormalSlot = void 0;\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  _createClass(EpochSchedule, [{\n    key: \"getEpoch\",\n    value: function getEpoch(slot) {\n      return this.getEpochAndSlotIndex(slot)[0];\n    }\n  }, {\n    key: \"getEpochAndSlotIndex\",\n    value: function getEpochAndSlotIndex(slot) {\n      if (slot < this.firstNormalSlot) {\n        var epoch = trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) - trailingZeros(MINIMUM_SLOT_PER_EPOCH) - 1;\n        var epochLen = this.getSlotsInEpoch(epoch);\n        var slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n        return [epoch, slotIndex];\n      } else {\n        var normalSlotIndex = slot - this.firstNormalSlot;\n        var normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n\n        var _epoch = this.firstNormalEpoch + normalEpochIndex;\n\n        var _slotIndex = normalSlotIndex % this.slotsPerEpoch;\n\n        return [_epoch, _slotIndex];\n      }\n    }\n  }, {\n    key: \"getFirstSlotInEpoch\",\n    value: function getFirstSlotInEpoch(epoch) {\n      if (epoch <= this.firstNormalEpoch) {\n        return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n      } else {\n        return (epoch - this.firstNormalEpoch) * this.slotsPerEpoch + this.firstNormalSlot;\n      }\n    }\n  }, {\n    key: \"getLastSlotInEpoch\",\n    value: function getLastSlotInEpoch(epoch) {\n      return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n    }\n  }, {\n    key: \"getSlotsInEpoch\",\n    value: function getSlotsInEpoch(epoch) {\n      if (epoch < this.firstNormalEpoch) {\n        return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n      } else {\n        return this.slotsPerEpoch;\n      }\n    }\n  }]);\n\n  return EpochSchedule;\n}();\n\nvar SendTransactionError = /*#__PURE__*/function (_Error) {\n  _inherits(SendTransactionError, _Error);\n\n  var _super3 = _createSuper(SendTransactionError);\n\n  function SendTransactionError(message, logs) {\n    var _this7;\n\n    _classCallCheck(this, SendTransactionError);\n\n    _this7 = _super3.call(this, message);\n    _this7.logs = void 0;\n    _this7.logs = logs;\n    return _this7;\n  }\n\n  return _createClass(SendTransactionError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar fetchImpl = globalThis.fetch; // TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\n\nvar NUM_TICKS_PER_SECOND = 160;\n/**\n * @internal\n */\n\nvar DEFAULT_TICKS_PER_SLOT = 64;\n/**\n * @internal\n */\n\nvar NUM_SLOTS_PER_SECOND = NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n/**\n * @internal\n */\n\nvar MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n\nvar TransactionExpiredBlockheightExceededError = /*#__PURE__*/function (_Error2) {\n  _inherits(TransactionExpiredBlockheightExceededError, _Error2);\n\n  var _super4 = _createSuper(TransactionExpiredBlockheightExceededError);\n\n  function TransactionExpiredBlockheightExceededError(signature) {\n    var _this8;\n\n    _classCallCheck(this, TransactionExpiredBlockheightExceededError);\n\n    _this8 = _super4.call(this, \"Signature \".concat(signature, \" has expired: block height exceeded.\"));\n    _this8.signature = void 0;\n    _this8.signature = signature;\n    return _this8;\n  }\n\n  return _createClass(TransactionExpiredBlockheightExceededError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nObject.defineProperty(TransactionExpiredBlockheightExceededError.prototype, 'name', {\n  value: 'TransactionExpiredBlockheightExceededError'\n});\n\nvar TransactionExpiredTimeoutError = /*#__PURE__*/function (_Error3) {\n  _inherits(TransactionExpiredTimeoutError, _Error3);\n\n  var _super5 = _createSuper(TransactionExpiredTimeoutError);\n\n  function TransactionExpiredTimeoutError(signature, timeoutSeconds) {\n    var _this9;\n\n    _classCallCheck(this, TransactionExpiredTimeoutError);\n\n    _this9 = _super5.call(this, \"Transaction was not confirmed in \".concat(timeoutSeconds.toFixed(2), \" seconds. It is \") + 'unknown if it succeeded or failed. Check signature ' + \"\".concat(signature, \" using the Solana Explorer or CLI tools.\"));\n    _this9.signature = void 0;\n    _this9.signature = signature;\n    return _this9;\n  }\n\n  return _createClass(TransactionExpiredTimeoutError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError'\n});\n\nfunction makeWebsocketUrl(endpoint) {\n  var url = new URL(endpoint);\n  var useHttps = url.protocol === 'https:';\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = ''; // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n\n  if (url.port !== '') {\n    url.port = String(Number(url.port) + 1);\n  }\n\n  return url.toString();\n}\n\nvar PublicKeyFromString = coerce(instance(PublicKey), string(), function (value) {\n  return new PublicKey(value);\n});\nvar RawAccountDataResult = tuple([string(), literal('base64')]);\nvar BufferFromRawAccountData = coerce(instance(Buffer), RawAccountDataResult, function (value) {\n  return Buffer.from(value[0], 'base64');\n});\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\n\nvar BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\n\n/**\n * @internal\n */\n\nfunction createRpcResult(result) {\n  return union([type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    result: result\n  }), type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    error: type({\n      code: unknown(),\n      message: string(),\n      data: optional(any())\n    })\n  })]);\n}\n\nvar UnknownRpcResult = createRpcResult(unknown());\n/**\n * @internal\n */\n\nfunction jsonRpcResult(schema) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, function (value) {\n    if ('error' in value) {\n      return value;\n    } else {\n      return _objectSpread(_objectSpread({}, value), {}, {\n        result: create(value.result, schema)\n      });\n    }\n  });\n}\n/**\n * @internal\n */\n\n\nfunction jsonRpcResultAndContext(value) {\n  return jsonRpcResult(type({\n    context: type({\n      slot: number()\n    }),\n    value: value\n  }));\n}\n/**\n * @internal\n */\n\n\nfunction notificationResultAndContext(value) {\n  return type({\n    context: type({\n      slot: number()\n    }),\n    value: value\n  });\n}\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\n\nvar GetInflationGovernorResult = type({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number()\n});\n/**\n * The inflation reward for an epoch\n */\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\n\nvar GetInflationRewardResult = jsonRpcResult(array(nullable(type({\n  epoch: number(),\n  effectiveSlot: number(),\n  amount: number(),\n  postBalance: number()\n}))));\n/**\n * Information about the current epoch\n */\n\nvar GetEpochInfoResult = type({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number())\n});\nvar GetEpochScheduleResult = type({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number()\n});\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\n\nvar GetLeaderScheduleResult = record(string(), array(number()));\n/**\n * Transaction error or null\n */\n\nvar TransactionErrorResult = nullable(union([type({}), string()]));\n/**\n * Signature status for a transaction\n */\n\nvar SignatureStatusResult = type({\n  err: TransactionErrorResult\n});\n/**\n * Transaction signature received notification\n */\n\nvar SignatureReceivedResult = literal('receivedSignature');\n/**\n * Version info for a node\n */\n\nvar VersionResult = type({\n  'solana-core': string(),\n  'feature-set': optional(number())\n});\nvar SimulatedTransactionResponseStruct = jsonRpcResultAndContext(type({\n  err: nullable(union([type({}), string()])),\n  logs: nullable(array(string())),\n  accounts: optional(nullable(array(nullable(type({\n    executable: boolean(),\n    owner: string(),\n    lamports: number(),\n    data: array(string()),\n    rentEpoch: optional(number())\n  }))))),\n  unitsConsumed: optional(number())\n}));\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\n\nvar BlockProductionResponseStruct = jsonRpcResultAndContext(type({\n  byIdentity: record(string(), array(number())),\n  range: type({\n    firstSlot: number(),\n    lastSlot: number()\n  })\n}));\n/**\n * A performance sample\n */\n\nfunction createRpcClient(url, useHttps, httpHeaders, customFetch, fetchMiddleware, disableRetryOnRateLimit) {\n  var fetch = customFetch ? customFetch : fetchImpl;\n  var fetchWithMiddleware;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(info, init) {\n        var modifiedFetchArgs;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return new Promise(function (resolve, reject) {\n                  try {\n                    fetchMiddleware(info, init, function (modifiedInfo, modifiedInit) {\n                      return resolve([modifiedInfo, modifiedInit]);\n                    });\n                  } catch (error) {\n                    reject(error);\n                  }\n                });\n\n              case 2:\n                modifiedFetchArgs = _context6.sent;\n                _context6.next = 5;\n                return fetch.apply(void 0, _toConsumableArray(modifiedFetchArgs));\n\n              case 5:\n                return _context6.abrupt(\"return\", _context6.sent);\n\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      return function fetchWithMiddleware(_x18, _x19) {\n        return _ref5.apply(this, arguments);\n      };\n    }();\n  }\n\n  var clientBrowser = new RpcClient( /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(request, callback) {\n      var agent, options, too_many_requests_retries, res, waitTime, text;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              agent = undefined;\n              options = {\n                method: 'POST',\n                body: request,\n                agent: agent,\n                headers: Object.assign({\n                  'Content-Type': 'application/json'\n                }, httpHeaders || {})\n              };\n              _context7.prev = 2;\n              too_many_requests_retries = 5;\n              waitTime = 500;\n\n            case 5:\n              if (!fetchWithMiddleware) {\n                _context7.next = 11;\n                break;\n              }\n\n              _context7.next = 8;\n              return fetchWithMiddleware(url, options);\n\n            case 8:\n              res = _context7.sent;\n              _context7.next = 14;\n              break;\n\n            case 11:\n              _context7.next = 13;\n              return fetch(url, options);\n\n            case 13:\n              res = _context7.sent;\n\n            case 14:\n              if (!(res.status !== 429\n              /* Too many requests */\n              )) {\n                _context7.next = 16;\n                break;\n              }\n\n              return _context7.abrupt(\"break\", 27);\n\n            case 16:\n              if (!(disableRetryOnRateLimit === true)) {\n                _context7.next = 18;\n                break;\n              }\n\n              return _context7.abrupt(\"break\", 27);\n\n            case 18:\n              too_many_requests_retries -= 1;\n\n              if (!(too_many_requests_retries === 0)) {\n                _context7.next = 21;\n                break;\n              }\n\n              return _context7.abrupt(\"break\", 27);\n\n            case 21:\n              console.log(\"Server responded with \".concat(res.status, \" \").concat(res.statusText, \".  Retrying after \").concat(waitTime, \"ms delay...\"));\n              _context7.next = 24;\n              return sleep(waitTime);\n\n            case 24:\n              waitTime *= 2;\n\n            case 25:\n              _context7.next = 5;\n              break;\n\n            case 27:\n              _context7.next = 29;\n              return res.text();\n\n            case 29:\n              text = _context7.sent;\n\n              if (res.ok) {\n                callback(null, text);\n              } else {\n                callback(new Error(\"\".concat(res.status, \" \").concat(res.statusText, \": \").concat(text)));\n              }\n\n              _context7.next = 36;\n              break;\n\n            case 33:\n              _context7.prev = 33;\n              _context7.t0 = _context7[\"catch\"](2);\n              if (_context7.t0 instanceof Error) callback(_context7.t0);\n\n            case 36:\n              _context7.prev = 36;\n              return _context7.finish(36);\n\n            case 38:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, null, [[2, 33, 36, 38]]);\n    }));\n\n    return function (_x20, _x21) {\n      return _ref6.apply(this, arguments);\n    };\n  }(), {});\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client) {\n  return function (method, args) {\n    return new Promise(function (resolve, reject) {\n      client.request(method, args, function (err, response) {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client) {\n  return function (requests) {\n    return new Promise(function (resolve, reject) {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n      var batch = requests.map(function (params) {\n        return client.request(params.methodName, params.args);\n      });\n      client.request(batch, function (err, response) {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(response);\n      });\n    });\n  };\n}\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\n\n\nvar GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\n\nvar GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\n\nvar GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\n\nvar GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\n\nvar SlotRpcResult = jsonRpcResult(number());\n/**\n * Supply\n */\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\n\nvar GetSupplyRpcResult = jsonRpcResultAndContext(type({\n  total: number(),\n  circulating: number(),\n  nonCirculating: number(),\n  nonCirculatingAccounts: array(PublicKeyFromString)\n}));\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\n\n/**\n * Expected JSON RPC structure for token amounts\n */\n\nvar TokenAmountResult = type({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n});\n/**\n * Token address and balance.\n */\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\n\nvar GetTokenLargestAccountsResult = jsonRpcResultAndContext(array(type({\n  address: PublicKeyFromString,\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n})));\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\n\nvar GetTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: BufferFromRawAccountData,\n    rentEpoch: number()\n  })\n})));\nvar ParsedAccountDataResult = type({\n  program: string(),\n  parsed: unknown(),\n  space: number()\n});\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\n\nvar GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: ParsedAccountDataResult,\n    rentEpoch: number()\n  })\n})));\n/**\n * Pair of an account address and its balance\n */\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\n\nvar GetLargestAccountsRpcResult = jsonRpcResultAndContext(array(type({\n  lamports: number(),\n  address: PublicKeyFromString\n})));\n/**\n * @internal\n */\n\nvar AccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number()\n});\n/**\n * @internal\n */\n\nvar KeyedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\nvar ParsedOrRawAccountData = coerce(union([instance(Buffer), ParsedAccountDataResult]), union([RawAccountDataResult, ParsedAccountDataResult]), function (value) {\n  if (Array.isArray(value)) {\n    return create(value, BufferFromRawAccountData);\n  } else {\n    return value;\n  }\n});\n/**\n * @internal\n */\n\nvar ParsedAccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number()\n});\nvar KeyedParsedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult\n});\n/**\n * @internal\n */\n\nvar StakeActivationResult = type({\n  state: union([literal('active'), literal('inactive'), literal('activating'), literal('deactivating')]),\n  active: number(),\n  inactive: number()\n});\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nvar GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\n\nvar GetSignaturesForAddressRpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\n\nvar AccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult)\n});\n/**\n * @internal\n */\n\nvar ProgramAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\n\nvar ProgramAccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult)\n});\n/**\n * @internal\n */\n\nvar SlotInfoResult = type({\n  parent: number(),\n  slot: number(),\n  root: number()\n});\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\n\nvar SlotNotificationResult = type({\n  subscription: number(),\n  result: SlotInfoResult\n});\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\n\n/**\n * @internal\n */\n\nvar SlotUpdateResult = union([type({\n  type: union([literal('firstShredReceived'), literal('completed'), literal('optimisticConfirmation'), literal('root')]),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('createdBank'),\n  parent: number(),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('frozen'),\n  slot: number(),\n  timestamp: number(),\n  stats: type({\n    numTransactionEntries: number(),\n    numSuccessfulTransactions: number(),\n    numFailedTransactions: number(),\n    maxTransactionsPerEntry: number()\n  })\n}), type({\n  type: literal('dead'),\n  slot: number(),\n  timestamp: number(),\n  err: string()\n})]);\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\n\nvar SlotUpdateNotificationResult = type({\n  subscription: number(),\n  result: SlotUpdateResult\n});\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\n\nvar SignatureNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(union([SignatureStatusResult, SignatureReceivedResult]))\n});\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\n\nvar RootNotificationResult = type({\n  subscription: number(),\n  result: number()\n});\nvar ContactInfoResult = type({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string())\n});\nvar VoteAccountInfoResult = type({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number())\n});\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\n\nvar GetVoteAccounts = jsonRpcResult(type({\n  current: array(VoteAccountInfoResult),\n  delinquent: array(VoteAccountInfoResult)\n}));\nvar ConfirmationStatus = union([literal('processed'), literal('confirmed'), literal('finalized')]);\nvar SignatureStatusResponse = type({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus)\n});\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\n\nvar GetSignatureStatusesRpcResult = jsonRpcResultAndContext(array(nullable(SignatureStatusResponse)));\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\n\nvar GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\nvar ConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(string()),\n    header: type({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number()\n    }),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    })),\n    recentBlockhash: string()\n  })\n});\nvar ParsedInstructionResult = type({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString\n});\nvar RawInstructionResult = type({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString\n});\nvar InstructionResult = union([RawInstructionResult, ParsedInstructionResult]);\nvar UnknownInstructionResult = union([type({\n  parsed: unknown(),\n  program: string(),\n  programId: string()\n}), type({\n  accounts: array(string()),\n  data: string(),\n  programId: string()\n})]);\nvar ParsedOrRawInstruction = coerce(InstructionResult, UnknownInstructionResult, function (value) {\n  if ('accounts' in value) {\n    return create(value, RawInstructionResult);\n  } else {\n    return create(value, ParsedInstructionResult);\n  }\n});\n/**\n * @internal\n */\n\nvar ParsedConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(type({\n      pubkey: PublicKeyFromString,\n      signer: boolean(),\n      writable: boolean()\n    })),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string()\n  })\n});\nvar TokenBalanceResult = type({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult\n});\n/**\n * @internal\n */\n\nvar ConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    }))\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult)))\n});\n/**\n * @internal\n */\n\nvar ParsedConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(ParsedOrRawInstruction)\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult)))\n});\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\n\nvar GetBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(type({\n    pubkey: string(),\n    lamports: number(),\n    postBalance: nullable(number()),\n    rewardType: nullable(string())\n  }))),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\n\nvar GetConfirmedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(type({\n    pubkey: string(),\n    lamports: number(),\n    postBalance: nullable(number()),\n    rewardType: nullable(string())\n  }))),\n  blockTime: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\n\nvar GetBlockSignaturesRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  signatures: array(string()),\n  blockTime: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\n\nvar GetTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  meta: ConfirmedTransactionMetaResult,\n  blockTime: optional(nullable(number())),\n  transaction: ConfirmedTransactionResult\n})));\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\n\nvar GetParsedTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  transaction: ParsedConfirmedTransactionResult,\n  meta: nullable(ParsedConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number()))\n})));\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\n\nvar GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n}));\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\n\nvar GetLatestBlockhashRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  lastValidBlockHeight: number()\n}));\nvar PerfSampleResult = type({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number()\n});\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\n\nvar GetRecentPerformanceSamplesRpcResult = jsonRpcResult(array(PerfSampleResult));\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\n\nvar GetFeeCalculatorRpcResult = jsonRpcResultAndContext(nullable(type({\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n})));\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\n\nvar RequestAirdropRpcResult = jsonRpcResult(string());\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\n\nvar SendTransactionRpcResult = jsonRpcResult(string());\n/**\n * Information about the latest slot being processed by a node\n */\n\n/**\n * @internal\n */\n\nvar LogsResult = type({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string()\n});\n/**\n * Logs result.\n */\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\n\nvar LogsNotificationResult = type({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number()\n});\n/**\n * Filter for log subscriptions.\n */\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\n\nvar Connection = /*#__PURE__*/function () {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n\n  /** @internal */\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  function Connection(endpoint, commitmentOrConfig) {\n    _classCallCheck(this, Connection);\n\n    this._commitment = void 0;\n    this._confirmTransactionInitialTimeout = void 0;\n    this._rpcEndpoint = void 0;\n    this._rpcWsEndpoint = void 0;\n    this._rpcClient = void 0;\n    this._rpcRequest = void 0;\n    this._rpcBatchRequest = void 0;\n    this._rpcWebSocket = void 0;\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketHeartbeat = null;\n    this._rpcWebSocketIdleTimeout = null;\n    this._rpcWebSocketGeneration = 0;\n    this._disableBlockhashCaching = false;\n    this._pollingBlockhash = false;\n    this._blockhashInfo = {\n      latestBlockhash: null,\n      lastFetch: 0,\n      transactionSignatures: [],\n      simulatedSignatures: []\n    };\n    this._nextClientSubscriptionId = 0;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId = {};\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    this._subscriptionsByHash = {};\n    this._subscriptionsAutoDisposedByRpc = new Set();\n    var url = new URL(endpoint);\n    var useHttps = url.protocol === 'https:';\n    var wsEndpoint;\n    var httpHeaders;\n    var fetch;\n    var fetchMiddleware;\n    var disableRetryOnRateLimit;\n\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout = commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n    this._rpcClient = createRpcClient(url.toString(), useHttps, httpHeaders, fetch, fetchMiddleware, disableRetryOnRateLimit);\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n    this._rpcWebSocket = new Client(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity\n    });\n\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n\n    this._rpcWebSocket.on('accountNotification', this._wsOnAccountNotification.bind(this));\n\n    this._rpcWebSocket.on('programNotification', this._wsOnProgramAccountNotification.bind(this));\n\n    this._rpcWebSocket.on('slotNotification', this._wsOnSlotNotification.bind(this));\n\n    this._rpcWebSocket.on('slotsUpdatesNotification', this._wsOnSlotUpdatesNotification.bind(this));\n\n    this._rpcWebSocket.on('signatureNotification', this._wsOnSignatureNotification.bind(this));\n\n    this._rpcWebSocket.on('rootNotification', this._wsOnRootNotification.bind(this));\n\n    this._rpcWebSocket.on('logsNotification', this._wsOnLogsNotification.bind(this));\n  }\n  /**\n   * The default commitment used for requests\n   */\n\n\n  _createClass(Connection, [{\n    key: \"commitment\",\n    get: function get() {\n      return this._commitment;\n    }\n    /**\n     * The RPC endpoint\n     */\n\n  }, {\n    key: \"rpcEndpoint\",\n    get: function get() {\n      return this._rpcEndpoint;\n    }\n    /**\n     * Fetch the balance for the specified public key, return with context\n     */\n\n  }, {\n    key: \"getBalanceAndContext\",\n    value: function () {\n      var _getBalanceAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(publicKey, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                args = this._buildArgs([publicKey.toBase58()], commitment);\n                _context8.next = 3;\n                return this._rpcRequest('getBalance', args);\n\n              case 3:\n                unsafeRes = _context8.sent;\n                res = create(unsafeRes, jsonRpcResultAndContext(number()));\n\n                if (!('error' in res)) {\n                  _context8.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get balance for ' + publicKey.toBase58() + ': ' + res.error.message);\n\n              case 7:\n                return _context8.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function getBalanceAndContext(_x22, _x23) {\n        return _getBalanceAndContext.apply(this, arguments);\n      }\n\n      return getBalanceAndContext;\n    }()\n    /**\n     * Fetch the balance for the specified public key\n     */\n\n  }, {\n    key: \"getBalance\",\n    value: function () {\n      var _getBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(publicKey, commitment) {\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this.getBalanceAndContext(publicKey, commitment).then(function (x) {\n                  return x.value;\n                }).catch(function (e) {\n                  throw new Error('failed to get balance of account ' + publicKey.toBase58() + ': ' + e);\n                });\n\n              case 2:\n                return _context9.abrupt(\"return\", _context9.sent);\n\n              case 3:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function getBalance(_x24, _x25) {\n        return _getBalance.apply(this, arguments);\n      }\n\n      return getBalance;\n    }()\n    /**\n     * Fetch the estimated production time of a block\n     */\n\n  }, {\n    key: \"getBlockTime\",\n    value: function () {\n      var _getBlockTime = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(slot) {\n        var unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return this._rpcRequest('getBlockTime', [slot]);\n\n              case 2:\n                unsafeRes = _context10.sent;\n                res = create(unsafeRes, jsonRpcResult(nullable(number())));\n\n                if (!('error' in res)) {\n                  _context10.next = 6;\n                  break;\n                }\n\n                throw new Error('failed to get block time for slot ' + slot + ': ' + res.error.message);\n\n              case 6:\n                return _context10.abrupt(\"return\", res.result);\n\n              case 7:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function getBlockTime(_x26) {\n        return _getBlockTime.apply(this, arguments);\n      }\n\n      return getBlockTime;\n    }()\n    /**\n     * Fetch the lowest slot that the node has information about in its ledger.\n     * This value may increase over time if the node is configured to purge older ledger data\n     */\n\n  }, {\n    key: \"getMinimumLedgerSlot\",\n    value: function () {\n      var _getMinimumLedgerSlot = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n        var unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return this._rpcRequest('minimumLedgerSlot', []);\n\n              case 2:\n                unsafeRes = _context11.sent;\n                res = create(unsafeRes, jsonRpcResult(number()));\n\n                if (!('error' in res)) {\n                  _context11.next = 6;\n                  break;\n                }\n\n                throw new Error('failed to get minimum ledger slot: ' + res.error.message);\n\n              case 6:\n                return _context11.abrupt(\"return\", res.result);\n\n              case 7:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function getMinimumLedgerSlot() {\n        return _getMinimumLedgerSlot.apply(this, arguments);\n      }\n\n      return getMinimumLedgerSlot;\n    }()\n    /**\n     * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n     */\n\n  }, {\n    key: \"getFirstAvailableBlock\",\n    value: function () {\n      var _getFirstAvailableBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {\n        var unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                _context12.next = 2;\n                return this._rpcRequest('getFirstAvailableBlock', []);\n\n              case 2:\n                unsafeRes = _context12.sent;\n                res = create(unsafeRes, SlotRpcResult);\n\n                if (!('error' in res)) {\n                  _context12.next = 6;\n                  break;\n                }\n\n                throw new Error('failed to get first available block: ' + res.error.message);\n\n              case 6:\n                return _context12.abrupt(\"return\", res.result);\n\n              case 7:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function getFirstAvailableBlock() {\n        return _getFirstAvailableBlock.apply(this, arguments);\n      }\n\n      return getFirstAvailableBlock;\n    }()\n    /**\n     * Fetch information about the current supply\n     */\n\n  }, {\n    key: \"getSupply\",\n    value: function () {\n      var _getSupply = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(config) {\n        var configArg, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                configArg = {};\n\n                if (typeof config === 'string') {\n                  configArg = {\n                    commitment: config\n                  };\n                } else if (config) {\n                  configArg = _objectSpread(_objectSpread({}, config), {}, {\n                    commitment: config && config.commitment || this.commitment\n                  });\n                } else {\n                  configArg = {\n                    commitment: this.commitment\n                  };\n                }\n\n                _context13.next = 4;\n                return this._rpcRequest('getSupply', [configArg]);\n\n              case 4:\n                unsafeRes = _context13.sent;\n                res = create(unsafeRes, GetSupplyRpcResult);\n\n                if (!('error' in res)) {\n                  _context13.next = 8;\n                  break;\n                }\n\n                throw new Error('failed to get supply: ' + res.error.message);\n\n              case 8:\n                return _context13.abrupt(\"return\", res.result);\n\n              case 9:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function getSupply(_x27) {\n        return _getSupply.apply(this, arguments);\n      }\n\n      return getSupply;\n    }()\n    /**\n     * Fetch the current supply of a token mint\n     */\n\n  }, {\n    key: \"getTokenSupply\",\n    value: function () {\n      var _getTokenSupply = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(tokenMintAddress, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n                _context14.next = 3;\n                return this._rpcRequest('getTokenSupply', args);\n\n              case 3:\n                unsafeRes = _context14.sent;\n                res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n\n                if (!('error' in res)) {\n                  _context14.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get token supply: ' + res.error.message);\n\n              case 7:\n                return _context14.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function getTokenSupply(_x28, _x29) {\n        return _getTokenSupply.apply(this, arguments);\n      }\n\n      return getTokenSupply;\n    }()\n    /**\n     * Fetch the current balance of a token account\n     */\n\n  }, {\n    key: \"getTokenAccountBalance\",\n    value: function () {\n      var _getTokenAccountBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(tokenAddress, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                args = this._buildArgs([tokenAddress.toBase58()], commitment);\n                _context15.next = 3;\n                return this._rpcRequest('getTokenAccountBalance', args);\n\n              case 3:\n                unsafeRes = _context15.sent;\n                res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n\n                if (!('error' in res)) {\n                  _context15.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get token account balance: ' + res.error.message);\n\n              case 7:\n                return _context15.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function getTokenAccountBalance(_x30, _x31) {\n        return _getTokenAccountBalance.apply(this, arguments);\n      }\n\n      return getTokenAccountBalance;\n    }()\n    /**\n     * Fetch all the token accounts owned by the specified account\n     *\n     * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n     */\n\n  }, {\n    key: \"getTokenAccountsByOwner\",\n    value: function () {\n      var _getTokenAccountsByOwner = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(ownerAddress, filter, commitment) {\n        var _args, args, unsafeRes, res;\n\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                _args = [ownerAddress.toBase58()];\n\n                if ('mint' in filter) {\n                  _args.push({\n                    mint: filter.mint.toBase58()\n                  });\n                } else {\n                  _args.push({\n                    programId: filter.programId.toBase58()\n                  });\n                }\n\n                args = this._buildArgs(_args, commitment, 'base64');\n                _context16.next = 5;\n                return this._rpcRequest('getTokenAccountsByOwner', args);\n\n              case 5:\n                unsafeRes = _context16.sent;\n                res = create(unsafeRes, GetTokenAccountsByOwner);\n\n                if (!('error' in res)) {\n                  _context16.next = 9;\n                  break;\n                }\n\n                throw new Error('failed to get token accounts owned by account ' + ownerAddress.toBase58() + ': ' + res.error.message);\n\n              case 9:\n                return _context16.abrupt(\"return\", res.result);\n\n              case 10:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function getTokenAccountsByOwner(_x32, _x33, _x34) {\n        return _getTokenAccountsByOwner.apply(this, arguments);\n      }\n\n      return getTokenAccountsByOwner;\n    }()\n    /**\n     * Fetch parsed token accounts owned by the specified account\n     *\n     * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n     */\n\n  }, {\n    key: \"getParsedTokenAccountsByOwner\",\n    value: function () {\n      var _getParsedTokenAccountsByOwner = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(ownerAddress, filter, commitment) {\n        var _args, args, unsafeRes, res;\n\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                _args = [ownerAddress.toBase58()];\n\n                if ('mint' in filter) {\n                  _args.push({\n                    mint: filter.mint.toBase58()\n                  });\n                } else {\n                  _args.push({\n                    programId: filter.programId.toBase58()\n                  });\n                }\n\n                args = this._buildArgs(_args, commitment, 'jsonParsed');\n                _context17.next = 5;\n                return this._rpcRequest('getTokenAccountsByOwner', args);\n\n              case 5:\n                unsafeRes = _context17.sent;\n                res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n\n                if (!('error' in res)) {\n                  _context17.next = 9;\n                  break;\n                }\n\n                throw new Error('failed to get token accounts owned by account ' + ownerAddress.toBase58() + ': ' + res.error.message);\n\n              case 9:\n                return _context17.abrupt(\"return\", res.result);\n\n              case 10:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function getParsedTokenAccountsByOwner(_x35, _x36, _x37) {\n        return _getParsedTokenAccountsByOwner.apply(this, arguments);\n      }\n\n      return getParsedTokenAccountsByOwner;\n    }()\n    /**\n     * Fetch the 20 largest accounts with their current balances\n     */\n\n  }, {\n    key: \"getLargestAccounts\",\n    value: function () {\n      var _getLargestAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(config) {\n        var arg, args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                arg = _objectSpread(_objectSpread({}, config), {}, {\n                  commitment: config && config.commitment || this.commitment\n                });\n                args = arg.filter || arg.commitment ? [arg] : [];\n                _context18.next = 4;\n                return this._rpcRequest('getLargestAccounts', args);\n\n              case 4:\n                unsafeRes = _context18.sent;\n                res = create(unsafeRes, GetLargestAccountsRpcResult);\n\n                if (!('error' in res)) {\n                  _context18.next = 8;\n                  break;\n                }\n\n                throw new Error('failed to get largest accounts: ' + res.error.message);\n\n              case 8:\n                return _context18.abrupt(\"return\", res.result);\n\n              case 9:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function getLargestAccounts(_x38) {\n        return _getLargestAccounts.apply(this, arguments);\n      }\n\n      return getLargestAccounts;\n    }()\n    /**\n     * Fetch the 20 largest token accounts with their current balances\n     * for a given mint.\n     */\n\n  }, {\n    key: \"getTokenLargestAccounts\",\n    value: function () {\n      var _getTokenLargestAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(mintAddress, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                args = this._buildArgs([mintAddress.toBase58()], commitment);\n                _context19.next = 3;\n                return this._rpcRequest('getTokenLargestAccounts', args);\n\n              case 3:\n                unsafeRes = _context19.sent;\n                res = create(unsafeRes, GetTokenLargestAccountsResult);\n\n                if (!('error' in res)) {\n                  _context19.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get token largest accounts: ' + res.error.message);\n\n              case 7:\n                return _context19.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      function getTokenLargestAccounts(_x39, _x40) {\n        return _getTokenLargestAccounts.apply(this, arguments);\n      }\n\n      return getTokenLargestAccounts;\n    }()\n    /**\n     * Fetch all the account info for the specified public key, return with context\n     */\n\n  }, {\n    key: \"getAccountInfoAndContext\",\n    value: function () {\n      var _getAccountInfoAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20(publicKey, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n                _context20.next = 3;\n                return this._rpcRequest('getAccountInfo', args);\n\n              case 3:\n                unsafeRes = _context20.sent;\n                res = create(unsafeRes, jsonRpcResultAndContext(nullable(AccountInfoResult)));\n\n                if (!('error' in res)) {\n                  _context20.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + res.error.message);\n\n              case 7:\n                return _context20.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n\n      function getAccountInfoAndContext(_x41, _x42) {\n        return _getAccountInfoAndContext.apply(this, arguments);\n      }\n\n      return getAccountInfoAndContext;\n    }()\n    /**\n     * Fetch parsed account info for the specified public key\n     */\n\n  }, {\n    key: \"getParsedAccountInfo\",\n    value: function () {\n      var _getParsedAccountInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(publicKey, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                args = this._buildArgs([publicKey.toBase58()], commitment, 'jsonParsed');\n                _context21.next = 3;\n                return this._rpcRequest('getAccountInfo', args);\n\n              case 3:\n                unsafeRes = _context21.sent;\n                res = create(unsafeRes, jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)));\n\n                if (!('error' in res)) {\n                  _context21.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + res.error.message);\n\n              case 7:\n                return _context21.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n\n      function getParsedAccountInfo(_x43, _x44) {\n        return _getParsedAccountInfo.apply(this, arguments);\n      }\n\n      return getParsedAccountInfo;\n    }()\n    /**\n     * Fetch all the account info for the specified public key\n     */\n\n  }, {\n    key: \"getAccountInfo\",\n    value: function () {\n      var _getAccountInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22(publicKey, commitment) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                _context22.prev = 0;\n                _context22.next = 3;\n                return this.getAccountInfoAndContext(publicKey, commitment);\n\n              case 3:\n                res = _context22.sent;\n                return _context22.abrupt(\"return\", res.value);\n\n              case 7:\n                _context22.prev = 7;\n                _context22.t0 = _context22[\"catch\"](0);\n                throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + _context22.t0);\n\n              case 10:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this, [[0, 7]]);\n      }));\n\n      function getAccountInfo(_x45, _x46) {\n        return _getAccountInfo.apply(this, arguments);\n      }\n\n      return getAccountInfo;\n    }()\n    /**\n     * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n     */\n\n  }, {\n    key: \"getMultipleAccountsInfoAndContext\",\n    value: function () {\n      var _getMultipleAccountsInfoAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23(publicKeys, commitment) {\n        var keys, args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                keys = publicKeys.map(function (key) {\n                  return key.toBase58();\n                });\n                args = this._buildArgs([keys], commitment, 'base64');\n                _context23.next = 4;\n                return this._rpcRequest('getMultipleAccounts', args);\n\n              case 4:\n                unsafeRes = _context23.sent;\n                res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(AccountInfoResult))));\n\n                if (!('error' in res)) {\n                  _context23.next = 8;\n                  break;\n                }\n\n                throw new Error('failed to get info for accounts ' + keys + ': ' + res.error.message);\n\n              case 8:\n                return _context23.abrupt(\"return\", res.result);\n\n              case 9:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n\n      function getMultipleAccountsInfoAndContext(_x47, _x48) {\n        return _getMultipleAccountsInfoAndContext.apply(this, arguments);\n      }\n\n      return getMultipleAccountsInfoAndContext;\n    }()\n    /**\n     * Fetch all the account info for multiple accounts specified by an array of public keys\n     */\n\n  }, {\n    key: \"getMultipleAccountsInfo\",\n    value: function () {\n      var _getMultipleAccountsInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24(publicKeys, commitment) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                _context24.next = 2;\n                return this.getMultipleAccountsInfoAndContext(publicKeys, commitment);\n\n              case 2:\n                res = _context24.sent;\n                return _context24.abrupt(\"return\", res.value);\n\n              case 4:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24, this);\n      }));\n\n      function getMultipleAccountsInfo(_x49, _x50) {\n        return _getMultipleAccountsInfo.apply(this, arguments);\n      }\n\n      return getMultipleAccountsInfo;\n    }()\n    /**\n     * Returns epoch activation information for a stake account that has been delegated\n     */\n\n  }, {\n    key: \"getStakeActivation\",\n    value: function () {\n      var _getStakeActivation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee25(publicKey, commitment, epoch) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                args = this._buildArgs([publicKey.toBase58()], commitment, undefined, epoch !== undefined ? {\n                  epoch: epoch\n                } : undefined);\n                _context25.next = 3;\n                return this._rpcRequest('getStakeActivation', args);\n\n              case 3:\n                unsafeRes = _context25.sent;\n                res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n\n                if (!('error' in res)) {\n                  _context25.next = 7;\n                  break;\n                }\n\n                throw new Error(\"failed to get Stake Activation \".concat(publicKey.toBase58(), \": \").concat(res.error.message));\n\n              case 7:\n                return _context25.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25, this);\n      }));\n\n      function getStakeActivation(_x51, _x52, _x53) {\n        return _getStakeActivation.apply(this, arguments);\n      }\n\n      return getStakeActivation;\n    }()\n    /**\n     * Fetch all the accounts owned by the specified program id\n     *\n     * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n     */\n\n  }, {\n    key: \"getProgramAccounts\",\n    value: function () {\n      var _getProgramAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee26(programId, configOrCommitment) {\n        var extra, commitment, encoding, args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee26$(_context26) {\n          while (1) {\n            switch (_context26.prev = _context26.next) {\n              case 0:\n                extra = {};\n\n                if (configOrCommitment) {\n                  if (typeof configOrCommitment === 'string') {\n                    commitment = configOrCommitment;\n                  } else {\n                    commitment = configOrCommitment.commitment;\n                    encoding = configOrCommitment.encoding;\n\n                    if (configOrCommitment.dataSlice) {\n                      extra.dataSlice = configOrCommitment.dataSlice;\n                    }\n\n                    if (configOrCommitment.filters) {\n                      extra.filters = configOrCommitment.filters;\n                    }\n                  }\n                }\n\n                args = this._buildArgs([programId.toBase58()], commitment, encoding || 'base64', extra);\n                _context26.next = 5;\n                return this._rpcRequest('getProgramAccounts', args);\n\n              case 5:\n                unsafeRes = _context26.sent;\n                res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n\n                if (!('error' in res)) {\n                  _context26.next = 9;\n                  break;\n                }\n\n                throw new Error('failed to get accounts owned by program ' + programId.toBase58() + ': ' + res.error.message);\n\n              case 9:\n                return _context26.abrupt(\"return\", res.result);\n\n              case 10:\n              case \"end\":\n                return _context26.stop();\n            }\n          }\n        }, _callee26, this);\n      }));\n\n      function getProgramAccounts(_x54, _x55) {\n        return _getProgramAccounts.apply(this, arguments);\n      }\n\n      return getProgramAccounts;\n    }()\n    /**\n     * Fetch and parse all the accounts owned by the specified program id\n     *\n     * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n     */\n\n  }, {\n    key: \"getParsedProgramAccounts\",\n    value: function () {\n      var _getParsedProgramAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee27(programId, configOrCommitment) {\n        var extra, commitment, args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee27$(_context27) {\n          while (1) {\n            switch (_context27.prev = _context27.next) {\n              case 0:\n                extra = {};\n\n                if (configOrCommitment) {\n                  if (typeof configOrCommitment === 'string') {\n                    commitment = configOrCommitment;\n                  } else {\n                    commitment = configOrCommitment.commitment;\n\n                    if (configOrCommitment.filters) {\n                      extra.filters = configOrCommitment.filters;\n                    }\n                  }\n                }\n\n                args = this._buildArgs([programId.toBase58()], commitment, 'jsonParsed', extra);\n                _context27.next = 5;\n                return this._rpcRequest('getProgramAccounts', args);\n\n              case 5:\n                unsafeRes = _context27.sent;\n                res = create(unsafeRes, jsonRpcResult(array(KeyedParsedAccountInfoResult)));\n\n                if (!('error' in res)) {\n                  _context27.next = 9;\n                  break;\n                }\n\n                throw new Error('failed to get accounts owned by program ' + programId.toBase58() + ': ' + res.error.message);\n\n              case 9:\n                return _context27.abrupt(\"return\", res.result);\n\n              case 10:\n              case \"end\":\n                return _context27.stop();\n            }\n          }\n        }, _callee27, this);\n      }));\n\n      function getParsedProgramAccounts(_x56, _x57) {\n        return _getParsedProgramAccounts.apply(this, arguments);\n      }\n\n      return getParsedProgramAccounts;\n    }() // eslint-disable-next-line no-dupe-class-members\n\n  }, {\n    key: \"confirmTransaction\",\n    value: function () {\n      var _confirmTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee30(strategy, commitment) {\n        var _this10 = this;\n\n        var rawSignature, config, decodedSignature, subscriptionCommitment, timeoutId, subscriptionId, done, confirmationPromise, checkBlockHeight, expiryPromise, result, outcome;\n        return _regeneratorRuntime.wrap(function _callee30$(_context30) {\n          while (1) {\n            switch (_context30.prev = _context30.next) {\n              case 0:\n                if (typeof strategy == 'string') {\n                  rawSignature = strategy;\n                } else {\n                  config = strategy;\n                  rawSignature = config.signature;\n                }\n\n                _context30.prev = 1;\n                decodedSignature = bs58.decode(rawSignature);\n                _context30.next = 8;\n                break;\n\n              case 5:\n                _context30.prev = 5;\n                _context30.t0 = _context30[\"catch\"](1);\n                throw new Error('signature must be base58 encoded: ' + rawSignature);\n\n              case 8:\n                assert(decodedSignature.length === 64, 'signature has invalid length');\n                subscriptionCommitment = commitment || this.commitment;\n                done = false;\n                confirmationPromise = new Promise(function (resolve, reject) {\n                  try {\n                    subscriptionId = _this10.onSignature(rawSignature, function (result, context) {\n                      subscriptionId = undefined;\n                      var response = {\n                        context: context,\n                        value: result\n                      };\n                      done = true;\n                      resolve({\n                        __type: TransactionStatus.PROCESSED,\n                        response: response\n                      });\n                    }, subscriptionCommitment);\n                  } catch (err) {\n                    reject(err);\n                  }\n                });\n\n                checkBlockHeight = /*#__PURE__*/function () {\n                  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee28() {\n                    var blockHeight;\n                    return _regeneratorRuntime.wrap(function _callee28$(_context28) {\n                      while (1) {\n                        switch (_context28.prev = _context28.next) {\n                          case 0:\n                            _context28.prev = 0;\n                            _context28.next = 3;\n                            return _this10.getBlockHeight(commitment);\n\n                          case 3:\n                            blockHeight = _context28.sent;\n                            return _context28.abrupt(\"return\", blockHeight);\n\n                          case 7:\n                            _context28.prev = 7;\n                            _context28.t0 = _context28[\"catch\"](0);\n                            return _context28.abrupt(\"return\", -1);\n\n                          case 10:\n                          case \"end\":\n                            return _context28.stop();\n                        }\n                      }\n                    }, _callee28, null, [[0, 7]]);\n                  }));\n\n                  return function checkBlockHeight() {\n                    return _ref7.apply(this, arguments);\n                  };\n                }();\n\n                expiryPromise = new Promise(function (resolve) {\n                  if (typeof strategy === 'string') {\n                    var timeoutMs = _this10._confirmTransactionInitialTimeout || 60 * 1000;\n\n                    switch (subscriptionCommitment) {\n                      case 'processed':\n                      case 'recent':\n                      case 'single':\n                      case 'confirmed':\n                      case 'singleGossip':\n                        {\n                          timeoutMs = _this10._confirmTransactionInitialTimeout || 30 * 1000;\n                          break;\n                        }\n                    }\n\n                    timeoutId = setTimeout(function () {\n                      return resolve({\n                        __type: TransactionStatus.TIMED_OUT,\n                        timeoutMs: timeoutMs\n                      });\n                    }, timeoutMs);\n                  } else {\n                    var _config = strategy;\n\n                    _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee29() {\n                      var currentBlockHeight;\n                      return _regeneratorRuntime.wrap(function _callee29$(_context29) {\n                        while (1) {\n                          switch (_context29.prev = _context29.next) {\n                            case 0:\n                              _context29.next = 2;\n                              return checkBlockHeight();\n\n                            case 2:\n                              currentBlockHeight = _context29.sent;\n\n                              if (!done) {\n                                _context29.next = 5;\n                                break;\n                              }\n\n                              return _context29.abrupt(\"return\");\n\n                            case 5:\n                              if (!(currentBlockHeight <= _config.lastValidBlockHeight)) {\n                                _context29.next = 17;\n                                break;\n                              }\n\n                              _context29.next = 8;\n                              return sleep(1000);\n\n                            case 8:\n                              if (!done) {\n                                _context29.next = 10;\n                                break;\n                              }\n\n                              return _context29.abrupt(\"return\");\n\n                            case 10:\n                              _context29.next = 12;\n                              return checkBlockHeight();\n\n                            case 12:\n                              currentBlockHeight = _context29.sent;\n\n                              if (!done) {\n                                _context29.next = 15;\n                                break;\n                              }\n\n                              return _context29.abrupt(\"return\");\n\n                            case 15:\n                              _context29.next = 5;\n                              break;\n\n                            case 17:\n                              resolve({\n                                __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED\n                              });\n\n                            case 18:\n                            case \"end\":\n                              return _context29.stop();\n                          }\n                        }\n                      }, _callee29);\n                    }))();\n                  }\n                });\n                _context30.prev = 14;\n                _context30.next = 17;\n                return Promise.race([confirmationPromise, expiryPromise]);\n\n              case 17:\n                outcome = _context30.sent;\n                _context30.t1 = outcome.__type;\n                _context30.next = _context30.t1 === TransactionStatus.BLOCKHEIGHT_EXCEEDED ? 21 : _context30.t1 === TransactionStatus.PROCESSED ? 22 : _context30.t1 === TransactionStatus.TIMED_OUT ? 24 : 25;\n                break;\n\n              case 21:\n                throw new TransactionExpiredBlockheightExceededError(rawSignature);\n\n              case 22:\n                result = outcome.response;\n                return _context30.abrupt(\"break\", 25);\n\n              case 24:\n                throw new TransactionExpiredTimeoutError(rawSignature, outcome.timeoutMs / 1000);\n\n              case 25:\n                _context30.prev = 25;\n                clearTimeout(timeoutId);\n\n                if (subscriptionId) {\n                  this.removeSignatureListener(subscriptionId);\n                }\n\n                return _context30.finish(25);\n\n              case 29:\n                return _context30.abrupt(\"return\", result);\n\n              case 30:\n              case \"end\":\n                return _context30.stop();\n            }\n          }\n        }, _callee30, this, [[1, 5], [14,, 25, 29]]);\n      }));\n\n      function confirmTransaction(_x58, _x59) {\n        return _confirmTransaction.apply(this, arguments);\n      }\n\n      return confirmTransaction;\n    }()\n    /**\n     * Return the list of nodes that are currently participating in the cluster\n     */\n\n  }, {\n    key: \"getClusterNodes\",\n    value: function () {\n      var _getClusterNodes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee31() {\n        var unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee31$(_context31) {\n          while (1) {\n            switch (_context31.prev = _context31.next) {\n              case 0:\n                _context31.next = 2;\n                return this._rpcRequest('getClusterNodes', []);\n\n              case 2:\n                unsafeRes = _context31.sent;\n                res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n\n                if (!('error' in res)) {\n                  _context31.next = 6;\n                  break;\n                }\n\n                throw new Error('failed to get cluster nodes: ' + res.error.message);\n\n              case 6:\n                return _context31.abrupt(\"return\", res.result);\n\n              case 7:\n              case \"end\":\n                return _context31.stop();\n            }\n          }\n        }, _callee31, this);\n      }));\n\n      function getClusterNodes() {\n        return _getClusterNodes.apply(this, arguments);\n      }\n\n      return getClusterNodes;\n    }()\n    /**\n     * Return the list of nodes that are currently participating in the cluster\n     */\n\n  }, {\n    key: \"getVoteAccounts\",\n    value: function () {\n      var _getVoteAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee32(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee32$(_context32) {\n          while (1) {\n            switch (_context32.prev = _context32.next) {\n              case 0:\n                args = this._buildArgs([], commitment);\n                _context32.next = 3;\n                return this._rpcRequest('getVoteAccounts', args);\n\n              case 3:\n                unsafeRes = _context32.sent;\n                res = create(unsafeRes, GetVoteAccounts);\n\n                if (!('error' in res)) {\n                  _context32.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get vote accounts: ' + res.error.message);\n\n              case 7:\n                return _context32.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context32.stop();\n            }\n          }\n        }, _callee32, this);\n      }));\n\n      function getVoteAccounts(_x60) {\n        return _getVoteAccounts.apply(this, arguments);\n      }\n\n      return getVoteAccounts;\n    }()\n    /**\n     * Fetch the current slot that the node is processing\n     */\n\n  }, {\n    key: \"getSlot\",\n    value: function () {\n      var _getSlot = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee33(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee33$(_context33) {\n          while (1) {\n            switch (_context33.prev = _context33.next) {\n              case 0:\n                args = this._buildArgs([], commitment);\n                _context33.next = 3;\n                return this._rpcRequest('getSlot', args);\n\n              case 3:\n                unsafeRes = _context33.sent;\n                res = create(unsafeRes, jsonRpcResult(number()));\n\n                if (!('error' in res)) {\n                  _context33.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get slot: ' + res.error.message);\n\n              case 7:\n                return _context33.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context33.stop();\n            }\n          }\n        }, _callee33, this);\n      }));\n\n      function getSlot(_x61) {\n        return _getSlot.apply(this, arguments);\n      }\n\n      return getSlot;\n    }()\n    /**\n     * Fetch the current slot leader of the cluster\n     */\n\n  }, {\n    key: \"getSlotLeader\",\n    value: function () {\n      var _getSlotLeader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee34(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee34$(_context34) {\n          while (1) {\n            switch (_context34.prev = _context34.next) {\n              case 0:\n                args = this._buildArgs([], commitment);\n                _context34.next = 3;\n                return this._rpcRequest('getSlotLeader', args);\n\n              case 3:\n                unsafeRes = _context34.sent;\n                res = create(unsafeRes, jsonRpcResult(string()));\n\n                if (!('error' in res)) {\n                  _context34.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get slot leader: ' + res.error.message);\n\n              case 7:\n                return _context34.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context34.stop();\n            }\n          }\n        }, _callee34, this);\n      }));\n\n      function getSlotLeader(_x62) {\n        return _getSlotLeader.apply(this, arguments);\n      }\n\n      return getSlotLeader;\n    }()\n    /**\n     * Fetch `limit` number of slot leaders starting from `startSlot`\n     *\n     * @param startSlot fetch slot leaders starting from this slot\n     * @param limit number of slot leaders to return\n     */\n\n  }, {\n    key: \"getSlotLeaders\",\n    value: function () {\n      var _getSlotLeaders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee35(startSlot, limit) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee35$(_context35) {\n          while (1) {\n            switch (_context35.prev = _context35.next) {\n              case 0:\n                args = [startSlot, limit];\n                _context35.next = 3;\n                return this._rpcRequest('getSlotLeaders', args);\n\n              case 3:\n                unsafeRes = _context35.sent;\n                res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n\n                if (!('error' in res)) {\n                  _context35.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get slot leaders: ' + res.error.message);\n\n              case 7:\n                return _context35.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context35.stop();\n            }\n          }\n        }, _callee35, this);\n      }));\n\n      function getSlotLeaders(_x63, _x64) {\n        return _getSlotLeaders.apply(this, arguments);\n      }\n\n      return getSlotLeaders;\n    }()\n    /**\n     * Fetch the current status of a signature\n     */\n\n  }, {\n    key: \"getSignatureStatus\",\n    value: function () {\n      var _getSignatureStatus = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee36(signature, config) {\n        var _yield$this$getSignat, context, values, value;\n\n        return _regeneratorRuntime.wrap(function _callee36$(_context36) {\n          while (1) {\n            switch (_context36.prev = _context36.next) {\n              case 0:\n                _context36.next = 2;\n                return this.getSignatureStatuses([signature], config);\n\n              case 2:\n                _yield$this$getSignat = _context36.sent;\n                context = _yield$this$getSignat.context;\n                values = _yield$this$getSignat.value;\n                assert(values.length === 1);\n                value = values[0];\n                return _context36.abrupt(\"return\", {\n                  context: context,\n                  value: value\n                });\n\n              case 8:\n              case \"end\":\n                return _context36.stop();\n            }\n          }\n        }, _callee36, this);\n      }));\n\n      function getSignatureStatus(_x65, _x66) {\n        return _getSignatureStatus.apply(this, arguments);\n      }\n\n      return getSignatureStatus;\n    }()\n    /**\n     * Fetch the current statuses of a batch of signatures\n     */\n\n  }, {\n    key: \"getSignatureStatuses\",\n    value: function () {\n      var _getSignatureStatuses = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee37(signatures, config) {\n        var params, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee37$(_context37) {\n          while (1) {\n            switch (_context37.prev = _context37.next) {\n              case 0:\n                params = [signatures];\n\n                if (config) {\n                  params.push(config);\n                }\n\n                _context37.next = 4;\n                return this._rpcRequest('getSignatureStatuses', params);\n\n              case 4:\n                unsafeRes = _context37.sent;\n                res = create(unsafeRes, GetSignatureStatusesRpcResult);\n\n                if (!('error' in res)) {\n                  _context37.next = 8;\n                  break;\n                }\n\n                throw new Error('failed to get signature status: ' + res.error.message);\n\n              case 8:\n                return _context37.abrupt(\"return\", res.result);\n\n              case 9:\n              case \"end\":\n                return _context37.stop();\n            }\n          }\n        }, _callee37, this);\n      }));\n\n      function getSignatureStatuses(_x67, _x68) {\n        return _getSignatureStatuses.apply(this, arguments);\n      }\n\n      return getSignatureStatuses;\n    }()\n    /**\n     * Fetch the current transaction count of the cluster\n     */\n\n  }, {\n    key: \"getTransactionCount\",\n    value: function () {\n      var _getTransactionCount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee38(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee38$(_context38) {\n          while (1) {\n            switch (_context38.prev = _context38.next) {\n              case 0:\n                args = this._buildArgs([], commitment);\n                _context38.next = 3;\n                return this._rpcRequest('getTransactionCount', args);\n\n              case 3:\n                unsafeRes = _context38.sent;\n                res = create(unsafeRes, jsonRpcResult(number()));\n\n                if (!('error' in res)) {\n                  _context38.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get transaction count: ' + res.error.message);\n\n              case 7:\n                return _context38.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context38.stop();\n            }\n          }\n        }, _callee38, this);\n      }));\n\n      function getTransactionCount(_x69) {\n        return _getTransactionCount.apply(this, arguments);\n      }\n\n      return getTransactionCount;\n    }()\n    /**\n     * Fetch the current total currency supply of the cluster in lamports\n     *\n     * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n     */\n\n  }, {\n    key: \"getTotalSupply\",\n    value: function () {\n      var _getTotalSupply = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee39(commitment) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee39$(_context39) {\n          while (1) {\n            switch (_context39.prev = _context39.next) {\n              case 0:\n                _context39.next = 2;\n                return this.getSupply({\n                  commitment: commitment,\n                  excludeNonCirculatingAccountsList: true\n                });\n\n              case 2:\n                result = _context39.sent;\n                return _context39.abrupt(\"return\", result.value.total);\n\n              case 4:\n              case \"end\":\n                return _context39.stop();\n            }\n          }\n        }, _callee39, this);\n      }));\n\n      function getTotalSupply(_x70) {\n        return _getTotalSupply.apply(this, arguments);\n      }\n\n      return getTotalSupply;\n    }()\n    /**\n     * Fetch the cluster InflationGovernor parameters\n     */\n\n  }, {\n    key: \"getInflationGovernor\",\n    value: function () {\n      var _getInflationGovernor = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee40(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee40$(_context40) {\n          while (1) {\n            switch (_context40.prev = _context40.next) {\n              case 0:\n                args = this._buildArgs([], commitment);\n                _context40.next = 3;\n                return this._rpcRequest('getInflationGovernor', args);\n\n              case 3:\n                unsafeRes = _context40.sent;\n                res = create(unsafeRes, GetInflationGovernorRpcResult);\n\n                if (!('error' in res)) {\n                  _context40.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get inflation: ' + res.error.message);\n\n              case 7:\n                return _context40.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context40.stop();\n            }\n          }\n        }, _callee40, this);\n      }));\n\n      function getInflationGovernor(_x71) {\n        return _getInflationGovernor.apply(this, arguments);\n      }\n\n      return getInflationGovernor;\n    }()\n    /**\n     * Fetch the inflation reward for a list of addresses for an epoch\n     */\n\n  }, {\n    key: \"getInflationReward\",\n    value: function () {\n      var _getInflationReward = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee41(addresses, epoch, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee41$(_context41) {\n          while (1) {\n            switch (_context41.prev = _context41.next) {\n              case 0:\n                args = this._buildArgs([addresses.map(function (pubkey) {\n                  return pubkey.toBase58();\n                })], commitment, undefined, {\n                  epoch: epoch\n                });\n                _context41.next = 3;\n                return this._rpcRequest('getInflationReward', args);\n\n              case 3:\n                unsafeRes = _context41.sent;\n                res = create(unsafeRes, GetInflationRewardResult);\n\n                if (!('error' in res)) {\n                  _context41.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get inflation reward: ' + res.error.message);\n\n              case 7:\n                return _context41.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context41.stop();\n            }\n          }\n        }, _callee41, this);\n      }));\n\n      function getInflationReward(_x72, _x73, _x74) {\n        return _getInflationReward.apply(this, arguments);\n      }\n\n      return getInflationReward;\n    }()\n    /**\n     * Fetch the Epoch Info parameters\n     */\n\n  }, {\n    key: \"getEpochInfo\",\n    value: function () {\n      var _getEpochInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee42(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee42$(_context42) {\n          while (1) {\n            switch (_context42.prev = _context42.next) {\n              case 0:\n                args = this._buildArgs([], commitment);\n                _context42.next = 3;\n                return this._rpcRequest('getEpochInfo', args);\n\n              case 3:\n                unsafeRes = _context42.sent;\n                res = create(unsafeRes, GetEpochInfoRpcResult);\n\n                if (!('error' in res)) {\n                  _context42.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get epoch info: ' + res.error.message);\n\n              case 7:\n                return _context42.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context42.stop();\n            }\n          }\n        }, _callee42, this);\n      }));\n\n      function getEpochInfo(_x75) {\n        return _getEpochInfo.apply(this, arguments);\n      }\n\n      return getEpochInfo;\n    }()\n    /**\n     * Fetch the Epoch Schedule parameters\n     */\n\n  }, {\n    key: \"getEpochSchedule\",\n    value: function () {\n      var _getEpochSchedule = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee43() {\n        var unsafeRes, res, epochSchedule;\n        return _regeneratorRuntime.wrap(function _callee43$(_context43) {\n          while (1) {\n            switch (_context43.prev = _context43.next) {\n              case 0:\n                _context43.next = 2;\n                return this._rpcRequest('getEpochSchedule', []);\n\n              case 2:\n                unsafeRes = _context43.sent;\n                res = create(unsafeRes, GetEpochScheduleRpcResult);\n\n                if (!('error' in res)) {\n                  _context43.next = 6;\n                  break;\n                }\n\n                throw new Error('failed to get epoch schedule: ' + res.error.message);\n\n              case 6:\n                epochSchedule = res.result;\n                return _context43.abrupt(\"return\", new EpochSchedule(epochSchedule.slotsPerEpoch, epochSchedule.leaderScheduleSlotOffset, epochSchedule.warmup, epochSchedule.firstNormalEpoch, epochSchedule.firstNormalSlot));\n\n              case 8:\n              case \"end\":\n                return _context43.stop();\n            }\n          }\n        }, _callee43, this);\n      }));\n\n      function getEpochSchedule() {\n        return _getEpochSchedule.apply(this, arguments);\n      }\n\n      return getEpochSchedule;\n    }()\n    /**\n     * Fetch the leader schedule for the current epoch\n     * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n     */\n\n  }, {\n    key: \"getLeaderSchedule\",\n    value: function () {\n      var _getLeaderSchedule = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee44() {\n        var unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee44$(_context44) {\n          while (1) {\n            switch (_context44.prev = _context44.next) {\n              case 0:\n                _context44.next = 2;\n                return this._rpcRequest('getLeaderSchedule', []);\n\n              case 2:\n                unsafeRes = _context44.sent;\n                res = create(unsafeRes, GetLeaderScheduleRpcResult);\n\n                if (!('error' in res)) {\n                  _context44.next = 6;\n                  break;\n                }\n\n                throw new Error('failed to get leader schedule: ' + res.error.message);\n\n              case 6:\n                return _context44.abrupt(\"return\", res.result);\n\n              case 7:\n              case \"end\":\n                return _context44.stop();\n            }\n          }\n        }, _callee44, this);\n      }));\n\n      function getLeaderSchedule() {\n        return _getLeaderSchedule.apply(this, arguments);\n      }\n\n      return getLeaderSchedule;\n    }()\n    /**\n     * Fetch the minimum balance needed to exempt an account of `dataLength`\n     * size from rent\n     */\n\n  }, {\n    key: \"getMinimumBalanceForRentExemption\",\n    value: function () {\n      var _getMinimumBalanceForRentExemption = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee45(dataLength, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee45$(_context45) {\n          while (1) {\n            switch (_context45.prev = _context45.next) {\n              case 0:\n                args = this._buildArgs([dataLength], commitment);\n                _context45.next = 3;\n                return this._rpcRequest('getMinimumBalanceForRentExemption', args);\n\n              case 3:\n                unsafeRes = _context45.sent;\n                res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n\n                if (!('error' in res)) {\n                  _context45.next = 8;\n                  break;\n                }\n\n                console.warn('Unable to fetch minimum balance for rent exemption');\n                return _context45.abrupt(\"return\", 0);\n\n              case 8:\n                return _context45.abrupt(\"return\", res.result);\n\n              case 9:\n              case \"end\":\n                return _context45.stop();\n            }\n          }\n        }, _callee45, this);\n      }));\n\n      function getMinimumBalanceForRentExemption(_x76, _x77) {\n        return _getMinimumBalanceForRentExemption.apply(this, arguments);\n      }\n\n      return getMinimumBalanceForRentExemption;\n    }()\n    /**\n     * Fetch a recent blockhash from the cluster, return with context\n     * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n     *\n     * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n     */\n\n  }, {\n    key: \"getRecentBlockhashAndContext\",\n    value: function () {\n      var _getRecentBlockhashAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee46(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee46$(_context46) {\n          while (1) {\n            switch (_context46.prev = _context46.next) {\n              case 0:\n                args = this._buildArgs([], commitment);\n                _context46.next = 3;\n                return this._rpcRequest('getRecentBlockhash', args);\n\n              case 3:\n                unsafeRes = _context46.sent;\n                res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n\n                if (!('error' in res)) {\n                  _context46.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get recent blockhash: ' + res.error.message);\n\n              case 7:\n                return _context46.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context46.stop();\n            }\n          }\n        }, _callee46, this);\n      }));\n\n      function getRecentBlockhashAndContext(_x78) {\n        return _getRecentBlockhashAndContext.apply(this, arguments);\n      }\n\n      return getRecentBlockhashAndContext;\n    }()\n    /**\n     * Fetch recent performance samples\n     * @return {Promise<Array<PerfSample>>}\n     */\n\n  }, {\n    key: \"getRecentPerformanceSamples\",\n    value: function () {\n      var _getRecentPerformanceSamples = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee47(limit) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee47$(_context47) {\n          while (1) {\n            switch (_context47.prev = _context47.next) {\n              case 0:\n                args = this._buildArgs(limit ? [limit] : []);\n                _context47.next = 3;\n                return this._rpcRequest('getRecentPerformanceSamples', args);\n\n              case 3:\n                unsafeRes = _context47.sent;\n                res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n\n                if (!('error' in res)) {\n                  _context47.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get recent performance samples: ' + res.error.message);\n\n              case 7:\n                return _context47.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context47.stop();\n            }\n          }\n        }, _callee47, this);\n      }));\n\n      function getRecentPerformanceSamples(_x79) {\n        return _getRecentPerformanceSamples.apply(this, arguments);\n      }\n\n      return getRecentPerformanceSamples;\n    }()\n    /**\n     * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n     *\n     * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n     */\n\n  }, {\n    key: \"getFeeCalculatorForBlockhash\",\n    value: function () {\n      var _getFeeCalculatorForBlockhash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee48(blockhash, commitment) {\n        var args, unsafeRes, res, _res$result, context, value;\n\n        return _regeneratorRuntime.wrap(function _callee48$(_context48) {\n          while (1) {\n            switch (_context48.prev = _context48.next) {\n              case 0:\n                args = this._buildArgs([blockhash], commitment);\n                _context48.next = 3;\n                return this._rpcRequest('getFeeCalculatorForBlockhash', args);\n\n              case 3:\n                unsafeRes = _context48.sent;\n                res = create(unsafeRes, GetFeeCalculatorRpcResult);\n\n                if (!('error' in res)) {\n                  _context48.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get fee calculator: ' + res.error.message);\n\n              case 7:\n                _res$result = res.result, context = _res$result.context, value = _res$result.value;\n                return _context48.abrupt(\"return\", {\n                  context: context,\n                  value: value !== null ? value.feeCalculator : null\n                });\n\n              case 9:\n              case \"end\":\n                return _context48.stop();\n            }\n          }\n        }, _callee48, this);\n      }));\n\n      function getFeeCalculatorForBlockhash(_x80, _x81) {\n        return _getFeeCalculatorForBlockhash.apply(this, arguments);\n      }\n\n      return getFeeCalculatorForBlockhash;\n    }()\n    /**\n     * Fetch the fee for a message from the cluster, return with context\n     */\n\n  }, {\n    key: \"getFeeForMessage\",\n    value: function () {\n      var _getFeeForMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee49(message, commitment) {\n        var wireMessage, args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee49$(_context49) {\n          while (1) {\n            switch (_context49.prev = _context49.next) {\n              case 0:\n                wireMessage = message.serialize().toString('base64');\n                args = this._buildArgs([wireMessage], commitment);\n                _context49.next = 4;\n                return this._rpcRequest('getFeeForMessage', args);\n\n              case 4:\n                unsafeRes = _context49.sent;\n                res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n\n                if (!('error' in res)) {\n                  _context49.next = 8;\n                  break;\n                }\n\n                throw new Error('failed to get slot: ' + res.error.message);\n\n              case 8:\n                if (!(res.result === null)) {\n                  _context49.next = 10;\n                  break;\n                }\n\n                throw new Error('invalid blockhash');\n\n              case 10:\n                return _context49.abrupt(\"return\", res.result);\n\n              case 11:\n              case \"end\":\n                return _context49.stop();\n            }\n          }\n        }, _callee49, this);\n      }));\n\n      function getFeeForMessage(_x82, _x83) {\n        return _getFeeForMessage.apply(this, arguments);\n      }\n\n      return getFeeForMessage;\n    }()\n    /**\n     * Fetch a recent blockhash from the cluster\n     * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n     *\n     * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n     */\n\n  }, {\n    key: \"getRecentBlockhash\",\n    value: function () {\n      var _getRecentBlockhash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee50(commitment) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee50$(_context50) {\n          while (1) {\n            switch (_context50.prev = _context50.next) {\n              case 0:\n                _context50.prev = 0;\n                _context50.next = 3;\n                return this.getRecentBlockhashAndContext(commitment);\n\n              case 3:\n                res = _context50.sent;\n                return _context50.abrupt(\"return\", res.value);\n\n              case 7:\n                _context50.prev = 7;\n                _context50.t0 = _context50[\"catch\"](0);\n                throw new Error('failed to get recent blockhash: ' + _context50.t0);\n\n              case 10:\n              case \"end\":\n                return _context50.stop();\n            }\n          }\n        }, _callee50, this, [[0, 7]]);\n      }));\n\n      function getRecentBlockhash(_x84) {\n        return _getRecentBlockhash.apply(this, arguments);\n      }\n\n      return getRecentBlockhash;\n    }()\n    /**\n     * Fetch the latest blockhash from the cluster\n     * @return {Promise<BlockhashWithExpiryBlockHeight>}\n     */\n\n  }, {\n    key: \"getLatestBlockhash\",\n    value: function () {\n      var _getLatestBlockhash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee51(commitment) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee51$(_context51) {\n          while (1) {\n            switch (_context51.prev = _context51.next) {\n              case 0:\n                _context51.prev = 0;\n                _context51.next = 3;\n                return this.getLatestBlockhashAndContext(commitment);\n\n              case 3:\n                res = _context51.sent;\n                return _context51.abrupt(\"return\", res.value);\n\n              case 7:\n                _context51.prev = 7;\n                _context51.t0 = _context51[\"catch\"](0);\n                throw new Error('failed to get recent blockhash: ' + _context51.t0);\n\n              case 10:\n              case \"end\":\n                return _context51.stop();\n            }\n          }\n        }, _callee51, this, [[0, 7]]);\n      }));\n\n      function getLatestBlockhash(_x85) {\n        return _getLatestBlockhash.apply(this, arguments);\n      }\n\n      return getLatestBlockhash;\n    }()\n    /**\n     * Fetch the latest blockhash from the cluster\n     * @return {Promise<BlockhashWithExpiryBlockHeight>}\n     */\n\n  }, {\n    key: \"getLatestBlockhashAndContext\",\n    value: function () {\n      var _getLatestBlockhashAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee52(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee52$(_context52) {\n          while (1) {\n            switch (_context52.prev = _context52.next) {\n              case 0:\n                args = this._buildArgs([], commitment);\n                _context52.next = 3;\n                return this._rpcRequest('getLatestBlockhash', args);\n\n              case 3:\n                unsafeRes = _context52.sent;\n                res = create(unsafeRes, GetLatestBlockhashRpcResult);\n\n                if (!('error' in res)) {\n                  _context52.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get latest blockhash: ' + res.error.message);\n\n              case 7:\n                return _context52.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context52.stop();\n            }\n          }\n        }, _callee52, this);\n      }));\n\n      function getLatestBlockhashAndContext(_x86) {\n        return _getLatestBlockhashAndContext.apply(this, arguments);\n      }\n\n      return getLatestBlockhashAndContext;\n    }()\n    /**\n     * Fetch the node version\n     */\n\n  }, {\n    key: \"getVersion\",\n    value: function () {\n      var _getVersion = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee53() {\n        var unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee53$(_context53) {\n          while (1) {\n            switch (_context53.prev = _context53.next) {\n              case 0:\n                _context53.next = 2;\n                return this._rpcRequest('getVersion', []);\n\n              case 2:\n                unsafeRes = _context53.sent;\n                res = create(unsafeRes, jsonRpcResult(VersionResult));\n\n                if (!('error' in res)) {\n                  _context53.next = 6;\n                  break;\n                }\n\n                throw new Error('failed to get version: ' + res.error.message);\n\n              case 6:\n                return _context53.abrupt(\"return\", res.result);\n\n              case 7:\n              case \"end\":\n                return _context53.stop();\n            }\n          }\n        }, _callee53, this);\n      }));\n\n      function getVersion() {\n        return _getVersion.apply(this, arguments);\n      }\n\n      return getVersion;\n    }()\n    /**\n     * Fetch the genesis hash\n     */\n\n  }, {\n    key: \"getGenesisHash\",\n    value: function () {\n      var _getGenesisHash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee54() {\n        var unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee54$(_context54) {\n          while (1) {\n            switch (_context54.prev = _context54.next) {\n              case 0:\n                _context54.next = 2;\n                return this._rpcRequest('getGenesisHash', []);\n\n              case 2:\n                unsafeRes = _context54.sent;\n                res = create(unsafeRes, jsonRpcResult(string()));\n\n                if (!('error' in res)) {\n                  _context54.next = 6;\n                  break;\n                }\n\n                throw new Error('failed to get genesis hash: ' + res.error.message);\n\n              case 6:\n                return _context54.abrupt(\"return\", res.result);\n\n              case 7:\n              case \"end\":\n                return _context54.stop();\n            }\n          }\n        }, _callee54, this);\n      }));\n\n      function getGenesisHash() {\n        return _getGenesisHash.apply(this, arguments);\n      }\n\n      return getGenesisHash;\n    }()\n    /**\n     * Fetch a processed block from the cluster.\n     */\n\n  }, {\n    key: \"getBlock\",\n    value: function () {\n      var _getBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee55(slot, opts) {\n        var args, unsafeRes, res, result;\n        return _regeneratorRuntime.wrap(function _callee55$(_context55) {\n          while (1) {\n            switch (_context55.prev = _context55.next) {\n              case 0:\n                args = this._buildArgsAtLeastConfirmed([slot], opts && opts.commitment);\n                _context55.next = 3;\n                return this._rpcRequest('getBlock', args);\n\n              case 3:\n                unsafeRes = _context55.sent;\n                res = create(unsafeRes, GetBlockRpcResult);\n\n                if (!('error' in res)) {\n                  _context55.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get confirmed block: ' + res.error.message);\n\n              case 7:\n                result = res.result;\n\n                if (result) {\n                  _context55.next = 10;\n                  break;\n                }\n\n                return _context55.abrupt(\"return\", result);\n\n              case 10:\n                return _context55.abrupt(\"return\", _objectSpread(_objectSpread({}, result), {}, {\n                  transactions: result.transactions.map(function (_ref9) {\n                    var transaction = _ref9.transaction,\n                        meta = _ref9.meta;\n                    var message = new Message(transaction.message);\n                    return {\n                      meta: meta,\n                      transaction: _objectSpread(_objectSpread({}, transaction), {}, {\n                        message: message\n                      })\n                    };\n                  })\n                }));\n\n              case 11:\n              case \"end\":\n                return _context55.stop();\n            }\n          }\n        }, _callee55, this);\n      }));\n\n      function getBlock(_x87, _x88) {\n        return _getBlock.apply(this, arguments);\n      }\n\n      return getBlock;\n    }()\n    /*\n     * Returns the current block height of the node\n     */\n\n  }, {\n    key: \"getBlockHeight\",\n    value: function () {\n      var _getBlockHeight = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee56(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee56$(_context56) {\n          while (1) {\n            switch (_context56.prev = _context56.next) {\n              case 0:\n                args = this._buildArgs([], commitment);\n                _context56.next = 3;\n                return this._rpcRequest('getBlockHeight', args);\n\n              case 3:\n                unsafeRes = _context56.sent;\n                res = create(unsafeRes, jsonRpcResult(number()));\n\n                if (!('error' in res)) {\n                  _context56.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get block height information: ' + res.error.message);\n\n              case 7:\n                return _context56.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context56.stop();\n            }\n          }\n        }, _callee56, this);\n      }));\n\n      function getBlockHeight(_x89) {\n        return _getBlockHeight.apply(this, arguments);\n      }\n\n      return getBlockHeight;\n    }()\n    /*\n     * Returns recent block production information from the current or previous epoch\n     */\n\n  }, {\n    key: \"getBlockProduction\",\n    value: function () {\n      var _getBlockProduction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee57(configOrCommitment) {\n        var extra, commitment, c, rest, args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee57$(_context57) {\n          while (1) {\n            switch (_context57.prev = _context57.next) {\n              case 0:\n                if (typeof configOrCommitment === 'string') {\n                  commitment = configOrCommitment;\n                } else if (configOrCommitment) {\n                  c = configOrCommitment.commitment, rest = _objectWithoutProperties(configOrCommitment, _excluded);\n                  commitment = c;\n                  extra = rest;\n                }\n\n                args = this._buildArgs([], commitment, 'base64', extra);\n                _context57.next = 4;\n                return this._rpcRequest('getBlockProduction', args);\n\n              case 4:\n                unsafeRes = _context57.sent;\n                res = create(unsafeRes, BlockProductionResponseStruct);\n\n                if (!('error' in res)) {\n                  _context57.next = 8;\n                  break;\n                }\n\n                throw new Error('failed to get block production information: ' + res.error.message);\n\n              case 8:\n                return _context57.abrupt(\"return\", res.result);\n\n              case 9:\n              case \"end\":\n                return _context57.stop();\n            }\n          }\n        }, _callee57, this);\n      }));\n\n      function getBlockProduction(_x90) {\n        return _getBlockProduction.apply(this, arguments);\n      }\n\n      return getBlockProduction;\n    }()\n    /**\n     * Fetch a confirmed or finalized transaction from the cluster.\n     */\n\n  }, {\n    key: \"getTransaction\",\n    value: function () {\n      var _getTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee58(signature, opts) {\n        var args, unsafeRes, res, result;\n        return _regeneratorRuntime.wrap(function _callee58$(_context58) {\n          while (1) {\n            switch (_context58.prev = _context58.next) {\n              case 0:\n                args = this._buildArgsAtLeastConfirmed([signature], opts && opts.commitment);\n                _context58.next = 3;\n                return this._rpcRequest('getTransaction', args);\n\n              case 3:\n                unsafeRes = _context58.sent;\n                res = create(unsafeRes, GetTransactionRpcResult);\n\n                if (!('error' in res)) {\n                  _context58.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get transaction: ' + res.error.message);\n\n              case 7:\n                result = res.result;\n\n                if (result) {\n                  _context58.next = 10;\n                  break;\n                }\n\n                return _context58.abrupt(\"return\", result);\n\n              case 10:\n                return _context58.abrupt(\"return\", _objectSpread(_objectSpread({}, result), {}, {\n                  transaction: _objectSpread(_objectSpread({}, result.transaction), {}, {\n                    message: new Message(result.transaction.message)\n                  })\n                }));\n\n              case 11:\n              case \"end\":\n                return _context58.stop();\n            }\n          }\n        }, _callee58, this);\n      }));\n\n      function getTransaction(_x91, _x92) {\n        return _getTransaction.apply(this, arguments);\n      }\n\n      return getTransaction;\n    }()\n    /**\n     * Fetch parsed transaction details for a confirmed or finalized transaction\n     */\n\n  }, {\n    key: \"getParsedTransaction\",\n    value: function () {\n      var _getParsedTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee59(signature, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee59$(_context59) {\n          while (1) {\n            switch (_context59.prev = _context59.next) {\n              case 0:\n                args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n                _context59.next = 3;\n                return this._rpcRequest('getTransaction', args);\n\n              case 3:\n                unsafeRes = _context59.sent;\n                res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n                if (!('error' in res)) {\n                  _context59.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get transaction: ' + res.error.message);\n\n              case 7:\n                return _context59.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context59.stop();\n            }\n          }\n        }, _callee59, this);\n      }));\n\n      function getParsedTransaction(_x93, _x94) {\n        return _getParsedTransaction.apply(this, arguments);\n      }\n\n      return getParsedTransaction;\n    }()\n    /**\n     * Fetch parsed transaction details for a batch of confirmed transactions\n     */\n\n  }, {\n    key: \"getParsedTransactions\",\n    value: function () {\n      var _getParsedTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee60(signatures, commitment) {\n        var _this11 = this;\n\n        var batch, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee60$(_context60) {\n          while (1) {\n            switch (_context60.prev = _context60.next) {\n              case 0:\n                batch = signatures.map(function (signature) {\n                  var args = _this11._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n\n                  return {\n                    methodName: 'getTransaction',\n                    args: args\n                  };\n                });\n                _context60.next = 3;\n                return this._rpcBatchRequest(batch);\n\n              case 3:\n                unsafeRes = _context60.sent;\n                res = unsafeRes.map(function (unsafeRes) {\n                  var res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n                  if ('error' in res) {\n                    throw new Error('failed to get transactions: ' + res.error.message);\n                  }\n\n                  return res.result;\n                });\n                return _context60.abrupt(\"return\", res);\n\n              case 6:\n              case \"end\":\n                return _context60.stop();\n            }\n          }\n        }, _callee60, this);\n      }));\n\n      function getParsedTransactions(_x95, _x96) {\n        return _getParsedTransactions.apply(this, arguments);\n      }\n\n      return getParsedTransactions;\n    }()\n    /**\n     * Fetch transaction details for a batch of confirmed transactions.\n     * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n     */\n\n  }, {\n    key: \"getTransactions\",\n    value: function () {\n      var _getTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee61(signatures, commitment) {\n        var _this12 = this;\n\n        var batch, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee61$(_context61) {\n          while (1) {\n            switch (_context61.prev = _context61.next) {\n              case 0:\n                batch = signatures.map(function (signature) {\n                  var args = _this12._buildArgsAtLeastConfirmed([signature], commitment);\n\n                  return {\n                    methodName: 'getTransaction',\n                    args: args\n                  };\n                });\n                _context61.next = 3;\n                return this._rpcBatchRequest(batch);\n\n              case 3:\n                unsafeRes = _context61.sent;\n                res = unsafeRes.map(function (unsafeRes) {\n                  var res = create(unsafeRes, GetTransactionRpcResult);\n\n                  if ('error' in res) {\n                    throw new Error('failed to get transactions: ' + res.error.message);\n                  }\n\n                  return res.result;\n                });\n                return _context61.abrupt(\"return\", res);\n\n              case 6:\n              case \"end\":\n                return _context61.stop();\n            }\n          }\n        }, _callee61, this);\n      }));\n\n      function getTransactions(_x97, _x98) {\n        return _getTransactions.apply(this, arguments);\n      }\n\n      return getTransactions;\n    }()\n    /**\n     * Fetch a list of Transactions and transaction statuses from the cluster\n     * for a confirmed block.\n     *\n     * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n     */\n\n  }, {\n    key: \"getConfirmedBlock\",\n    value: function () {\n      var _getConfirmedBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee62(slot, commitment) {\n        var args, unsafeRes, res, result, block;\n        return _regeneratorRuntime.wrap(function _callee62$(_context62) {\n          while (1) {\n            switch (_context62.prev = _context62.next) {\n              case 0:\n                args = this._buildArgsAtLeastConfirmed([slot], commitment);\n                _context62.next = 3;\n                return this._rpcRequest('getConfirmedBlock', args);\n\n              case 3:\n                unsafeRes = _context62.sent;\n                res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n                if (!('error' in res)) {\n                  _context62.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get confirmed block: ' + res.error.message);\n\n              case 7:\n                result = res.result;\n\n                if (result) {\n                  _context62.next = 10;\n                  break;\n                }\n\n                throw new Error('Confirmed block ' + slot + ' not found');\n\n              case 10:\n                block = _objectSpread(_objectSpread({}, result), {}, {\n                  transactions: result.transactions.map(function (_ref10) {\n                    var transaction = _ref10.transaction,\n                        meta = _ref10.meta;\n                    var message = new Message(transaction.message);\n                    return {\n                      meta: meta,\n                      transaction: _objectSpread(_objectSpread({}, transaction), {}, {\n                        message: message\n                      })\n                    };\n                  })\n                });\n                return _context62.abrupt(\"return\", _objectSpread(_objectSpread({}, block), {}, {\n                  transactions: block.transactions.map(function (_ref11) {\n                    var transaction = _ref11.transaction,\n                        meta = _ref11.meta;\n                    return {\n                      meta: meta,\n                      transaction: Transaction.populate(transaction.message, transaction.signatures)\n                    };\n                  })\n                }));\n\n              case 12:\n              case \"end\":\n                return _context62.stop();\n            }\n          }\n        }, _callee62, this);\n      }));\n\n      function getConfirmedBlock(_x99, _x100) {\n        return _getConfirmedBlock.apply(this, arguments);\n      }\n\n      return getConfirmedBlock;\n    }()\n    /**\n     * Fetch confirmed blocks between two slots\n     */\n\n  }, {\n    key: \"getBlocks\",\n    value: function () {\n      var _getBlocks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee63(startSlot, endSlot, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee63$(_context63) {\n          while (1) {\n            switch (_context63.prev = _context63.next) {\n              case 0:\n                args = this._buildArgsAtLeastConfirmed(endSlot !== undefined ? [startSlot, endSlot] : [startSlot], commitment);\n                _context63.next = 3;\n                return this._rpcRequest('getBlocks', args);\n\n              case 3:\n                unsafeRes = _context63.sent;\n                res = create(unsafeRes, jsonRpcResult(array(number())));\n\n                if (!('error' in res)) {\n                  _context63.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get blocks: ' + res.error.message);\n\n              case 7:\n                return _context63.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context63.stop();\n            }\n          }\n        }, _callee63, this);\n      }));\n\n      function getBlocks(_x101, _x102, _x103) {\n        return _getBlocks.apply(this, arguments);\n      }\n\n      return getBlocks;\n    }()\n    /**\n     * Fetch a list of Signatures from the cluster for a block, excluding rewards\n     */\n\n  }, {\n    key: \"getBlockSignatures\",\n    value: function () {\n      var _getBlockSignatures = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee64(slot, commitment) {\n        var args, unsafeRes, res, result;\n        return _regeneratorRuntime.wrap(function _callee64$(_context64) {\n          while (1) {\n            switch (_context64.prev = _context64.next) {\n              case 0:\n                args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n                  transactionDetails: 'signatures',\n                  rewards: false\n                });\n                _context64.next = 3;\n                return this._rpcRequest('getBlock', args);\n\n              case 3:\n                unsafeRes = _context64.sent;\n                res = create(unsafeRes, GetBlockSignaturesRpcResult);\n\n                if (!('error' in res)) {\n                  _context64.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get block: ' + res.error.message);\n\n              case 7:\n                result = res.result;\n\n                if (result) {\n                  _context64.next = 10;\n                  break;\n                }\n\n                throw new Error('Block ' + slot + ' not found');\n\n              case 10:\n                return _context64.abrupt(\"return\", result);\n\n              case 11:\n              case \"end\":\n                return _context64.stop();\n            }\n          }\n        }, _callee64, this);\n      }));\n\n      function getBlockSignatures(_x104, _x105) {\n        return _getBlockSignatures.apply(this, arguments);\n      }\n\n      return getBlockSignatures;\n    }()\n    /**\n     * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n     *\n     * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n     */\n\n  }, {\n    key: \"getConfirmedBlockSignatures\",\n    value: function () {\n      var _getConfirmedBlockSignatures = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee65(slot, commitment) {\n        var args, unsafeRes, res, result;\n        return _regeneratorRuntime.wrap(function _callee65$(_context65) {\n          while (1) {\n            switch (_context65.prev = _context65.next) {\n              case 0:\n                args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n                  transactionDetails: 'signatures',\n                  rewards: false\n                });\n                _context65.next = 3;\n                return this._rpcRequest('getConfirmedBlock', args);\n\n              case 3:\n                unsafeRes = _context65.sent;\n                res = create(unsafeRes, GetBlockSignaturesRpcResult);\n\n                if (!('error' in res)) {\n                  _context65.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get confirmed block: ' + res.error.message);\n\n              case 7:\n                result = res.result;\n\n                if (result) {\n                  _context65.next = 10;\n                  break;\n                }\n\n                throw new Error('Confirmed block ' + slot + ' not found');\n\n              case 10:\n                return _context65.abrupt(\"return\", result);\n\n              case 11:\n              case \"end\":\n                return _context65.stop();\n            }\n          }\n        }, _callee65, this);\n      }));\n\n      function getConfirmedBlockSignatures(_x106, _x107) {\n        return _getConfirmedBlockSignatures.apply(this, arguments);\n      }\n\n      return getConfirmedBlockSignatures;\n    }()\n    /**\n     * Fetch a transaction details for a confirmed transaction\n     *\n     * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n     */\n\n  }, {\n    key: \"getConfirmedTransaction\",\n    value: function () {\n      var _getConfirmedTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee66(signature, commitment) {\n        var args, unsafeRes, res, result, message, signatures;\n        return _regeneratorRuntime.wrap(function _callee66$(_context66) {\n          while (1) {\n            switch (_context66.prev = _context66.next) {\n              case 0:\n                args = this._buildArgsAtLeastConfirmed([signature], commitment);\n                _context66.next = 3;\n                return this._rpcRequest('getConfirmedTransaction', args);\n\n              case 3:\n                unsafeRes = _context66.sent;\n                res = create(unsafeRes, GetTransactionRpcResult);\n\n                if (!('error' in res)) {\n                  _context66.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get transaction: ' + res.error.message);\n\n              case 7:\n                result = res.result;\n\n                if (result) {\n                  _context66.next = 10;\n                  break;\n                }\n\n                return _context66.abrupt(\"return\", result);\n\n              case 10:\n                message = new Message(result.transaction.message);\n                signatures = result.transaction.signatures;\n                return _context66.abrupt(\"return\", _objectSpread(_objectSpread({}, result), {}, {\n                  transaction: Transaction.populate(message, signatures)\n                }));\n\n              case 13:\n              case \"end\":\n                return _context66.stop();\n            }\n          }\n        }, _callee66, this);\n      }));\n\n      function getConfirmedTransaction(_x108, _x109) {\n        return _getConfirmedTransaction.apply(this, arguments);\n      }\n\n      return getConfirmedTransaction;\n    }()\n    /**\n     * Fetch parsed transaction details for a confirmed transaction\n     *\n     * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n     */\n\n  }, {\n    key: \"getParsedConfirmedTransaction\",\n    value: function () {\n      var _getParsedConfirmedTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee67(signature, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee67$(_context67) {\n          while (1) {\n            switch (_context67.prev = _context67.next) {\n              case 0:\n                args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n                _context67.next = 3;\n                return this._rpcRequest('getConfirmedTransaction', args);\n\n              case 3:\n                unsafeRes = _context67.sent;\n                res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n                if (!('error' in res)) {\n                  _context67.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get confirmed transaction: ' + res.error.message);\n\n              case 7:\n                return _context67.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context67.stop();\n            }\n          }\n        }, _callee67, this);\n      }));\n\n      function getParsedConfirmedTransaction(_x110, _x111) {\n        return _getParsedConfirmedTransaction.apply(this, arguments);\n      }\n\n      return getParsedConfirmedTransaction;\n    }()\n    /**\n     * Fetch parsed transaction details for a batch of confirmed transactions\n     *\n     * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n     */\n\n  }, {\n    key: \"getParsedConfirmedTransactions\",\n    value: function () {\n      var _getParsedConfirmedTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee68(signatures, commitment) {\n        var _this13 = this;\n\n        var batch, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee68$(_context68) {\n          while (1) {\n            switch (_context68.prev = _context68.next) {\n              case 0:\n                batch = signatures.map(function (signature) {\n                  var args = _this13._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n\n                  return {\n                    methodName: 'getConfirmedTransaction',\n                    args: args\n                  };\n                });\n                _context68.next = 3;\n                return this._rpcBatchRequest(batch);\n\n              case 3:\n                unsafeRes = _context68.sent;\n                res = unsafeRes.map(function (unsafeRes) {\n                  var res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n                  if ('error' in res) {\n                    throw new Error('failed to get confirmed transactions: ' + res.error.message);\n                  }\n\n                  return res.result;\n                });\n                return _context68.abrupt(\"return\", res);\n\n              case 6:\n              case \"end\":\n                return _context68.stop();\n            }\n          }\n        }, _callee68, this);\n      }));\n\n      function getParsedConfirmedTransactions(_x112, _x113) {\n        return _getParsedConfirmedTransactions.apply(this, arguments);\n      }\n\n      return getParsedConfirmedTransactions;\n    }()\n    /**\n     * Fetch a list of all the confirmed signatures for transactions involving an address\n     * within a specified slot range. Max range allowed is 10,000 slots.\n     *\n     * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n     *\n     * @param address queried address\n     * @param startSlot start slot, inclusive\n     * @param endSlot end slot, inclusive\n     */\n\n  }, {\n    key: \"getConfirmedSignaturesForAddress\",\n    value: function () {\n      var _getConfirmedSignaturesForAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee69(address, startSlot, endSlot) {\n        var options, firstAvailableBlock, block, highestConfirmedRoot, _block, confirmedSignatureInfo;\n\n        return _regeneratorRuntime.wrap(function _callee69$(_context69) {\n          while (1) {\n            switch (_context69.prev = _context69.next) {\n              case 0:\n                options = {};\n                _context69.next = 3;\n                return this.getFirstAvailableBlock();\n\n              case 3:\n                firstAvailableBlock = _context69.sent;\n\n              case 4:\n                if ('until' in options) {\n                  _context69.next = 24;\n                  break;\n                }\n\n                startSlot--;\n\n                if (!(startSlot <= 0 || startSlot < firstAvailableBlock)) {\n                  _context69.next = 8;\n                  break;\n                }\n\n                return _context69.abrupt(\"break\", 24);\n\n              case 8:\n                _context69.prev = 8;\n                _context69.next = 11;\n                return this.getConfirmedBlockSignatures(startSlot, 'finalized');\n\n              case 11:\n                block = _context69.sent;\n\n                if (block.signatures.length > 0) {\n                  options.until = block.signatures[block.signatures.length - 1].toString();\n                }\n\n                _context69.next = 22;\n                break;\n\n              case 15:\n                _context69.prev = 15;\n                _context69.t0 = _context69[\"catch\"](8);\n\n                if (!(_context69.t0 instanceof Error && _context69.t0.message.includes('skipped'))) {\n                  _context69.next = 21;\n                  break;\n                }\n\n                return _context69.abrupt(\"continue\", 4);\n\n              case 21:\n                throw _context69.t0;\n\n              case 22:\n                _context69.next = 4;\n                break;\n\n              case 24:\n                _context69.next = 26;\n                return this.getSlot('finalized');\n\n              case 26:\n                highestConfirmedRoot = _context69.sent;\n\n              case 27:\n                if ('before' in options) {\n                  _context69.next = 47;\n                  break;\n                }\n\n                endSlot++;\n\n                if (!(endSlot > highestConfirmedRoot)) {\n                  _context69.next = 31;\n                  break;\n                }\n\n                return _context69.abrupt(\"break\", 47);\n\n              case 31:\n                _context69.prev = 31;\n                _context69.next = 34;\n                return this.getConfirmedBlockSignatures(endSlot);\n\n              case 34:\n                _block = _context69.sent;\n\n                if (_block.signatures.length > 0) {\n                  options.before = _block.signatures[_block.signatures.length - 1].toString();\n                }\n\n                _context69.next = 45;\n                break;\n\n              case 38:\n                _context69.prev = 38;\n                _context69.t1 = _context69[\"catch\"](31);\n\n                if (!(_context69.t1 instanceof Error && _context69.t1.message.includes('skipped'))) {\n                  _context69.next = 44;\n                  break;\n                }\n\n                return _context69.abrupt(\"continue\", 27);\n\n              case 44:\n                throw _context69.t1;\n\n              case 45:\n                _context69.next = 27;\n                break;\n\n              case 47:\n                _context69.next = 49;\n                return this.getConfirmedSignaturesForAddress2(address, options);\n\n              case 49:\n                confirmedSignatureInfo = _context69.sent;\n                return _context69.abrupt(\"return\", confirmedSignatureInfo.map(function (info) {\n                  return info.signature;\n                }));\n\n              case 51:\n              case \"end\":\n                return _context69.stop();\n            }\n          }\n        }, _callee69, this, [[8, 15], [31, 38]]);\n      }));\n\n      function getConfirmedSignaturesForAddress(_x114, _x115, _x116) {\n        return _getConfirmedSignaturesForAddress.apply(this, arguments);\n      }\n\n      return getConfirmedSignaturesForAddress;\n    }()\n    /**\n     * Returns confirmed signatures for transactions involving an\n     * address backwards in time from the provided signature or most recent confirmed block\n     *\n     *\n     * @param address queried address\n     * @param options\n     */\n\n  }, {\n    key: \"getConfirmedSignaturesForAddress2\",\n    value: function () {\n      var _getConfirmedSignaturesForAddress2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee70(address, options, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee70$(_context70) {\n          while (1) {\n            switch (_context70.prev = _context70.next) {\n              case 0:\n                args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n                _context70.next = 3;\n                return this._rpcRequest('getConfirmedSignaturesForAddress2', args);\n\n              case 3:\n                unsafeRes = _context70.sent;\n                res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n\n                if (!('error' in res)) {\n                  _context70.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get confirmed signatures for address: ' + res.error.message);\n\n              case 7:\n                return _context70.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context70.stop();\n            }\n          }\n        }, _callee70, this);\n      }));\n\n      function getConfirmedSignaturesForAddress2(_x117, _x118, _x119) {\n        return _getConfirmedSignaturesForAddress2.apply(this, arguments);\n      }\n\n      return getConfirmedSignaturesForAddress2;\n    }()\n    /**\n     * Returns confirmed signatures for transactions involving an\n     * address backwards in time from the provided signature or most recent confirmed block\n     *\n     *\n     * @param address queried address\n     * @param options\n     */\n\n  }, {\n    key: \"getSignaturesForAddress\",\n    value: function () {\n      var _getSignaturesForAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee71(address, options, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee71$(_context71) {\n          while (1) {\n            switch (_context71.prev = _context71.next) {\n              case 0:\n                args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n                _context71.next = 3;\n                return this._rpcRequest('getSignaturesForAddress', args);\n\n              case 3:\n                unsafeRes = _context71.sent;\n                res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n\n                if (!('error' in res)) {\n                  _context71.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get signatures for address: ' + res.error.message);\n\n              case 7:\n                return _context71.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context71.stop();\n            }\n          }\n        }, _callee71, this);\n      }));\n\n      function getSignaturesForAddress(_x120, _x121, _x122) {\n        return _getSignaturesForAddress.apply(this, arguments);\n      }\n\n      return getSignaturesForAddress;\n    }()\n    /**\n     * Fetch the contents of a Nonce account from the cluster, return with context\n     */\n\n  }, {\n    key: \"getNonceAndContext\",\n    value: function () {\n      var _getNonceAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee72(nonceAccount, commitment) {\n        var _yield$this$getAccoun, context, accountInfo, value;\n\n        return _regeneratorRuntime.wrap(function _callee72$(_context72) {\n          while (1) {\n            switch (_context72.prev = _context72.next) {\n              case 0:\n                _context72.next = 2;\n                return this.getAccountInfoAndContext(nonceAccount, commitment);\n\n              case 2:\n                _yield$this$getAccoun = _context72.sent;\n                context = _yield$this$getAccoun.context;\n                accountInfo = _yield$this$getAccoun.value;\n                value = null;\n\n                if (accountInfo !== null) {\n                  value = NonceAccount.fromAccountData(accountInfo.data);\n                }\n\n                return _context72.abrupt(\"return\", {\n                  context: context,\n                  value: value\n                });\n\n              case 8:\n              case \"end\":\n                return _context72.stop();\n            }\n          }\n        }, _callee72, this);\n      }));\n\n      function getNonceAndContext(_x123, _x124) {\n        return _getNonceAndContext.apply(this, arguments);\n      }\n\n      return getNonceAndContext;\n    }()\n    /**\n     * Fetch the contents of a Nonce account from the cluster\n     */\n\n  }, {\n    key: \"getNonce\",\n    value: function () {\n      var _getNonce = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee73(nonceAccount, commitment) {\n        return _regeneratorRuntime.wrap(function _callee73$(_context73) {\n          while (1) {\n            switch (_context73.prev = _context73.next) {\n              case 0:\n                _context73.next = 2;\n                return this.getNonceAndContext(nonceAccount, commitment).then(function (x) {\n                  return x.value;\n                }).catch(function (e) {\n                  throw new Error('failed to get nonce for account ' + nonceAccount.toBase58() + ': ' + e);\n                });\n\n              case 2:\n                return _context73.abrupt(\"return\", _context73.sent);\n\n              case 3:\n              case \"end\":\n                return _context73.stop();\n            }\n          }\n        }, _callee73, this);\n      }));\n\n      function getNonce(_x125, _x126) {\n        return _getNonce.apply(this, arguments);\n      }\n\n      return getNonce;\n    }()\n    /**\n     * Request an allocation of lamports to the specified address\n     *\n     * ```typescript\n     * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n     *\n     * (async () => {\n     *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n     *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n     *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n     *   await connection.confirmTransaction(signature);\n     * })();\n     * ```\n     */\n\n  }, {\n    key: \"requestAirdrop\",\n    value: function () {\n      var _requestAirdrop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee74(to, lamports) {\n        var unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee74$(_context74) {\n          while (1) {\n            switch (_context74.prev = _context74.next) {\n              case 0:\n                _context74.next = 2;\n                return this._rpcRequest('requestAirdrop', [to.toBase58(), lamports]);\n\n              case 2:\n                unsafeRes = _context74.sent;\n                res = create(unsafeRes, RequestAirdropRpcResult);\n\n                if (!('error' in res)) {\n                  _context74.next = 6;\n                  break;\n                }\n\n                throw new Error('airdrop to ' + to.toBase58() + ' failed: ' + res.error.message);\n\n              case 6:\n                return _context74.abrupt(\"return\", res.result);\n\n              case 7:\n              case \"end\":\n                return _context74.stop();\n            }\n          }\n        }, _callee74, this);\n      }));\n\n      function requestAirdrop(_x127, _x128) {\n        return _requestAirdrop.apply(this, arguments);\n      }\n\n      return requestAirdrop;\n    }()\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_blockhashWithExpiryBlockHeight\",\n    value: function () {\n      var _blockhashWithExpiryBlockHeight2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee75(disableCache) {\n        var timeSinceFetch, expired;\n        return _regeneratorRuntime.wrap(function _callee75$(_context75) {\n          while (1) {\n            switch (_context75.prev = _context75.next) {\n              case 0:\n                if (disableCache) {\n                  _context75.next = 10;\n                  break;\n                }\n\n              case 1:\n                if (!this._pollingBlockhash) {\n                  _context75.next = 6;\n                  break;\n                }\n\n                _context75.next = 4;\n                return sleep(100);\n\n              case 4:\n                _context75.next = 1;\n                break;\n\n              case 6:\n                timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n                expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n\n                if (!(this._blockhashInfo.latestBlockhash !== null && !expired)) {\n                  _context75.next = 10;\n                  break;\n                }\n\n                return _context75.abrupt(\"return\", this._blockhashInfo.latestBlockhash);\n\n              case 10:\n                _context75.next = 12;\n                return this._pollNewBlockhash();\n\n              case 12:\n                return _context75.abrupt(\"return\", _context75.sent);\n\n              case 13:\n              case \"end\":\n                return _context75.stop();\n            }\n          }\n        }, _callee75, this);\n      }));\n\n      function _blockhashWithExpiryBlockHeight(_x129) {\n        return _blockhashWithExpiryBlockHeight2.apply(this, arguments);\n      }\n\n      return _blockhashWithExpiryBlockHeight;\n    }()\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_pollNewBlockhash\",\n    value: function () {\n      var _pollNewBlockhash2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee76() {\n        var startTime, cachedLatestBlockhash, cachedBlockhash, i, latestBlockhash;\n        return _regeneratorRuntime.wrap(function _callee76$(_context76) {\n          while (1) {\n            switch (_context76.prev = _context76.next) {\n              case 0:\n                this._pollingBlockhash = true;\n                _context76.prev = 1;\n                startTime = Date.now();\n                cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n                cachedBlockhash = cachedLatestBlockhash ? cachedLatestBlockhash.blockhash : null;\n                i = 0;\n\n              case 6:\n                if (!(i < 50)) {\n                  _context76.next = 18;\n                  break;\n                }\n\n                _context76.next = 9;\n                return this.getLatestBlockhash('finalized');\n\n              case 9:\n                latestBlockhash = _context76.sent;\n\n                if (!(cachedBlockhash !== latestBlockhash.blockhash)) {\n                  _context76.next = 13;\n                  break;\n                }\n\n                this._blockhashInfo = {\n                  latestBlockhash: latestBlockhash,\n                  lastFetch: Date.now(),\n                  transactionSignatures: [],\n                  simulatedSignatures: []\n                };\n                return _context76.abrupt(\"return\", latestBlockhash);\n\n              case 13:\n                _context76.next = 15;\n                return sleep(MS_PER_SLOT / 2);\n\n              case 15:\n                i++;\n                _context76.next = 6;\n                break;\n\n              case 18:\n                throw new Error(\"Unable to obtain a new blockhash after \".concat(Date.now() - startTime, \"ms\"));\n\n              case 19:\n                _context76.prev = 19;\n                this._pollingBlockhash = false;\n                return _context76.finish(19);\n\n              case 22:\n              case \"end\":\n                return _context76.stop();\n            }\n          }\n        }, _callee76, this, [[1,, 19, 22]]);\n      }));\n\n      function _pollNewBlockhash() {\n        return _pollNewBlockhash2.apply(this, arguments);\n      }\n\n      return _pollNewBlockhash;\n    }()\n    /**\n     * Simulate a transaction\n     */\n\n  }, {\n    key: \"simulateTransaction\",\n    value: function () {\n      var _simulateTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee77(transactionOrMessage, signers, includeAccounts) {\n        var transaction, originalTx, _transaction3, disableCache, _transaction4, latestBlockhash, signature, message, signData, wireTransaction, encodedTransaction, config, addresses, args, unsafeRes, res, logs, traceIndent, logTrace;\n\n        return _regeneratorRuntime.wrap(function _callee77$(_context77) {\n          while (1) {\n            switch (_context77.prev = _context77.next) {\n              case 0:\n                if (transactionOrMessage instanceof Transaction) {\n                  originalTx = transactionOrMessage;\n                  transaction = new Transaction();\n                  transaction.feePayer = originalTx.feePayer;\n                  transaction.instructions = transactionOrMessage.instructions;\n                  transaction.nonceInfo = originalTx.nonceInfo;\n                  transaction.signatures = originalTx.signatures;\n                } else {\n                  transaction = Transaction.populate(transactionOrMessage); // HACK: this function relies on mutating the populated transaction\n\n                  transaction._message = transaction._json = undefined;\n                }\n\n                if (!(transaction.nonceInfo && signers)) {\n                  _context77.next = 5;\n                  break;\n                }\n\n                (_transaction3 = transaction).sign.apply(_transaction3, _toConsumableArray(signers));\n\n                _context77.next = 25;\n                break;\n\n              case 5:\n                disableCache = this._disableBlockhashCaching;\n\n              case 6:\n                _context77.next = 8;\n                return this._blockhashWithExpiryBlockHeight(disableCache);\n\n              case 8:\n                latestBlockhash = _context77.sent;\n                transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n                transaction.recentBlockhash = latestBlockhash.blockhash;\n\n                if (signers) {\n                  _context77.next = 13;\n                  break;\n                }\n\n                return _context77.abrupt(\"break\", 25);\n\n              case 13:\n                (_transaction4 = transaction).sign.apply(_transaction4, _toConsumableArray(signers));\n\n                if (transaction.signature) {\n                  _context77.next = 16;\n                  break;\n                }\n\n                throw new Error('!signature');\n\n              case 16:\n                signature = transaction.signature.toString('base64');\n\n                if (!(!this._blockhashInfo.simulatedSignatures.includes(signature) && !this._blockhashInfo.transactionSignatures.includes(signature))) {\n                  _context77.next = 22;\n                  break;\n                }\n\n                // The signature of this transaction has not been seen before with the\n                // current recentBlockhash, all done. Let's break\n                this._blockhashInfo.simulatedSignatures.push(signature);\n\n                return _context77.abrupt(\"break\", 25);\n\n              case 22:\n                // This transaction would be treated as duplicate (its derived signature\n                // matched to one of already recorded signatures).\n                // So, we must fetch a new blockhash for a different signature by disabling\n                // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n                disableCache = true;\n\n              case 23:\n                _context77.next = 6;\n                break;\n\n              case 25:\n                message = transaction._compile();\n                signData = message.serialize();\n                wireTransaction = transaction._serialize(signData);\n                encodedTransaction = wireTransaction.toString('base64');\n                config = {\n                  encoding: 'base64',\n                  commitment: this.commitment\n                };\n\n                if (includeAccounts) {\n                  addresses = (Array.isArray(includeAccounts) ? includeAccounts : message.nonProgramIds()).map(function (key) {\n                    return key.toBase58();\n                  });\n                  config['accounts'] = {\n                    encoding: 'base64',\n                    addresses: addresses\n                  };\n                }\n\n                if (signers) {\n                  config.sigVerify = true;\n                }\n\n                args = [encodedTransaction, config];\n                _context77.next = 35;\n                return this._rpcRequest('simulateTransaction', args);\n\n              case 35:\n                unsafeRes = _context77.sent;\n                res = create(unsafeRes, SimulatedTransactionResponseStruct);\n\n                if (!('error' in res)) {\n                  _context77.next = 40;\n                  break;\n                }\n\n                if ('data' in res.error) {\n                  logs = res.error.data.logs;\n\n                  if (logs && Array.isArray(logs)) {\n                    traceIndent = '\\n    ';\n                    logTrace = traceIndent + logs.join(traceIndent);\n                    console.error(res.error.message, logTrace);\n                  }\n                }\n\n                throw new SendTransactionError('failed to simulate transaction: ' + res.error.message, logs);\n\n              case 40:\n                return _context77.abrupt(\"return\", res.result);\n\n              case 41:\n              case \"end\":\n                return _context77.stop();\n            }\n          }\n        }, _callee77, this);\n      }));\n\n      function simulateTransaction(_x130, _x131, _x132) {\n        return _simulateTransaction.apply(this, arguments);\n      }\n\n      return simulateTransaction;\n    }()\n    /**\n     * Sign and send a transaction\n     */\n\n  }, {\n    key: \"sendTransaction\",\n    value: function () {\n      var _sendTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee78(transaction, signers, options) {\n        var disableCache, latestBlockhash, signature, wireTransaction;\n        return _regeneratorRuntime.wrap(function _callee78$(_context78) {\n          while (1) {\n            switch (_context78.prev = _context78.next) {\n              case 0:\n                if (!transaction.nonceInfo) {\n                  _context78.next = 4;\n                  break;\n                }\n\n                transaction.sign.apply(transaction, _toConsumableArray(signers));\n                _context78.next = 22;\n                break;\n\n              case 4:\n                disableCache = this._disableBlockhashCaching;\n\n              case 5:\n                _context78.next = 7;\n                return this._blockhashWithExpiryBlockHeight(disableCache);\n\n              case 7:\n                latestBlockhash = _context78.sent;\n                transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n                transaction.recentBlockhash = latestBlockhash.blockhash;\n                transaction.sign.apply(transaction, _toConsumableArray(signers));\n\n                if (transaction.signature) {\n                  _context78.next = 13;\n                  break;\n                }\n\n                throw new Error('!signature');\n\n              case 13:\n                signature = transaction.signature.toString('base64');\n\n                if (this._blockhashInfo.transactionSignatures.includes(signature)) {\n                  _context78.next = 19;\n                  break;\n                }\n\n                // The signature of this transaction has not been seen before with the\n                // current recentBlockhash, all done. Let's break\n                this._blockhashInfo.transactionSignatures.push(signature);\n\n                return _context78.abrupt(\"break\", 22);\n\n              case 19:\n                // This transaction would be treated as duplicate (its derived signature\n                // matched to one of already recorded signatures).\n                // So, we must fetch a new blockhash for a different signature by disabling\n                // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n                disableCache = true;\n\n              case 20:\n                _context78.next = 5;\n                break;\n\n              case 22:\n                wireTransaction = transaction.serialize();\n                _context78.next = 25;\n                return this.sendRawTransaction(wireTransaction, options);\n\n              case 25:\n                return _context78.abrupt(\"return\", _context78.sent);\n\n              case 26:\n              case \"end\":\n                return _context78.stop();\n            }\n          }\n        }, _callee78, this);\n      }));\n\n      function sendTransaction(_x133, _x134, _x135) {\n        return _sendTransaction.apply(this, arguments);\n      }\n\n      return sendTransaction;\n    }()\n    /**\n     * Send a transaction that has already been signed and serialized into the\n     * wire format\n     */\n\n  }, {\n    key: \"sendRawTransaction\",\n    value: function () {\n      var _sendRawTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee79(rawTransaction, options) {\n        var encodedTransaction, result;\n        return _regeneratorRuntime.wrap(function _callee79$(_context79) {\n          while (1) {\n            switch (_context79.prev = _context79.next) {\n              case 0:\n                encodedTransaction = toBuffer(rawTransaction).toString('base64');\n                _context79.next = 3;\n                return this.sendEncodedTransaction(encodedTransaction, options);\n\n              case 3:\n                result = _context79.sent;\n                return _context79.abrupt(\"return\", result);\n\n              case 5:\n              case \"end\":\n                return _context79.stop();\n            }\n          }\n        }, _callee79, this);\n      }));\n\n      function sendRawTransaction(_x136, _x137) {\n        return _sendRawTransaction.apply(this, arguments);\n      }\n\n      return sendRawTransaction;\n    }()\n    /**\n     * Send a transaction that has already been signed, serialized into the\n     * wire format, and encoded as a base64 string\n     */\n\n  }, {\n    key: \"sendEncodedTransaction\",\n    value: function () {\n      var _sendEncodedTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee80(encodedTransaction, options) {\n        var config, skipPreflight, preflightCommitment, args, unsafeRes, res, logs;\n        return _regeneratorRuntime.wrap(function _callee80$(_context80) {\n          while (1) {\n            switch (_context80.prev = _context80.next) {\n              case 0:\n                config = {\n                  encoding: 'base64'\n                };\n                skipPreflight = options && options.skipPreflight;\n                preflightCommitment = options && options.preflightCommitment || this.commitment;\n\n                if (options && options.maxRetries) {\n                  config.maxRetries = options.maxRetries;\n                }\n\n                if (skipPreflight) {\n                  config.skipPreflight = skipPreflight;\n                }\n\n                if (preflightCommitment) {\n                  config.preflightCommitment = preflightCommitment;\n                }\n\n                args = [encodedTransaction, config];\n                _context80.next = 9;\n                return this._rpcRequest('sendTransaction', args);\n\n              case 9:\n                unsafeRes = _context80.sent;\n                res = create(unsafeRes, SendTransactionRpcResult);\n\n                if (!('error' in res)) {\n                  _context80.next = 14;\n                  break;\n                }\n\n                if ('data' in res.error) {\n                  logs = res.error.data.logs;\n                }\n\n                throw new SendTransactionError('failed to send transaction: ' + res.error.message, logs);\n\n              case 14:\n                return _context80.abrupt(\"return\", res.result);\n\n              case 15:\n              case \"end\":\n                return _context80.stop();\n            }\n          }\n        }, _callee80, this);\n      }));\n\n      function sendEncodedTransaction(_x138, _x139) {\n        return _sendEncodedTransaction.apply(this, arguments);\n      }\n\n      return sendEncodedTransaction;\n    }()\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_wsOnOpen\",\n    value: function _wsOnOpen() {\n      var _this14 = this;\n\n      this._rpcWebSocketConnected = true;\n      this._rpcWebSocketHeartbeat = setInterval(function () {\n        // Ping server every 5s to prevent idle timeouts\n        _this14._rpcWebSocket.notify('ping').catch(function () {});\n      }, 5000);\n\n      this._updateSubscriptions();\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_wsOnError\",\n    value: function _wsOnError(err) {\n      this._rpcWebSocketConnected = false;\n      console.error('ws error:', err.message);\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_wsOnClose\",\n    value: function _wsOnClose(code) {\n      var _this15 = this;\n\n      this._rpcWebSocketConnected = false;\n      this._rpcWebSocketGeneration++;\n\n      if (this._rpcWebSocketHeartbeat) {\n        clearInterval(this._rpcWebSocketHeartbeat);\n        this._rpcWebSocketHeartbeat = null;\n      }\n\n      if (code === 1000) {\n        // explicit close, check if any subscriptions have been made since close\n        this._updateSubscriptions();\n\n        return;\n      } // implicit close, prepare subscriptions for auto-reconnect\n\n\n      this._subscriptionCallbacksByServerSubscriptionId = {};\n      Object.entries(this._subscriptionsByHash).forEach(function (_ref12) {\n        var _ref13 = _slicedToArray(_ref12, 2),\n            hash = _ref13[0],\n            subscription = _ref13[1];\n\n        _this15._subscriptionsByHash[hash] = _objectSpread(_objectSpread({}, subscription), {}, {\n          state: 'pending'\n        });\n      });\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_updateSubscriptions\",\n    value: function () {\n      var _updateSubscriptions2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee84() {\n        var _this16 = this;\n\n        var activeWebSocketGeneration, isCurrentConnectionStillActive;\n        return _regeneratorRuntime.wrap(function _callee84$(_context84) {\n          while (1) {\n            switch (_context84.prev = _context84.next) {\n              case 0:\n                if (!(Object.keys(this._subscriptionsByHash).length === 0)) {\n                  _context84.next = 3;\n                  break;\n                }\n\n                if (this._rpcWebSocketConnected) {\n                  this._rpcWebSocketConnected = false;\n                  this._rpcWebSocketIdleTimeout = setTimeout(function () {\n                    _this16._rpcWebSocketIdleTimeout = null;\n\n                    try {\n                      _this16._rpcWebSocket.close();\n                    } catch (err) {\n                      // swallow error if socket has already been closed.\n                      if (err instanceof Error) {\n                        console.log(\"Error when closing socket connection: \".concat(err.message));\n                      }\n                    }\n                  }, 500);\n                }\n\n                return _context84.abrupt(\"return\");\n\n              case 3:\n                if (this._rpcWebSocketIdleTimeout !== null) {\n                  clearTimeout(this._rpcWebSocketIdleTimeout);\n                  this._rpcWebSocketIdleTimeout = null;\n                  this._rpcWebSocketConnected = true;\n                }\n\n                if (this._rpcWebSocketConnected) {\n                  _context84.next = 7;\n                  break;\n                }\n\n                this._rpcWebSocket.connect();\n\n                return _context84.abrupt(\"return\");\n\n              case 7:\n                activeWebSocketGeneration = this._rpcWebSocketGeneration;\n\n                isCurrentConnectionStillActive = function isCurrentConnectionStillActive() {\n                  return activeWebSocketGeneration === _this16._rpcWebSocketGeneration;\n                };\n\n                _context84.next = 11;\n                return Promise.all( // Don't be tempted to change this to `Object.entries`. We call\n                // `_updateSubscriptions` recursively when processing the state,\n                // so it's important that we look up the *current* version of\n                // each subscription, every time we process a hash.\n                Object.keys(this._subscriptionsByHash).map( /*#__PURE__*/function () {\n                  var _ref14 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee83(hash) {\n                    var subscription;\n                    return _regeneratorRuntime.wrap(function _callee83$(_context83) {\n                      while (1) {\n                        switch (_context83.prev = _context83.next) {\n                          case 0:\n                            subscription = _this16._subscriptionsByHash[hash];\n\n                            if (!(subscription === undefined)) {\n                              _context83.next = 3;\n                              break;\n                            }\n\n                            return _context83.abrupt(\"return\");\n\n                          case 3:\n                            _context83.t0 = subscription.state;\n                            _context83.next = _context83.t0 === 'pending' ? 6 : _context83.t0 === 'unsubscribed' ? 6 : _context83.t0 === 'subscribed' ? 15 : 19;\n                            break;\n\n                          case 6:\n                            if (!(subscription.callbacks.size === 0)) {\n                              _context83.next = 12;\n                              break;\n                            }\n\n                            /**\n                             * You can end up here when:\n                             *\n                             * - a subscription has recently unsubscribed\n                             *   without having new callbacks added to it\n                             *   while the unsubscribe was in flight, or\n                             * - when a pending subscription has its\n                             *   listeners removed before a request was\n                             *   sent to the server.\n                             *\n                             * Being that nobody is interested in this\n                             * subscription any longer, delete it.\n                             */\n                            delete _this16._subscriptionsByHash[hash];\n\n                            if (subscription.state === 'unsubscribed') {\n                              delete _this16._subscriptionCallbacksByServerSubscriptionId[subscription.serverSubscriptionId];\n                            }\n\n                            _context83.next = 11;\n                            return _this16._updateSubscriptions();\n\n                          case 11:\n                            return _context83.abrupt(\"return\");\n\n                          case 12:\n                            _context83.next = 14;\n                            return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee81() {\n                              var args, method, serverSubscriptionId;\n                              return _regeneratorRuntime.wrap(function _callee81$(_context81) {\n                                while (1) {\n                                  switch (_context81.prev = _context81.next) {\n                                    case 0:\n                                      args = subscription.args, method = subscription.method;\n                                      _context81.prev = 1;\n                                      _this16._subscriptionsByHash[hash] = _objectSpread(_objectSpread({}, subscription), {}, {\n                                        state: 'subscribing'\n                                      });\n                                      _context81.next = 5;\n                                      return _this16._rpcWebSocket.call(method, args);\n\n                                    case 5:\n                                      serverSubscriptionId = _context81.sent;\n                                      _this16._subscriptionsByHash[hash] = _objectSpread(_objectSpread({}, subscription), {}, {\n                                        serverSubscriptionId: serverSubscriptionId,\n                                        state: 'subscribed'\n                                      });\n                                      _this16._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId] = subscription.callbacks;\n                                      _context81.next = 10;\n                                      return _this16._updateSubscriptions();\n\n                                    case 10:\n                                      _context81.next = 20;\n                                      break;\n\n                                    case 12:\n                                      _context81.prev = 12;\n                                      _context81.t0 = _context81[\"catch\"](1);\n\n                                      if (_context81.t0 instanceof Error) {\n                                        console.error(\"\".concat(method, \" error for argument\"), args, _context81.t0.message);\n                                      }\n\n                                      if (isCurrentConnectionStillActive()) {\n                                        _context81.next = 17;\n                                        break;\n                                      }\n\n                                      return _context81.abrupt(\"return\");\n\n                                    case 17:\n                                      // TODO: Maybe add an 'errored' state or a retry limit?\n                                      _this16._subscriptionsByHash[hash] = _objectSpread(_objectSpread({}, subscription), {}, {\n                                        state: 'pending'\n                                      });\n                                      _context81.next = 20;\n                                      return _this16._updateSubscriptions();\n\n                                    case 20:\n                                    case \"end\":\n                                      return _context81.stop();\n                                  }\n                                }\n                              }, _callee81, null, [[1, 12]]);\n                            }))();\n\n                          case 14:\n                            return _context83.abrupt(\"break\", 19);\n\n                          case 15:\n                            if (!(subscription.callbacks.size === 0)) {\n                              _context83.next = 18;\n                              break;\n                            }\n\n                            _context83.next = 18;\n                            return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee82() {\n                              var serverSubscriptionId, unsubscribeMethod;\n                              return _regeneratorRuntime.wrap(function _callee82$(_context82) {\n                                while (1) {\n                                  switch (_context82.prev = _context82.next) {\n                                    case 0:\n                                      serverSubscriptionId = subscription.serverSubscriptionId, unsubscribeMethod = subscription.unsubscribeMethod;\n\n                                      if (!_this16._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)) {\n                                        _context82.next = 5;\n                                        break;\n                                      }\n\n                                      /**\n                                       * Special case.\n                                       * If we're dealing with a subscription that has been auto-\n                                       * disposed by the RPC, then we can skip the RPC call to\n                                       * tear down the subscription here.\n                                       *\n                                       * NOTE: There is a proposal to eliminate this special case, here:\n                                       * https://github.com/solana-labs/solana/issues/18892\n                                       */\n                                      _this16._subscriptionsAutoDisposedByRpc.delete(serverSubscriptionId);\n\n                                      _context82.next = 20;\n                                      break;\n\n                                    case 5:\n                                      _this16._subscriptionsByHash[hash] = _objectSpread(_objectSpread({}, subscription), {}, {\n                                        state: 'unsubscribing'\n                                      });\n                                      _context82.prev = 6;\n                                      _context82.next = 9;\n                                      return _this16._rpcWebSocket.call(unsubscribeMethod, [serverSubscriptionId]);\n\n                                    case 9:\n                                      _context82.next = 20;\n                                      break;\n\n                                    case 11:\n                                      _context82.prev = 11;\n                                      _context82.t0 = _context82[\"catch\"](6);\n\n                                      if (_context82.t0 instanceof Error) {\n                                        console.error(\"\".concat(unsubscribeMethod, \" error:\"), _context82.t0.message);\n                                      }\n\n                                      if (isCurrentConnectionStillActive()) {\n                                        _context82.next = 16;\n                                        break;\n                                      }\n\n                                      return _context82.abrupt(\"return\");\n\n                                    case 16:\n                                      // TODO: Maybe add an 'errored' state or a retry limit?\n                                      _this16._subscriptionsByHash[hash] = _objectSpread(_objectSpread({}, subscription), {}, {\n                                        state: 'subscribed'\n                                      });\n                                      _context82.next = 19;\n                                      return _this16._updateSubscriptions();\n\n                                    case 19:\n                                      return _context82.abrupt(\"return\");\n\n                                    case 20:\n                                      _this16._subscriptionsByHash[hash] = _objectSpread(_objectSpread({}, subscription), {}, {\n                                        state: 'unsubscribed'\n                                      });\n                                      _context82.next = 23;\n                                      return _this16._updateSubscriptions();\n\n                                    case 23:\n                                    case \"end\":\n                                      return _context82.stop();\n                                  }\n                                }\n                              }, _callee82, null, [[6, 11]]);\n                            }))();\n\n                          case 18:\n                            return _context83.abrupt(\"break\", 19);\n\n                          case 19:\n                          case \"end\":\n                            return _context83.stop();\n                        }\n                      }\n                    }, _callee83);\n                  }));\n\n                  return function (_x140) {\n                    return _ref14.apply(this, arguments);\n                  };\n                }()));\n\n              case 11:\n              case \"end\":\n                return _context84.stop();\n            }\n          }\n        }, _callee84, this);\n      }));\n\n      function _updateSubscriptions() {\n        return _updateSubscriptions2.apply(this, arguments);\n      }\n\n      return _updateSubscriptions;\n    }()\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_handleServerNotification\",\n    value: function _handleServerNotification(serverSubscriptionId, callbackArgs) {\n      var callbacks = this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n\n      if (callbacks === undefined) {\n        return;\n      }\n\n      callbacks.forEach(function (cb) {\n        try {\n          cb.apply(void 0, _toConsumableArray(callbackArgs));\n        } catch (e) {\n          console.error(e);\n        }\n      });\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_wsOnAccountNotification\",\n    value: function _wsOnAccountNotification(notification) {\n      var _create = create(notification, AccountNotificationResult),\n          result = _create.result,\n          subscription = _create.subscription;\n\n      this._handleServerNotification(subscription, [result.value, result.context]);\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_makeSubscription\",\n    value: function _makeSubscription(subscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args) {\n      var _this17 = this;\n\n      var clientSubscriptionId = this._nextClientSubscriptionId++;\n      var hash = fastStableStringify$1([subscriptionConfig.method, args], true\n      /* isArrayProp */\n      );\n      var existingSubscription = this._subscriptionsByHash[hash];\n\n      if (existingSubscription === undefined) {\n        this._subscriptionsByHash[hash] = _objectSpread(_objectSpread({}, subscriptionConfig), {}, {\n          args: args,\n          callbacks: new Set([subscriptionConfig.callback]),\n          state: 'pending'\n        });\n      } else {\n        existingSubscription.callbacks.add(subscriptionConfig.callback);\n      }\n\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId] = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee85() {\n        var subscription;\n        return _regeneratorRuntime.wrap(function _callee85$(_context85) {\n          while (1) {\n            switch (_context85.prev = _context85.next) {\n              case 0:\n                delete _this17._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n                subscription = _this17._subscriptionsByHash[hash];\n                assert(subscription !== undefined, \"Could not find a `Subscription` when tearing down client subscription #\".concat(clientSubscriptionId));\n                subscription.callbacks.delete(subscriptionConfig.callback);\n                _context85.next = 6;\n                return _this17._updateSubscriptions();\n\n              case 6:\n              case \"end\":\n                return _context85.stop();\n            }\n          }\n        }, _callee85);\n      }));\n\n      this._updateSubscriptions();\n\n      return clientSubscriptionId;\n    }\n    /**\n     * Register a callback to be invoked whenever the specified account changes\n     *\n     * @param publicKey Public key of the account to monitor\n     * @param callback Function to invoke whenever the account is changed\n     * @param commitment Specify the commitment level account changes must reach before notification\n     * @return subscription id\n     */\n\n  }, {\n    key: \"onAccountChange\",\n    value: function onAccountChange(publicKey, callback, commitment) {\n      var args = this._buildArgs([publicKey.toBase58()], commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64');\n\n      return this._makeSubscription({\n        callback: callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe'\n      }, args);\n    }\n    /**\n     * Deregister an account notification callback\n     *\n     * @param id client subscription id to deregister\n     */\n\n  }, {\n    key: \"removeAccountChangeListener\",\n    value: function () {\n      var _removeAccountChangeListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee86(clientSubscriptionId) {\n        return _regeneratorRuntime.wrap(function _callee86$(_context86) {\n          while (1) {\n            switch (_context86.prev = _context86.next) {\n              case 0:\n                _context86.next = 2;\n                return this._unsubscribeClientSubscription(clientSubscriptionId, 'account change');\n\n              case 2:\n              case \"end\":\n                return _context86.stop();\n            }\n          }\n        }, _callee86, this);\n      }));\n\n      function removeAccountChangeListener(_x141) {\n        return _removeAccountChangeListener.apply(this, arguments);\n      }\n\n      return removeAccountChangeListener;\n    }()\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_wsOnProgramAccountNotification\",\n    value: function _wsOnProgramAccountNotification(notification) {\n      var _create2 = create(notification, ProgramAccountNotificationResult),\n          result = _create2.result,\n          subscription = _create2.subscription;\n\n      this._handleServerNotification(subscription, [{\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account\n      }, result.context]);\n    }\n    /**\n     * Register a callback to be invoked whenever accounts owned by the\n     * specified program change\n     *\n     * @param programId Public key of the program to monitor\n     * @param callback Function to invoke whenever the account is changed\n     * @param commitment Specify the commitment level account changes must reach before notification\n     * @param filters The program account filters to pass into the RPC method\n     * @return subscription id\n     */\n\n  }, {\n    key: \"onProgramAccountChange\",\n    value: function onProgramAccountChange(programId, callback, commitment, filters) {\n      var args = this._buildArgs([programId.toBase58()], commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64'\n      /* encoding */\n      , filters ? {\n        filters: filters\n      } : undefined\n      /* extra */\n      );\n\n      return this._makeSubscription({\n        callback: callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe'\n      }, args);\n    }\n    /**\n     * Deregister an account notification callback\n     *\n     * @param id client subscription id to deregister\n     */\n\n  }, {\n    key: \"removeProgramAccountChangeListener\",\n    value: function () {\n      var _removeProgramAccountChangeListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee87(clientSubscriptionId) {\n        return _regeneratorRuntime.wrap(function _callee87$(_context87) {\n          while (1) {\n            switch (_context87.prev = _context87.next) {\n              case 0:\n                _context87.next = 2;\n                return this._unsubscribeClientSubscription(clientSubscriptionId, 'program account change');\n\n              case 2:\n              case \"end\":\n                return _context87.stop();\n            }\n          }\n        }, _callee87, this);\n      }));\n\n      function removeProgramAccountChangeListener(_x142) {\n        return _removeProgramAccountChangeListener.apply(this, arguments);\n      }\n\n      return removeProgramAccountChangeListener;\n    }()\n    /**\n     * Registers a callback to be invoked whenever logs are emitted.\n     */\n\n  }, {\n    key: \"onLogs\",\n    value: function onLogs(filter, callback, commitment) {\n      var args = this._buildArgs([typeof filter === 'object' ? {\n        mentions: [filter.toString()]\n      } : filter], commitment || this._commitment || 'finalized' // Apply connection/server default.\n      );\n\n      return this._makeSubscription({\n        callback: callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe'\n      }, args);\n    }\n    /**\n     * Deregister a logs callback.\n     *\n     * @param id client subscription id to deregister.\n     */\n\n  }, {\n    key: \"removeOnLogsListener\",\n    value: function () {\n      var _removeOnLogsListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee88(clientSubscriptionId) {\n        return _regeneratorRuntime.wrap(function _callee88$(_context88) {\n          while (1) {\n            switch (_context88.prev = _context88.next) {\n              case 0:\n                _context88.next = 2;\n                return this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n\n              case 2:\n              case \"end\":\n                return _context88.stop();\n            }\n          }\n        }, _callee88, this);\n      }));\n\n      function removeOnLogsListener(_x143) {\n        return _removeOnLogsListener.apply(this, arguments);\n      }\n\n      return removeOnLogsListener;\n    }()\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_wsOnLogsNotification\",\n    value: function _wsOnLogsNotification(notification) {\n      var _create3 = create(notification, LogsNotificationResult),\n          result = _create3.result,\n          subscription = _create3.subscription;\n\n      this._handleServerNotification(subscription, [result.value, result.context]);\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_wsOnSlotNotification\",\n    value: function _wsOnSlotNotification(notification) {\n      var _create4 = create(notification, SlotNotificationResult),\n          result = _create4.result,\n          subscription = _create4.subscription;\n\n      this._handleServerNotification(subscription, [result]);\n    }\n    /**\n     * Register a callback to be invoked upon slot changes\n     *\n     * @param callback Function to invoke whenever the slot changes\n     * @return subscription id\n     */\n\n  }, {\n    key: \"onSlotChange\",\n    value: function onSlotChange(callback) {\n      return this._makeSubscription({\n        callback: callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe'\n      }, []\n      /* args */\n      );\n    }\n    /**\n     * Deregister a slot notification callback\n     *\n     * @param id client subscription id to deregister\n     */\n\n  }, {\n    key: \"removeSlotChangeListener\",\n    value: function () {\n      var _removeSlotChangeListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee89(clientSubscriptionId) {\n        return _regeneratorRuntime.wrap(function _callee89$(_context89) {\n          while (1) {\n            switch (_context89.prev = _context89.next) {\n              case 0:\n                _context89.next = 2;\n                return this._unsubscribeClientSubscription(clientSubscriptionId, 'slot change');\n\n              case 2:\n              case \"end\":\n                return _context89.stop();\n            }\n          }\n        }, _callee89, this);\n      }));\n\n      function removeSlotChangeListener(_x144) {\n        return _removeSlotChangeListener.apply(this, arguments);\n      }\n\n      return removeSlotChangeListener;\n    }()\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_wsOnSlotUpdatesNotification\",\n    value: function _wsOnSlotUpdatesNotification(notification) {\n      var _create5 = create(notification, SlotUpdateNotificationResult),\n          result = _create5.result,\n          subscription = _create5.subscription;\n\n      this._handleServerNotification(subscription, [result]);\n    }\n    /**\n     * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n     * may be useful to track live progress of a cluster.\n     *\n     * @param callback Function to invoke whenever the slot updates\n     * @return subscription id\n     */\n\n  }, {\n    key: \"onSlotUpdate\",\n    value: function onSlotUpdate(callback) {\n      return this._makeSubscription({\n        callback: callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe'\n      }, []\n      /* args */\n      );\n    }\n    /**\n     * Deregister a slot update notification callback\n     *\n     * @param id client subscription id to deregister\n     */\n\n  }, {\n    key: \"removeSlotUpdateListener\",\n    value: function () {\n      var _removeSlotUpdateListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee90(clientSubscriptionId) {\n        return _regeneratorRuntime.wrap(function _callee90$(_context90) {\n          while (1) {\n            switch (_context90.prev = _context90.next) {\n              case 0:\n                _context90.next = 2;\n                return this._unsubscribeClientSubscription(clientSubscriptionId, 'slot update');\n\n              case 2:\n              case \"end\":\n                return _context90.stop();\n            }\n          }\n        }, _callee90, this);\n      }));\n\n      function removeSlotUpdateListener(_x145) {\n        return _removeSlotUpdateListener.apply(this, arguments);\n      }\n\n      return removeSlotUpdateListener;\n    }()\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_unsubscribeClientSubscription\",\n    value: function () {\n      var _unsubscribeClientSubscription2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee91(clientSubscriptionId, subscriptionName) {\n        var dispose;\n        return _regeneratorRuntime.wrap(function _callee91$(_context91) {\n          while (1) {\n            switch (_context91.prev = _context91.next) {\n              case 0:\n                dispose = this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n\n                if (!dispose) {\n                  _context91.next = 6;\n                  break;\n                }\n\n                _context91.next = 4;\n                return dispose();\n\n              case 4:\n                _context91.next = 7;\n                break;\n\n              case 6:\n                console.warn('Ignored unsubscribe request because an active subscription with id ' + \"`\".concat(clientSubscriptionId, \"` for '\").concat(subscriptionName, \"' events \") + 'could not be found.');\n\n              case 7:\n              case \"end\":\n                return _context91.stop();\n            }\n          }\n        }, _callee91, this);\n      }));\n\n      function _unsubscribeClientSubscription(_x146, _x147) {\n        return _unsubscribeClientSubscription2.apply(this, arguments);\n      }\n\n      return _unsubscribeClientSubscription;\n    }()\n  }, {\n    key: \"_buildArgs\",\n    value: function _buildArgs(args, override, encoding, extra) {\n      var commitment = override || this._commitment;\n\n      if (commitment || encoding || extra) {\n        var options = {};\n\n        if (encoding) {\n          options.encoding = encoding;\n        }\n\n        if (commitment) {\n          options.commitment = commitment;\n        }\n\n        if (extra) {\n          options = Object.assign(options, extra);\n        }\n\n        args.push(options);\n      }\n\n      return args;\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_buildArgsAtLeastConfirmed\",\n    value: function _buildArgsAtLeastConfirmed(args, override, encoding, extra) {\n      var commitment = override || this._commitment;\n\n      if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n        throw new Error('Using Connection with default commitment: `' + this._commitment + '`, but method requires at least `confirmed`');\n      }\n\n      return this._buildArgs(args, override, encoding, extra);\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_wsOnSignatureNotification\",\n    value: function _wsOnSignatureNotification(notification) {\n      var _create6 = create(notification, SignatureNotificationResult),\n          result = _create6.result,\n          subscription = _create6.subscription;\n\n      if (result.value !== 'receivedSignature') {\n        /**\n         * Special case.\n         * After a signature is processed, RPCs automatically dispose of the\n         * subscription on the server side. We need to track which of these\n         * subscriptions have been disposed in such a way, so that we know\n         * whether the client is dealing with a not-yet-processed signature\n         * (in which case we must tear down the server subscription) or an\n         * already-processed signature (in which case the client can simply\n         * clear out the subscription locally without telling the server).\n         *\n         * NOTE: There is a proposal to eliminate this special case, here:\n         * https://github.com/solana-labs/solana/issues/18892\n         */\n        this._subscriptionsAutoDisposedByRpc.add(subscription);\n      }\n\n      this._handleServerNotification(subscription, result.value === 'receivedSignature' ? [{\n        type: 'received'\n      }, result.context] : [{\n        type: 'status',\n        result: result.value\n      }, result.context]);\n    }\n    /**\n     * Register a callback to be invoked upon signature updates\n     *\n     * @param signature Transaction signature string in base 58\n     * @param callback Function to invoke on signature notifications\n     * @param commitment Specify the commitment level signature must reach before notification\n     * @return subscription id\n     */\n\n  }, {\n    key: \"onSignature\",\n    value: function onSignature(signature, _callback, commitment) {\n      var _this18 = this;\n\n      var args = this._buildArgs([signature], commitment || this._commitment || 'finalized' // Apply connection/server default.\n      );\n\n      var clientSubscriptionId = this._makeSubscription({\n        callback: function callback(notification, context) {\n          if (notification.type === 'status') {\n            _callback(notification.result, context); // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n\n\n            try {\n              _this18.removeSignatureListener(clientSubscriptionId); // eslint-disable-next-line no-empty\n\n            } catch (_err) {// Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe'\n      }, args);\n\n      return clientSubscriptionId;\n    }\n    /**\n     * Register a callback to be invoked when a transaction is\n     * received and/or processed.\n     *\n     * @param signature Transaction signature string in base 58\n     * @param callback Function to invoke on signature notifications\n     * @param options Enable received notifications and set the commitment\n     *   level that signature must reach before notification\n     * @return subscription id\n     */\n\n  }, {\n    key: \"onSignatureWithOptions\",\n    value: function onSignatureWithOptions(signature, _callback2, options) {\n      var _this19 = this;\n\n      var _options$commitment = _objectSpread(_objectSpread({}, options), {}, {\n        commitment: options && options.commitment || this._commitment || 'finalized' // Apply connection/server default.\n\n      }),\n          commitment = _options$commitment.commitment,\n          extra = _objectWithoutProperties(_options$commitment, _excluded2);\n\n      var args = this._buildArgs([signature], commitment, undefined\n      /* encoding */\n      , extra);\n\n      var clientSubscriptionId = this._makeSubscription({\n        callback: function callback(notification, context) {\n          _callback2(notification, context); // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n\n\n          try {\n            _this19.removeSignatureListener(clientSubscriptionId); // eslint-disable-next-line no-empty\n\n          } catch (_err) {// Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe'\n      }, args);\n\n      return clientSubscriptionId;\n    }\n    /**\n     * Deregister a signature notification callback\n     *\n     * @param id client subscription id to deregister\n     */\n\n  }, {\n    key: \"removeSignatureListener\",\n    value: function () {\n      var _removeSignatureListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee92(clientSubscriptionId) {\n        return _regeneratorRuntime.wrap(function _callee92$(_context92) {\n          while (1) {\n            switch (_context92.prev = _context92.next) {\n              case 0:\n                _context92.next = 2;\n                return this._unsubscribeClientSubscription(clientSubscriptionId, 'signature result');\n\n              case 2:\n              case \"end\":\n                return _context92.stop();\n            }\n          }\n        }, _callee92, this);\n      }));\n\n      function removeSignatureListener(_x148) {\n        return _removeSignatureListener.apply(this, arguments);\n      }\n\n      return removeSignatureListener;\n    }()\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_wsOnRootNotification\",\n    value: function _wsOnRootNotification(notification) {\n      var _create7 = create(notification, RootNotificationResult),\n          result = _create7.result,\n          subscription = _create7.subscription;\n\n      this._handleServerNotification(subscription, [result]);\n    }\n    /**\n     * Register a callback to be invoked upon root changes\n     *\n     * @param callback Function to invoke whenever the root changes\n     * @return subscription id\n     */\n\n  }, {\n    key: \"onRootChange\",\n    value: function onRootChange(callback) {\n      return this._makeSubscription({\n        callback: callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe'\n      }, []\n      /* args */\n      );\n    }\n    /**\n     * Deregister a root notification callback\n     *\n     * @param id client subscription id to deregister\n     */\n\n  }, {\n    key: \"removeRootChangeListener\",\n    value: function () {\n      var _removeRootChangeListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee93(clientSubscriptionId) {\n        return _regeneratorRuntime.wrap(function _callee93$(_context93) {\n          while (1) {\n            switch (_context93.prev = _context93.next) {\n              case 0:\n                _context93.next = 2;\n                return this._unsubscribeClientSubscription(clientSubscriptionId, 'root change');\n\n              case 2:\n              case \"end\":\n                return _context93.stop();\n            }\n          }\n        }, _callee93, this);\n      }));\n\n      function removeRootChangeListener(_x149) {\n        return _removeRootChangeListener.apply(this, arguments);\n      }\n\n      return removeRootChangeListener;\n    }()\n  }]);\n\n  return Connection;\n}();\n/**\n * Keypair signer interface\n */\n\n/**\n * An account keypair used for signing transactions.\n */\n\n\nvar Keypair = /*#__PURE__*/function () {\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  function Keypair(keypair) {\n    _classCallCheck(this, Keypair);\n\n    this._keypair = void 0;\n\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n  /**\n   * Generate a new random keypair\n   */\n\n\n  _createClass(Keypair, [{\n    key: \"publicKey\",\n    get:\n    /**\n     * The public key for this keypair\n     */\n    function get() {\n      return new PublicKey(this._keypair.publicKey);\n    }\n    /**\n     * The raw secret key for this keypair\n     */\n\n  }, {\n    key: \"secretKey\",\n    get: function get() {\n      return this._keypair.secretKey;\n    }\n  }], [{\n    key: \"generate\",\n    value: function generate() {\n      return new Keypair(nacl.sign.keyPair());\n    }\n    /**\n     * Create a keypair from a raw secret key byte array.\n     *\n     * This method should only be used to recreate a keypair from a previously\n     * generated secret key. Generating keypairs from a random seed should be done\n     * with the {@link Keypair.fromSeed} method.\n     *\n     * @throws error if the provided secret key is invalid and validation is not skipped.\n     *\n     * @param secretKey secret key byte array\n     * @param options: skip secret key validation\n     */\n\n  }, {\n    key: \"fromSecretKey\",\n    value: function fromSecretKey(secretKey, options) {\n      var keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n\n      if (!options || !options.skipValidation) {\n        var encoder = new TextEncoder();\n        var signData = encoder.encode('@solana/web3.js-validation-v1');\n        var signature = nacl.sign.detached(signData, keypair.secretKey);\n\n        if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n\n      return new Keypair(keypair);\n    }\n    /**\n     * Generate a keypair from a 32 byte seed.\n     *\n     * @param seed seed byte array\n     */\n\n  }, {\n    key: \"fromSeed\",\n    value: function fromSeed(seed) {\n      return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n    }\n  }]);\n\n  return Keypair;\n}();\n\nvar PRIVATE_KEY_BYTES$1 = 64;\nvar PUBLIC_KEY_BYTES$1 = 32;\nvar SIGNATURE_BYTES = 64;\n/**\n * Params for creating an ed25519 instruction using a public key\n */\n\nvar ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u8('padding'), BufferLayout.u16('signatureOffset'), BufferLayout.u16('signatureInstructionIndex'), BufferLayout.u16('publicKeyOffset'), BufferLayout.u16('publicKeyInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u16('messageInstructionIndex')]);\n\nvar Ed25519Program = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function Ed25519Program() {\n    _classCallCheck(this, Ed25519Program);\n  }\n  /**\n   * Public key that identifies the ed25519 program\n   */\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n\n\n  _createClass(Ed25519Program, null, [{\n    key: \"createInstructionWithPublicKey\",\n    value: function createInstructionWithPublicKey(params) {\n      var publicKey = params.publicKey,\n          message = params.message,\n          signature = params.signature,\n          instructionIndex = params.instructionIndex;\n      assert(publicKey.length === PUBLIC_KEY_BYTES$1, \"Public Key must be \".concat(PUBLIC_KEY_BYTES$1, \" bytes but received \").concat(publicKey.length, \" bytes\"));\n      assert(signature.length === SIGNATURE_BYTES, \"Signature must be \".concat(SIGNATURE_BYTES, \" bytes but received \").concat(signature.length, \" bytes\"));\n      var publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n      var signatureOffset = publicKeyOffset + publicKey.length;\n      var messageDataOffset = signatureOffset + signature.length;\n      var numSignatures = 1;\n      var instructionData = Buffer.alloc(messageDataOffset + message.length);\n      var index = instructionIndex == null ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n      : instructionIndex;\n      ED25519_INSTRUCTION_LAYOUT.encode({\n        numSignatures: numSignatures,\n        padding: 0,\n        signatureOffset: signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset: publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset: messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index\n      }, instructionData);\n      instructionData.fill(publicKey, publicKeyOffset);\n      instructionData.fill(signature, signatureOffset);\n      instructionData.fill(message, messageDataOffset);\n      return new TransactionInstruction({\n        keys: [],\n        programId: Ed25519Program.programId,\n        data: instructionData\n      });\n    }\n    /**\n     * Create an ed25519 instruction with a private key. The private key\n     * must be a buffer that is 64 bytes long.\n     */\n\n  }, {\n    key: \"createInstructionWithPrivateKey\",\n    value: function createInstructionWithPrivateKey(params) {\n      var privateKey = params.privateKey,\n          message = params.message,\n          instructionIndex = params.instructionIndex;\n      assert(privateKey.length === PRIVATE_KEY_BYTES$1, \"Private key must be \".concat(PRIVATE_KEY_BYTES$1, \" bytes but received \").concat(privateKey.length, \" bytes\"));\n\n      try {\n        var keypair = Keypair.fromSecretKey(privateKey);\n\n        var _publicKey2 = keypair.publicKey.toBytes();\n\n        var signature = nacl.sign.detached(message, keypair.secretKey);\n        return this.createInstructionWithPublicKey({\n          publicKey: _publicKey2,\n          message: message,\n          signature: signature,\n          instructionIndex: instructionIndex\n        });\n      } catch (error) {\n        throw new Error(\"Error creating instruction; \".concat(error));\n      }\n    }\n  }]);\n\n  return Ed25519Program;\n}();\n\nEd25519Program.programId = new PublicKey('Ed25519SigVerify111111111111111111111111111');\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\n\nvar STAKE_CONFIG_ID = new PublicKey('StakeConfig11111111111111111111111111111111');\n/**\n * Stake account authority info\n */\n\nvar Authorized = /*#__PURE__*/_createClass(\n/** stake authority */\n\n/** withdraw authority */\n\n/**\n * Create a new Authorized object\n * @param staker the stake authority\n * @param withdrawer the withdraw authority\n */\nfunction Authorized(staker, withdrawer) {\n  _classCallCheck(this, Authorized);\n\n  this.staker = void 0;\n  this.withdrawer = void 0;\n  this.staker = staker;\n  this.withdrawer = withdrawer;\n});\n/**\n * Stake account lockup info\n */\n\n\nvar Lockup = /*#__PURE__*/_createClass(\n/** Unix timestamp of lockup expiration */\n\n/** Epoch of lockup expiration */\n\n/** Lockup custodian authority */\n\n/**\n * Create a new Lockup object\n */\nfunction Lockup(unixTimestamp, epoch, custodian) {\n  _classCallCheck(this, Lockup);\n\n  this.unixTimestamp = void 0;\n  this.epoch = void 0;\n  this.custodian = void 0;\n  this.unixTimestamp = unixTimestamp;\n  this.epoch = epoch;\n  this.custodian = custodian;\n}\n/**\n * Default, inactive Lockup value\n */\n);\n\nLockup.default = new Lockup(0, 0, PublicKey.default);\n/**\n * Stake Instruction class\n */\n\nvar StakeInstruction = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function StakeInstruction() {\n    _classCallCheck(this, StakeInstruction);\n  }\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n\n\n  _createClass(StakeInstruction, null, [{\n    key: \"decodeInstructionType\",\n    value: function decodeInstructionType(instruction) {\n      this.checkProgramId(instruction.programId);\n      var instructionTypeLayout = BufferLayout.u32('instruction');\n      var typeIndex = instructionTypeLayout.decode(instruction.data);\n      var type;\n\n      for (var _i6 = 0, _Object$entries3 = Object.entries(STAKE_INSTRUCTION_LAYOUTS); _i6 < _Object$entries3.length; _i6++) {\n        var _Object$entries3$_i = _slicedToArray(_Object$entries3[_i6], 2),\n            ixType = _Object$entries3$_i[0],\n            layout = _Object$entries3$_i[1];\n\n        if (layout.index == typeIndex) {\n          type = ixType;\n          break;\n        }\n      }\n\n      if (!type) {\n        throw new Error('Instruction type incorrect; not a StakeInstruction');\n      }\n\n      return type;\n    }\n    /**\n     * Decode a initialize stake instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeInitialize\",\n    value: function decodeInitialize(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n\n      var _decodeData16 = decodeData(STAKE_INSTRUCTION_LAYOUTS.Initialize, instruction.data),\n          authorized = _decodeData16.authorized,\n          lockup = _decodeData16.lockup;\n\n      return {\n        stakePubkey: instruction.keys[0].pubkey,\n        authorized: new Authorized(new PublicKey(authorized.staker), new PublicKey(authorized.withdrawer)),\n        lockup: new Lockup(lockup.unixTimestamp, lockup.epoch, new PublicKey(lockup.custodian))\n      };\n    }\n    /**\n     * Decode a delegate stake instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeDelegate\",\n    value: function decodeDelegate(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 6);\n      decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n      return {\n        stakePubkey: instruction.keys[0].pubkey,\n        votePubkey: instruction.keys[1].pubkey,\n        authorizedPubkey: instruction.keys[5].pubkey\n      };\n    }\n    /**\n     * Decode an authorize stake instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeAuthorize\",\n    value: function decodeAuthorize(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n\n      var _decodeData17 = decodeData(STAKE_INSTRUCTION_LAYOUTS.Authorize, instruction.data),\n          newAuthorized = _decodeData17.newAuthorized,\n          stakeAuthorizationType = _decodeData17.stakeAuthorizationType;\n\n      var o = {\n        stakePubkey: instruction.keys[0].pubkey,\n        authorizedPubkey: instruction.keys[2].pubkey,\n        newAuthorizedPubkey: new PublicKey(newAuthorized),\n        stakeAuthorizationType: {\n          index: stakeAuthorizationType\n        }\n      };\n\n      if (instruction.keys.length > 3) {\n        o.custodianPubkey = instruction.keys[3].pubkey;\n      }\n\n      return o;\n    }\n    /**\n     * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeAuthorizeWithSeed\",\n    value: function decodeAuthorizeWithSeed(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n\n      var _decodeData18 = decodeData(STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data),\n          newAuthorized = _decodeData18.newAuthorized,\n          stakeAuthorizationType = _decodeData18.stakeAuthorizationType,\n          authoritySeed = _decodeData18.authoritySeed,\n          authorityOwner = _decodeData18.authorityOwner;\n\n      var o = {\n        stakePubkey: instruction.keys[0].pubkey,\n        authorityBase: instruction.keys[1].pubkey,\n        authoritySeed: authoritySeed,\n        authorityOwner: new PublicKey(authorityOwner),\n        newAuthorizedPubkey: new PublicKey(newAuthorized),\n        stakeAuthorizationType: {\n          index: stakeAuthorizationType\n        }\n      };\n\n      if (instruction.keys.length > 3) {\n        o.custodianPubkey = instruction.keys[3].pubkey;\n      }\n\n      return o;\n    }\n    /**\n     * Decode a split stake instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeSplit\",\n    value: function decodeSplit(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n\n      var _decodeData19 = decodeData(STAKE_INSTRUCTION_LAYOUTS.Split, instruction.data),\n          lamports = _decodeData19.lamports;\n\n      return {\n        stakePubkey: instruction.keys[0].pubkey,\n        splitStakePubkey: instruction.keys[1].pubkey,\n        authorizedPubkey: instruction.keys[2].pubkey,\n        lamports: lamports\n      };\n    }\n    /**\n     * Decode a merge stake instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeMerge\",\n    value: function decodeMerge(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n      decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n      return {\n        stakePubkey: instruction.keys[0].pubkey,\n        sourceStakePubKey: instruction.keys[1].pubkey,\n        authorizedPubkey: instruction.keys[4].pubkey\n      };\n    }\n    /**\n     * Decode a withdraw stake instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeWithdraw\",\n    value: function decodeWithdraw(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 5);\n\n      var _decodeData20 = decodeData(STAKE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data),\n          lamports = _decodeData20.lamports;\n\n      var o = {\n        stakePubkey: instruction.keys[0].pubkey,\n        toPubkey: instruction.keys[1].pubkey,\n        authorizedPubkey: instruction.keys[4].pubkey,\n        lamports: lamports\n      };\n\n      if (instruction.keys.length > 5) {\n        o.custodianPubkey = instruction.keys[5].pubkey;\n      }\n\n      return o;\n    }\n    /**\n     * Decode a deactivate stake instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeDeactivate\",\n    value: function decodeDeactivate(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n      decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n      return {\n        stakePubkey: instruction.keys[0].pubkey,\n        authorizedPubkey: instruction.keys[2].pubkey\n      };\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"checkProgramId\",\n    value: function checkProgramId(programId) {\n      if (!programId.equals(StakeProgram.programId)) {\n        throw new Error('invalid instruction; programId is not StakeProgram');\n      }\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"checkKeyLength\",\n    value: function checkKeyLength(keys, expectedLength) {\n      if (keys.length < expectedLength) {\n        throw new Error(\"invalid instruction; found \".concat(keys.length, \" keys, expected at least \").concat(expectedLength));\n      }\n    }\n  }]);\n\n  return StakeInstruction;\n}();\n/**\n * An enumeration of valid StakeInstructionType's\n */\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\n\n\nvar STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), authorized(), lockup()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType')])\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType'), rustString('authoritySeed'), publicKey('authorityOwner')])\n  }\n});\n/**\n * Stake authorization type\n */\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\n\nvar StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n/**\n * Factory class for transactions to interact with the Stake program\n */\n\nvar StakeProgram = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function StakeProgram() {\n    _classCallCheck(this, StakeProgram);\n  }\n  /**\n   * Public key that identifies the Stake program\n   */\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n\n\n  _createClass(StakeProgram, null, [{\n    key: \"initialize\",\n    value: function initialize(params) {\n      var stakePubkey = params.stakePubkey,\n          authorized = params.authorized,\n          maybeLockup = params.lockup;\n      var lockup = maybeLockup || Lockup.default;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n      var data = encodeData(type, {\n        authorized: {\n          staker: toBuffer(authorized.staker.toBuffer()),\n          withdrawer: toBuffer(authorized.withdrawer.toBuffer())\n        },\n        lockup: {\n          unixTimestamp: lockup.unixTimestamp,\n          epoch: lockup.epoch,\n          custodian: toBuffer(lockup.custodian.toBuffer())\n        }\n      });\n      var instructionData = {\n        keys: [{\n          pubkey: stakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      };\n      return new TransactionInstruction(instructionData);\n    }\n    /**\n     * Generate a Transaction that creates a new Stake account at\n     *   an address generated with `from`, a seed, and the Stake programId\n     */\n\n  }, {\n    key: \"createAccountWithSeed\",\n    value: function createAccountWithSeed(params) {\n      var transaction = new Transaction();\n      transaction.add(SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId\n      }));\n      var stakePubkey = params.stakePubkey,\n          authorized = params.authorized,\n          lockup = params.lockup;\n      return transaction.add(this.initialize({\n        stakePubkey: stakePubkey,\n        authorized: authorized,\n        lockup: lockup\n      }));\n    }\n    /**\n     * Generate a Transaction that creates a new Stake account\n     */\n\n  }, {\n    key: \"createAccount\",\n    value: function createAccount(params) {\n      var transaction = new Transaction();\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId\n      }));\n      var stakePubkey = params.stakePubkey,\n          authorized = params.authorized,\n          lockup = params.lockup;\n      return transaction.add(this.initialize({\n        stakePubkey: stakePubkey,\n        authorized: authorized,\n        lockup: lockup\n      }));\n    }\n    /**\n     * Generate a Transaction that delegates Stake tokens to a validator\n     * Vote PublicKey. This transaction can also be used to redelegate Stake\n     * to a new validator Vote PublicKey.\n     */\n\n  }, {\n    key: \"delegate\",\n    value: function delegate(params) {\n      var stakePubkey = params.stakePubkey,\n          authorizedPubkey = params.authorizedPubkey,\n          votePubkey = params.votePubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n      var data = encodeData(type);\n      return new Transaction().add({\n        keys: [{\n          pubkey: stakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: votePubkey,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: SYSVAR_CLOCK_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: STAKE_CONFIG_ID,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a Transaction that authorizes a new PublicKey as Staker\n     * or Withdrawer on the Stake account.\n     */\n\n  }, {\n    key: \"authorize\",\n    value: function authorize(params) {\n      var stakePubkey = params.stakePubkey,\n          authorizedPubkey = params.authorizedPubkey,\n          newAuthorizedPubkey = params.newAuthorizedPubkey,\n          stakeAuthorizationType = params.stakeAuthorizationType,\n          custodianPubkey = params.custodianPubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n      var data = encodeData(type, {\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        stakeAuthorizationType: stakeAuthorizationType.index\n      });\n      var keys = [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n\n      if (custodianPubkey) {\n        keys.push({\n          pubkey: custodianPubkey,\n          isSigner: false,\n          isWritable: false\n        });\n      }\n\n      return new Transaction().add({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a Transaction that authorizes a new PublicKey as Staker\n     * or Withdrawer on the Stake account.\n     */\n\n  }, {\n    key: \"authorizeWithSeed\",\n    value: function authorizeWithSeed(params) {\n      var stakePubkey = params.stakePubkey,\n          authorityBase = params.authorityBase,\n          authoritySeed = params.authoritySeed,\n          authorityOwner = params.authorityOwner,\n          newAuthorizedPubkey = params.newAuthorizedPubkey,\n          stakeAuthorizationType = params.stakeAuthorizationType,\n          custodianPubkey = params.custodianPubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n      var data = encodeData(type, {\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        stakeAuthorizationType: stakeAuthorizationType.index,\n        authoritySeed: authoritySeed,\n        authorityOwner: toBuffer(authorityOwner.toBuffer())\n      });\n      var keys = [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorityBase,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }];\n\n      if (custodianPubkey) {\n        keys.push({\n          pubkey: custodianPubkey,\n          isSigner: false,\n          isWritable: false\n        });\n      }\n\n      return new Transaction().add({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"splitInstruction\",\n    value: function splitInstruction(params) {\n      var stakePubkey = params.stakePubkey,\n          authorizedPubkey = params.authorizedPubkey,\n          splitStakePubkey = params.splitStakePubkey,\n          lamports = params.lamports;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Split;\n      var data = encodeData(type, {\n        lamports: lamports\n      });\n      return new TransactionInstruction({\n        keys: [{\n          pubkey: stakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: splitStakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a Transaction that splits Stake tokens into another stake account\n     */\n\n  }, {\n    key: \"split\",\n    value: function split(params) {\n      var transaction = new Transaction();\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId\n      }));\n      return transaction.add(this.splitInstruction(params));\n    }\n    /**\n     * Generate a Transaction that splits Stake tokens into another account\n     * derived from a base public key and seed\n     */\n\n  }, {\n    key: \"splitWithSeed\",\n    value: function splitWithSeed(params) {\n      var stakePubkey = params.stakePubkey,\n          authorizedPubkey = params.authorizedPubkey,\n          splitStakePubkey = params.splitStakePubkey,\n          basePubkey = params.basePubkey,\n          seed = params.seed,\n          lamports = params.lamports;\n      var transaction = new Transaction();\n      transaction.add(SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey: basePubkey,\n        seed: seed,\n        space: this.space,\n        programId: this.programId\n      }));\n      return transaction.add(this.splitInstruction({\n        stakePubkey: stakePubkey,\n        authorizedPubkey: authorizedPubkey,\n        splitStakePubkey: splitStakePubkey,\n        lamports: lamports\n      }));\n    }\n    /**\n     * Generate a Transaction that merges Stake accounts.\n     */\n\n  }, {\n    key: \"merge\",\n    value: function merge(params) {\n      var stakePubkey = params.stakePubkey,\n          sourceStakePubKey = params.sourceStakePubKey,\n          authorizedPubkey = params.authorizedPubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n      var data = encodeData(type);\n      return new Transaction().add({\n        keys: [{\n          pubkey: stakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: sourceStakePubKey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_CLOCK_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a Transaction that withdraws deactivated Stake tokens.\n     */\n\n  }, {\n    key: \"withdraw\",\n    value: function withdraw(params) {\n      var stakePubkey = params.stakePubkey,\n          authorizedPubkey = params.authorizedPubkey,\n          toPubkey = params.toPubkey,\n          lamports = params.lamports,\n          custodianPubkey = params.custodianPubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n      var data = encodeData(type, {\n        lamports: lamports\n      });\n      var keys = [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: toPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n\n      if (custodianPubkey) {\n        keys.push({\n          pubkey: custodianPubkey,\n          isSigner: false,\n          isWritable: false\n        });\n      }\n\n      return new Transaction().add({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a Transaction that deactivates Stake tokens.\n     */\n\n  }, {\n    key: \"deactivate\",\n    value: function deactivate(params) {\n      var stakePubkey = params.stakePubkey,\n          authorizedPubkey = params.authorizedPubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n      var data = encodeData(type);\n      return new Transaction().add({\n        keys: [{\n          pubkey: stakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_CLOCK_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n  }]);\n\n  return StakeProgram;\n}();\n\nStakeProgram.programId = new PublicKey('Stake11111111111111111111111111111111111111');\nStakeProgram.space = 200;\nvar publicKeyCreate = secp256k1.publicKeyCreate,\n    ecdsaSign = secp256k1.ecdsaSign;\nvar PRIVATE_KEY_BYTES = 32;\nvar ETHEREUM_ADDRESS_BYTES = 20;\nvar PUBLIC_KEY_BYTES = 64;\nvar SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\n\nvar SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u16('signatureOffset'), BufferLayout.u8('signatureInstructionIndex'), BufferLayout.u16('ethAddressOffset'), BufferLayout.u8('ethAddressInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u8('messageInstructionIndex'), BufferLayout.blob(20, 'ethAddress'), BufferLayout.blob(64, 'signature'), BufferLayout.u8('recoveryId')]);\n\nvar Secp256k1Program = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function Secp256k1Program() {\n    _classCallCheck(this, Secp256k1Program);\n  }\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n\n\n  _createClass(Secp256k1Program, null, [{\n    key: \"publicKeyToEthAddress\",\n    value: function publicKeyToEthAddress(publicKey) {\n      assert(publicKey.length === PUBLIC_KEY_BYTES, \"Public key must be \".concat(PUBLIC_KEY_BYTES, \" bytes but received \").concat(publicKey.length, \" bytes\"));\n\n      try {\n        return Buffer.from(sha3.keccak_256.update(toBuffer(publicKey)).digest()).slice(-ETHEREUM_ADDRESS_BYTES);\n      } catch (error) {\n        throw new Error(\"Error constructing Ethereum address: \".concat(error));\n      }\n    }\n    /**\n     * Create an secp256k1 instruction with a public key. The public key\n     * must be a buffer that is 64 bytes long.\n     */\n\n  }, {\n    key: \"createInstructionWithPublicKey\",\n    value: function createInstructionWithPublicKey(params) {\n      var publicKey = params.publicKey,\n          message = params.message,\n          signature = params.signature,\n          recoveryId = params.recoveryId,\n          instructionIndex = params.instructionIndex;\n      return Secp256k1Program.createInstructionWithEthAddress({\n        ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n        message: message,\n        signature: signature,\n        recoveryId: recoveryId,\n        instructionIndex: instructionIndex\n      });\n    }\n    /**\n     * Create an secp256k1 instruction with an Ethereum address. The address\n     * must be a hex string or a buffer that is 20 bytes long.\n     */\n\n  }, {\n    key: \"createInstructionWithEthAddress\",\n    value: function createInstructionWithEthAddress(params) {\n      var rawAddress = params.ethAddress,\n          message = params.message,\n          signature = params.signature,\n          recoveryId = params.recoveryId,\n          _params$instructionIn = params.instructionIndex,\n          instructionIndex = _params$instructionIn === void 0 ? 0 : _params$instructionIn;\n      var ethAddress;\n\n      if (typeof rawAddress === 'string') {\n        if (rawAddress.startsWith('0x')) {\n          ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n        } else {\n          ethAddress = Buffer.from(rawAddress, 'hex');\n        }\n      } else {\n        ethAddress = rawAddress;\n      }\n\n      assert(ethAddress.length === ETHEREUM_ADDRESS_BYTES, \"Address must be \".concat(ETHEREUM_ADDRESS_BYTES, \" bytes but received \").concat(ethAddress.length, \" bytes\"));\n      var dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n      var ethAddressOffset = dataStart;\n      var signatureOffset = dataStart + ethAddress.length;\n      var messageDataOffset = signatureOffset + signature.length + 1;\n      var numSignatures = 1;\n      var instructionData = Buffer.alloc(SECP256K1_INSTRUCTION_LAYOUT.span + message.length);\n      SECP256K1_INSTRUCTION_LAYOUT.encode({\n        numSignatures: numSignatures,\n        signatureOffset: signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset: ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset: messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId: recoveryId\n      }, instructionData);\n      instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n      return new TransactionInstruction({\n        keys: [],\n        programId: Secp256k1Program.programId,\n        data: instructionData\n      });\n    }\n    /**\n     * Create an secp256k1 instruction with a private key. The private key\n     * must be a buffer that is 32 bytes long.\n     */\n\n  }, {\n    key: \"createInstructionWithPrivateKey\",\n    value: function createInstructionWithPrivateKey(params) {\n      var pkey = params.privateKey,\n          message = params.message,\n          instructionIndex = params.instructionIndex;\n      assert(pkey.length === PRIVATE_KEY_BYTES, \"Private key must be \".concat(PRIVATE_KEY_BYTES, \" bytes but received \").concat(pkey.length, \" bytes\"));\n\n      try {\n        var privateKey = toBuffer(pkey);\n\n        var _publicKey3 = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n\n\n        var messageHash = Buffer.from(sha3.keccak_256.update(toBuffer(message)).digest());\n\n        var _ecdsaSign = ecdsaSign(messageHash, privateKey),\n            signature = _ecdsaSign.signature,\n            recoveryId = _ecdsaSign.recid;\n\n        return this.createInstructionWithPublicKey({\n          publicKey: _publicKey3,\n          message: message,\n          signature: signature,\n          recoveryId: recoveryId,\n          instructionIndex: instructionIndex\n        });\n      } catch (error) {\n        throw new Error(\"Error creating instruction; \".concat(error));\n      }\n    }\n  }]);\n\n  return Secp256k1Program;\n}();\n\nSecp256k1Program.programId = new PublicKey('KeccakSecp256k11111111111111111111111111111');\nvar VALIDATOR_INFO_KEY = new PublicKey('Va1idator1nfo111111111111111111111111111111');\n/**\n * @internal\n */\n\nvar InfoString = type({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string())\n});\n/**\n * ValidatorInfo class\n */\n\nvar ValidatorInfo = /*#__PURE__*/function () {\n  /**\n   * validator public key\n   */\n\n  /**\n   * validator information\n   */\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  function ValidatorInfo(key, info) {\n    _classCallCheck(this, ValidatorInfo);\n\n    this.key = void 0;\n    this.info = void 0;\n    this.key = key;\n    this.info = info;\n  }\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n\n\n  _createClass(ValidatorInfo, null, [{\n    key: \"fromConfigData\",\n    value: function fromConfigData(buffer) {\n      var PUBKEY_LENGTH = 32;\n\n      var byteArray = _toConsumableArray(buffer);\n\n      var configKeyCount = decodeLength(byteArray);\n      if (configKeyCount !== 2) return null;\n      var configKeys = [];\n\n      for (var i = 0; i < 2; i++) {\n        var _publicKey4 = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n\n        byteArray = byteArray.slice(PUBKEY_LENGTH);\n        var isSigner = byteArray.slice(0, 1)[0] === 1;\n        byteArray = byteArray.slice(1);\n        configKeys.push({\n          publicKey: _publicKey4,\n          isSigner: isSigner\n        });\n      }\n\n      if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n        if (configKeys[1].isSigner) {\n          var rawInfo = rustString().decode(Buffer.from(byteArray));\n          var info = JSON.parse(rawInfo);\n          assert$7(info, InfoString);\n          return new ValidatorInfo(configKeys[1].publicKey, info);\n        }\n      }\n\n      return null;\n    }\n  }]);\n\n  return ValidatorInfo;\n}();\n\nvar VOTE_PROGRAM_ID = new PublicKey('Vote111111111111111111111111111111111111111');\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\n\nvar VoteAccountLayout = BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission'), BufferLayout.nu64(), // votes.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.u32('confirmationCount')]), BufferLayout.offset(BufferLayout.u32(), -8), 'votes'), BufferLayout.u8('rootSlotValid'), BufferLayout.nu64('rootSlot'), BufferLayout.nu64(), // authorizedVoters.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), publicKey('authorizedVoter')]), BufferLayout.offset(BufferLayout.u32(), -8), 'authorizedVoters'), BufferLayout.struct([BufferLayout.seq(BufferLayout.struct([publicKey('authorizedPubkey'), BufferLayout.nu64('epochOfLastAuthorizedSwitch'), BufferLayout.nu64('targetEpoch')]), 32, 'buf'), BufferLayout.nu64('idx'), BufferLayout.u8('isEmpty')], 'priorVoters'), BufferLayout.nu64(), // epochCredits.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), BufferLayout.nu64('credits'), BufferLayout.nu64('prevCredits')]), BufferLayout.offset(BufferLayout.u32(), -8), 'epochCredits'), BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')], 'lastTimestamp')]);\n/**\n * VoteAccount class\n */\n\nvar VoteAccount = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function VoteAccount(args) {\n    _classCallCheck(this, VoteAccount);\n\n    this.nodePubkey = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.rootSlot = void 0;\n    this.votes = void 0;\n    this.authorizedVoters = void 0;\n    this.priorVoters = void 0;\n    this.epochCredits = void 0;\n    this.lastTimestamp = void 0;\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n\n\n  _createClass(VoteAccount, null, [{\n    key: \"fromAccountData\",\n    value: function fromAccountData(buffer) {\n      var versionOffset = 4;\n      var va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n      var rootSlot = va.rootSlot;\n\n      if (!va.rootSlotValid) {\n        rootSlot = null;\n      }\n\n      return new VoteAccount({\n        nodePubkey: new PublicKey(va.nodePubkey),\n        authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n        commission: va.commission,\n        votes: va.votes,\n        rootSlot: rootSlot,\n        authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n        priorVoters: getPriorVoters(va.priorVoters),\n        epochCredits: va.epochCredits,\n        lastTimestamp: va.lastTimestamp\n      });\n    }\n  }]);\n\n  return VoteAccount;\n}();\n\nfunction parseAuthorizedVoter(_ref18) {\n  var authorizedVoter = _ref18.authorizedVoter,\n      epoch = _ref18.epoch;\n  return {\n    epoch: epoch,\n    authorizedVoter: new PublicKey(authorizedVoter)\n  };\n}\n\nfunction parsePriorVoters(_ref19) {\n  var authorizedPubkey = _ref19.authorizedPubkey,\n      epochOfLastAuthorizedSwitch = _ref19.epochOfLastAuthorizedSwitch,\n      targetEpoch = _ref19.targetEpoch;\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch: epochOfLastAuthorizedSwitch,\n    targetEpoch: targetEpoch\n  };\n}\n\nfunction getPriorVoters(_ref20) {\n  var buf = _ref20.buf,\n      idx = _ref20.idx,\n      isEmpty = _ref20.isEmpty;\n\n  if (isEmpty) {\n    return [];\n  }\n\n  return [].concat(_toConsumableArray(buf.slice(idx + 1).map(parsePriorVoters)), _toConsumableArray(buf.slice(0, idx).map(parsePriorVoters)));\n}\n/**\n * Vote account info\n */\n\n\nvar VoteInit = /*#__PURE__*/_createClass(\n/** [0, 100] */\nfunction VoteInit(nodePubkey, authorizedVoter, authorizedWithdrawer, commission) {\n  _classCallCheck(this, VoteInit);\n\n  this.nodePubkey = void 0;\n  this.authorizedVoter = void 0;\n  this.authorizedWithdrawer = void 0;\n  this.commission = void 0;\n  this.nodePubkey = nodePubkey;\n  this.authorizedVoter = authorizedVoter;\n  this.authorizedWithdrawer = authorizedWithdrawer;\n  this.commission = commission;\n});\n/**\n * Create vote account transaction params\n */\n\n/**\n * Vote Instruction class\n */\n\n\nvar VoteInstruction = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function VoteInstruction() {\n    _classCallCheck(this, VoteInstruction);\n  }\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n\n\n  _createClass(VoteInstruction, null, [{\n    key: \"decodeInstructionType\",\n    value: function decodeInstructionType(instruction) {\n      this.checkProgramId(instruction.programId);\n      var instructionTypeLayout = BufferLayout.u32('instruction');\n      var typeIndex = instructionTypeLayout.decode(instruction.data);\n      var type;\n\n      for (var _i7 = 0, _Object$entries4 = Object.entries(VOTE_INSTRUCTION_LAYOUTS); _i7 < _Object$entries4.length; _i7++) {\n        var _Object$entries4$_i = _slicedToArray(_Object$entries4[_i7], 2),\n            ixType = _Object$entries4$_i[0],\n            layout = _Object$entries4$_i[1];\n\n        if (layout.index == typeIndex) {\n          type = ixType;\n          break;\n        }\n      }\n\n      if (!type) {\n        throw new Error('Instruction type incorrect; not a VoteInstruction');\n      }\n\n      return type;\n    }\n    /**\n     * Decode an initialize vote instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeInitializeAccount\",\n    value: function decodeInitializeAccount(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 4);\n\n      var _decodeData21 = decodeData(VOTE_INSTRUCTION_LAYOUTS.InitializeAccount, instruction.data),\n          voteInit = _decodeData21.voteInit;\n\n      return {\n        votePubkey: instruction.keys[0].pubkey,\n        nodePubkey: instruction.keys[3].pubkey,\n        voteInit: new VoteInit(new PublicKey(voteInit.nodePubkey), new PublicKey(voteInit.authorizedVoter), new PublicKey(voteInit.authorizedWithdrawer), voteInit.commission)\n      };\n    }\n    /**\n     * Decode an authorize instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeAuthorize\",\n    value: function decodeAuthorize(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n\n      var _decodeData22 = decodeData(VOTE_INSTRUCTION_LAYOUTS.Authorize, instruction.data),\n          newAuthorized = _decodeData22.newAuthorized,\n          voteAuthorizationType = _decodeData22.voteAuthorizationType;\n\n      return {\n        votePubkey: instruction.keys[0].pubkey,\n        authorizedPubkey: instruction.keys[2].pubkey,\n        newAuthorizedPubkey: new PublicKey(newAuthorized),\n        voteAuthorizationType: {\n          index: voteAuthorizationType\n        }\n      };\n    }\n    /**\n     * Decode a withdraw instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeWithdraw\",\n    value: function decodeWithdraw(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n\n      var _decodeData23 = decodeData(VOTE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data),\n          lamports = _decodeData23.lamports;\n\n      return {\n        votePubkey: instruction.keys[0].pubkey,\n        authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n        lamports: lamports,\n        toPubkey: instruction.keys[1].pubkey\n      };\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"checkProgramId\",\n    value: function checkProgramId(programId) {\n      if (!programId.equals(VoteProgram.programId)) {\n        throw new Error('invalid instruction; programId is not VoteProgram');\n      }\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"checkKeyLength\",\n    value: function checkKeyLength(keys, expectedLength) {\n      if (keys.length < expectedLength) {\n        throw new Error(\"invalid instruction; found \".concat(keys.length, \" keys, expected at least \").concat(expectedLength));\n      }\n    }\n  }]);\n\n  return VoteInstruction;\n}();\n/**\n * An enumeration of valid VoteInstructionType's\n */\n\n\nvar VOTE_INSTRUCTION_LAYOUTS = Object.freeze({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteInit()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('voteAuthorizationType')])\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  }\n});\n/**\n * VoteAuthorize type\n */\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\n\nvar VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n/**\n * Factory class for transactions to interact with the Vote program\n */\n\nvar VoteProgram = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function VoteProgram() {\n    _classCallCheck(this, VoteProgram);\n  }\n  /**\n   * Public key that identifies the Vote program\n   */\n\n  /**\n   * Generate an Initialize instruction.\n   */\n\n\n  _createClass(VoteProgram, null, [{\n    key: \"initializeAccount\",\n    value: function initializeAccount(params) {\n      var votePubkey = params.votePubkey,\n          nodePubkey = params.nodePubkey,\n          voteInit = params.voteInit;\n      var type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n      var data = encodeData(type, {\n        voteInit: {\n          nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n          authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n          authorizedWithdrawer: toBuffer(voteInit.authorizedWithdrawer.toBuffer()),\n          commission: voteInit.commission\n        }\n      });\n      var instructionData = {\n        keys: [{\n          pubkey: votePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: SYSVAR_CLOCK_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: nodePubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      };\n      return new TransactionInstruction(instructionData);\n    }\n    /**\n     * Generate a transaction that creates a new Vote account.\n     */\n\n  }, {\n    key: \"createAccount\",\n    value: function createAccount(params) {\n      var transaction = new Transaction();\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId\n      }));\n      return transaction.add(this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit\n      }));\n    }\n    /**\n     * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n     */\n\n  }, {\n    key: \"authorize\",\n    value: function authorize(params) {\n      var votePubkey = params.votePubkey,\n          authorizedPubkey = params.authorizedPubkey,\n          newAuthorizedPubkey = params.newAuthorizedPubkey,\n          voteAuthorizationType = params.voteAuthorizationType;\n      var type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n      var data = encodeData(type, {\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index\n      });\n      var keys = [{\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n      return new Transaction().add({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a transaction to withdraw from a Vote account.\n     */\n\n  }, {\n    key: \"withdraw\",\n    value: function withdraw(params) {\n      var votePubkey = params.votePubkey,\n          authorizedWithdrawerPubkey = params.authorizedWithdrawerPubkey,\n          lamports = params.lamports,\n          toPubkey = params.toPubkey;\n      var type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n      var data = encodeData(type, {\n        lamports: lamports\n      });\n      var keys = [{\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: toPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorizedWithdrawerPubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n      return new Transaction().add({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n  }]);\n\n  return VoteProgram;\n}();\n\nVoteProgram.programId = new PublicKey('Vote111111111111111111111111111111111111111');\nVoteProgram.space = 3731;\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {BlockheightBasedTransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\n// eslint-disable-next-line no-redeclare\n\nfunction sendAndConfirmRawTransaction(_x150, _x151, _x152, _x153) {\n  return _sendAndConfirmRawTransaction.apply(this, arguments);\n}\n\nfunction _sendAndConfirmRawTransaction() {\n  _sendAndConfirmRawTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee95(connection, rawTransaction, confirmationStrategyOrConfirmOptions, maybeConfirmOptions) {\n    var confirmationStrategy, options, sendOptions, signature, commitment, confirmationPromise, status;\n    return _regeneratorRuntime.wrap(function _callee95$(_context95) {\n      while (1) {\n        switch (_context95.prev = _context95.next) {\n          case 0:\n            if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'lastValidBlockHeight')) {\n              confirmationStrategy = confirmationStrategyOrConfirmOptions;\n              options = maybeConfirmOptions;\n            } else {\n              options = confirmationStrategyOrConfirmOptions;\n            }\n\n            sendOptions = options && {\n              skipPreflight: options.skipPreflight,\n              preflightCommitment: options.preflightCommitment || options.commitment\n            };\n            _context95.next = 4;\n            return connection.sendRawTransaction(rawTransaction, sendOptions);\n\n          case 4:\n            signature = _context95.sent;\n            commitment = options && options.commitment;\n            confirmationPromise = confirmationStrategy ? connection.confirmTransaction(confirmationStrategy, commitment) : connection.confirmTransaction(signature, commitment);\n            _context95.next = 9;\n            return confirmationPromise;\n\n          case 9:\n            status = _context95.sent.value;\n\n            if (!status.err) {\n              _context95.next = 12;\n              break;\n            }\n\n            throw new Error(\"Raw transaction \".concat(signature, \" failed (\").concat(JSON.stringify(status), \")\"));\n\n          case 12:\n            return _context95.abrupt(\"return\", signature);\n\n          case 13:\n          case \"end\":\n            return _context95.stop();\n        }\n      }\n    }, _callee95);\n  }));\n  return _sendAndConfirmRawTransaction.apply(this, arguments);\n}\n\nvar endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/'\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/'\n  }\n};\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\n\nfunction clusterApiUrl(cluster, tls) {\n  var key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  var url = endpoint[key][cluster];\n\n  if (!url) {\n    throw new Error(\"Unknown \".concat(key, \" cluster: \").concat(cluster));\n  }\n\n  return url;\n}\n/**\n * There are 1-billion lamports in one SOL\n */\n\n\nvar LAMPORTS_PER_SOL = 1000000000;\nexport { Account, Authorized, BLOCKHASH_CACHE_TIMEOUT_MS, BPF_LOADER_DEPRECATED_PROGRAM_ID, BPF_LOADER_PROGRAM_ID, BpfLoader, COMPUTE_BUDGET_INSTRUCTION_LAYOUTS, ComputeBudgetInstruction, ComputeBudgetProgram, Connection, Ed25519Program, Enum, EpochSchedule, FeeCalculatorLayout, Keypair, LAMPORTS_PER_SOL, Loader, Lockup, MAX_SEED_LENGTH, Message, NONCE_ACCOUNT_LENGTH, NonceAccount, PACKET_DATA_SIZE, PublicKey, SIGNATURE_LENGTH_IN_BYTES, SOLANA_SCHEMA, STAKE_CONFIG_ID, STAKE_INSTRUCTION_LAYOUTS, SYSTEM_INSTRUCTION_LAYOUTS, SYSVAR_CLOCK_PUBKEY, SYSVAR_EPOCH_SCHEDULE_PUBKEY, SYSVAR_INSTRUCTIONS_PUBKEY, SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY, SYSVAR_REWARDS_PUBKEY, SYSVAR_SLOT_HASHES_PUBKEY, SYSVAR_SLOT_HISTORY_PUBKEY, SYSVAR_STAKE_HISTORY_PUBKEY, Secp256k1Program, SendTransactionError, StakeAuthorizationLayout, StakeInstruction, StakeProgram, Struct, SystemInstruction, SystemProgram, Transaction, TransactionInstruction, TransactionStatus, VALIDATOR_INFO_KEY, VOTE_PROGRAM_ID, ValidatorInfo, VoteAccount, VoteAuthorizationLayout, VoteInit, VoteInstruction, VoteProgram, clusterApiUrl, sendAndConfirmRawTransaction, sendAndConfirmTransaction };","map":{"version":3,"sources":["../src/util/to-buffer.ts","../node_modules/minimalistic-assert/index.js","../node_modules/inherits/inherits_browser.js","../node_modules/hash.js/lib/hash/utils.js","../node_modules/hash.js/lib/hash/common.js","../node_modules/hash.js/lib/hash/sha/common.js","../node_modules/hash.js/lib/hash/sha/1.js","../node_modules/hash.js/lib/hash/sha/256.js","../node_modules/hash.js/lib/hash/sha/224.js","../node_modules/hash.js/lib/hash/sha/512.js","../node_modules/hash.js/lib/hash/sha/384.js","../node_modules/hash.js/lib/hash/sha.js","../node_modules/hash.js/lib/hash/ripemd.js","../node_modules/hash.js/lib/hash/hmac.js","../node_modules/hash.js/lib/hash.js","../node_modules/@ethersproject/logger/lib.esm/_version.js","../node_modules/@ethersproject/logger/lib.esm/index.js","../node_modules/@ethersproject/bytes/lib.esm/_version.js","../node_modules/@ethersproject/bytes/lib.esm/index.js","../node_modules/@ethersproject/sha2/lib.esm/_version.js","../node_modules/@ethersproject/sha2/lib.esm/sha2.js","../src/util/borsh-schema.ts","../src/publickey.ts","../src/account.ts","../src/bpf-loader-deprecated.ts","../src/transaction-constants.ts","../src/layout.ts","../src/util/shortvec-encoding.ts","../src/message.ts","../src/util/assert.ts","../src/transaction.ts","../src/sysvar.ts","../src/util/send-and-confirm-transaction.ts","../src/util/sleep.ts","../src/instruction.ts","../src/fee-calculator.ts","../src/nonce-account.ts","../src/util/bigint.ts","../src/system-program.ts","../src/loader.ts","../src/bpf-loader.ts","../src/compute-budget.ts","../node_modules/fast-stable-stringify/index.js","../src/epoch-schedule.ts","../src/errors.ts","../src/__forks__/browser/fetch-impl.ts","../src/timing.ts","../src/util/tx-expiry-custom-errors.ts","../src/util/url.ts","../src/connection.ts","../src/keypair.ts","../src/ed25519-program.ts","../src/stake-program.ts","../src/secp256k1-program.ts","../src/validator-info.ts","../src/vote-account.ts","../src/vote-program.ts","../src/util/send-and-confirm-raw-transaction.ts","../src/util/cluster.ts","../src/index.ts"],"names":["toBuffer","arr","Buffer","assert","inherits_browserModule","require$$0","require$$1","utils","rotr32","rotl32","sum32","sum32_3","sum32_4","sum32_5","sum64","sum64_hi","sum64_lo","sum64_4_hi","sum64_4_lo","sum64_5_hi","sum64_5_lo","rotr64_hi","rotr64_lo","shr64_hi","shr64_lo","BlockHash","common","ft_1","ch32","maj32","s0_256","s1_256","g0_256","g1_256","shaCommon","require$$2","require$$3","SHA256","SHA512","require$$4","version","constructor","Object","encode","serialize","decode","deserialize","decodeUnchecked","deserializeUnchecked","enum","key","SOLANA_SCHEMA","MAX_SEED_LENGTH","value","PublicKey","_bn","isPublicKeyData","decoded","bs58","default","equals","publicKey","toBase58","toJSON","toBytes","b","zeroPad","toString","createWithSeed","buffer","fromPublicKey","programId","hash","sha256","createProgramAddressSync","seeds","seed","publicKeyBytes","is_on_curve","createProgramAddress","findProgramAddressSync","nonce","seedsWithNonce","address","err","findProgramAddress","isOnCurve","pubkey","kind","fields","naclLowLevel","nacl","r","t","chk","num","den","den2","den4","den6","neq25519","gf1","I","c","d","_keypair","secretKey","BPF_LOADER_DEPRECATED_PROGRAM_ID","PACKET_DATA_SIZE","SIGNATURE_LENGTH_IN_BYTES","property","BufferLayout","rustString","rsl","_decode","_encode","rslShim","data","chars","str","authorized","lockup","voteInit","alloc","type","item","len","size","elem","bytes","rem_len","PUBKEY_LENGTH","header","accountKeys","recentBlockhash","instructions","indexToProgramIds","args","account","ix","isAccountSigner","index","isAccountWritable","isProgramId","programIds","nonProgramIds","numKeys","keyCount","shortvec","instruction","programIdIndex","Array","keyIndicesCount","accounts","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","length","signDataLayout","Layout","transaction","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","keys","signData","from","byteArray","accountCount","i","dataSlice","messageArgs","message","TransactionStatus","DEFAULT_SIGNATURE","opts","isWritable","isSigner","signatures","signature","feePayer","lastValidBlockHeight","nonceInfo","_message","_json","newOpts","oldOpts","nonceInstruction","signers","add","items","compileMessage","JSON","console","accountMetas","accountMeta","uniqueMetas","pubkeyString","uniqueIndex","x","y","feePayerIndex","payerMeta","signedKeys","unsignedKeys","meta","invariant","keyIndex","_compile","valid","pair","serializeMessage","getEstimatedFee","connection","setSigners","seen","sign","uniqueSigners","signer","partialSign","_partialSign","_addSignature","addSignature","sigpair","verifySignatures","_verifySignatures","requireAllSignatures","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","Transaction","Message","populate","sigPubkeyPair","SYSVAR_CLOCK_PUBKEY","SYSVAR_EPOCH_SCHEDULE_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_SLOT_HASHES_PUBKEY","SYSVAR_SLOT_HISTORY_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendOptions","options","skipPreflight","preflightCommitment","maxRetries","status","blockhash","resolve","setTimeout","allocLength","layoutFields","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","encodeDecode","layout","bigInt","blob","bigIntLayout","src","toBigIntLE","toBufferLE","u64","decodeInstructionType","instructionTypeLayout","typeIndex","decodeCreateAccount","decodeData","SYSTEM_INSTRUCTION_LAYOUTS","fromPubkey","newAccountPubkey","lamports","space","decodeTransfer","toPubkey","decodeTransferWithSeed","basePubkey","decodeAllocate","accountPubkey","decodeAllocateWithSeed","decodeAssign","decodeAssignWithSeed","decodeCreateWithSeed","decodeNonceInitialize","noncePubkey","decodeNonceAdvance","decodeNonceWithdraw","decodeNonceAuthorize","newAuthorizedPubkey","checkProgramId","SystemProgram","checkKeyLength","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","UpgradeNonceAccount","createAccount","encodeData","params","transfer","BigInt","assign","base","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","CHUNK_SIZE","Loader","chunkSize","getMinNumSignatures","Math","load","balanceNeeded","programInfo","program","payer","sendAndConfirmTransaction","commitment","dataLayout","offset","array","transactions","bytesLength","bytesLengthPadding","REQUESTS_PER_SECOND","sleep","Promise","BPF_LOADER_PROGRAM_ID","decodeRequestUnits","additionalFee","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","units","decodeRequestHeapFrame","decodeSetComputeUnitLimit","decodeSetComputeUnitPrice","microLamports","ComputeBudgetProgram","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","SetComputeUnitPrice","requestUnits","requestHeapFrame","setComputeUnitLimit","setComputeUnitPrice","MINIMUM_SLOT_PER_EPOCH","trailingZeros","n","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","getEpochAndSlotIndex","slot","epoch","nextPowerOfTwo","epochLen","slotIndex","normalSlotIndex","normalEpochIndex","getFirstSlotInEpoch","getLastSlotInEpoch","getSlotsInEpoch","logs","globalThis","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","TransactionExpiredBlockheightExceededError","timeoutSeconds","TransactionExpiredTimeoutError","url","useHttps","String","Number","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","union","pick","jsonrpc","id","result","error","code","unknown","optional","any","UnknownRpcResult","createRpcResult","create","jsonRpcResult","context","number","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","jsonRpcResultAndContext","executable","owner","rentEpoch","unitsConsumed","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","fetch","customFetch","fetchWithMiddleware","modifiedFetchArgs","fetchMiddleware","reject","clientBrowser","agent","method","body","headers","httpHeaders","too_many_requests_retries","waitTime","res","disableRetryOnRateLimit","statusText","text","callback","client","requests","batch","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","state","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","notificationResultAndContext","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","writable","TokenBalanceResult","accountIndex","mint","uiTokenAmount","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","ParsedConfirmedTransactionMetaResult","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","rewardType","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","_commitment","_confirmTransactionInitialTimeout","_rpcEndpoint","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","commitmentOrConfig","wsEndpoint","makeWebsocketUrl","createRpcClient","createRpcRequest","createRpcBatchRequest","autoconnect","max_reconnects","Infinity","rpcEndpoint","getBalanceAndContext","unsafeRes","getBalance","e","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","configArg","config","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","_args","ownerAddress","filter","getParsedTokenAccountsByOwner","getLargestAccounts","arg","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getAccountInfo","getMultipleAccountsInfoAndContext","publicKeys","getMultipleAccountsInfo","getStakeActivation","getProgramAccounts","extra","configOrCommitment","encoding","getParsedProgramAccounts","confirmTransaction","rawSignature","decodedSignature","subscriptionCommitment","done","confirmationPromise","subscriptionId","onSignature","response","__type","checkBlockHeight","expiryPromise","timeoutMs","timeoutId","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","outcome","clearTimeout","getClusterNodes","getVoteAccounts","getSlot","getSlotLeader","getSlotLeaders","getSignatureStatus","values","getSignatureStatuses","getTransactionCount","getTotalSupply","excludeNonCirculatingAccountsList","getInflationGovernor","getInflationReward","addresses","getEpochInfo","getEpochSchedule","epochSchedule","getLeaderSchedule","getMinimumBalanceForRentExemption","getRecentBlockhashAndContext","getRecentPerformanceSamples","limit","getFeeCalculatorForBlockhash","getFeeForMessage","wireMessage","getRecentBlockhash","getLatestBlockhash","getLatestBlockhashAndContext","getVersion","getGenesisHash","getBlock","getBlockHeight","getBlockProduction","rest","getTransaction","getParsedTransaction","getParsedTransactions","_buildArgsAtLeastConfirmed","methodName","getTransactions","getConfirmedBlock","block","getBlocks","endSlot","getBlockSignatures","transactionDetails","getConfirmedBlockSignatures","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","getConfirmedSignaturesForAddress","firstAvailableBlock","startSlot","highestConfirmedRoot","confirmedSignatureInfo","info","getConfirmedSignaturesForAddress2","getSignaturesForAddress","getNonceAndContext","accountInfo","NonceAccount","getNonce","requestAirdrop","to","_blockhashWithExpiryBlockHeight","timeSinceFetch","Date","expired","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","simulateTransaction","transactionOrMessage","originalTx","disableCache","encodedTransaction","traceIndent","logTrace","sendTransaction","sendRawTransaction","sendEncodedTransaction","_wsOnOpen","setInterval","_wsOnError","_wsOnClose","clearInterval","_updateSubscriptions","activeWebSocketGeneration","isCurrentConnectionStillActive","serverSubscriptionId","unsubscribeMethod","_handleServerNotification","callbacks","cb","_wsOnAccountNotification","_makeSubscription","clientSubscriptionId","fastStableStringify","subscriptionConfig","existingSubscription","onAccountChange","removeAccountChangeListener","_wsOnProgramAccountNotification","accountId","onProgramAccountChange","filters","undefined","removeProgramAccountChangeListener","onLogs","mentions","removeOnLogsListener","_wsOnLogsNotification","_wsOnSlotNotification","onSlotChange","removeSlotChangeListener","_wsOnSlotUpdatesNotification","onSlotUpdate","removeSlotUpdateListener","_unsubscribeClientSubscription","dispose","_buildArgs","override","_wsOnSignatureNotification","notification","onSignatureWithOptions","removeSignatureListener","_wsOnRootNotification","onRootChange","removeRootChangeListener","generate","fromSecretKey","keypair","encoder","fromSeed","PRIVATE_KEY_BYTES","PUBLIC_KEY_BYTES","SIGNATURE_BYTES","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","privateKey","Keypair","STAKE_CONFIG_ID","staker","withdrawer","Lockup","unixTimestamp","custodian","decodeInitialize","STAKE_INSTRUCTION_LAYOUTS","stakePubkey","decodeDelegate","decodeAuthorize","stakeAuthorizationType","o","decodeAuthorizeWithSeed","authorityOwner","authorityBase","authoritySeed","decodeSplit","splitStakePubkey","decodeMerge","sourceStakePubKey","decodeWithdraw","decodeDeactivate","StakeProgram","Initialize","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","StakeAuthorizationLayout","Staker","Withdrawer","initialize","maybeLockup","delegate","authorize","custodianPubkey","newAuthorized","authorizeWithSeed","splitInstruction","split","splitWithSeed","merge","withdraw","deactivate","ecdsaSign","ETHEREUM_ADDRESS_BYTES","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","sha3","ethAddress","recoveryId","createInstructionWithEthAddress","rawAddress","dataStart","ethAddressOffset","ethAddressInstructionIndex","pkey","publicKeyCreate","messageHash","recid","VALIDATOR_INFO_KEY","InfoString","name","website","details","keybaseUsername","fromConfigData","configKeyCount","configKeys","rawInfo","assertType","VOTE_PROGRAM_ID","VoteAccountLayout","authorizedWithdrawer","votes","authorizedVoters","priorVoters","lastTimestamp","versionOffset","va","getPriorVoters","authorizedVoter","targetEpoch","epochOfLastAuthorizedSwitch","isEmpty","buf","idx","decodeInitializeAccount","VOTE_INSTRUCTION_LAYOUTS","voteAuthorizationType","authorizedWithdrawerPubkey","VoteProgram","InitializeAccount","VoteAuthorizationLayout","Voter","initializeAccount","confirmationStrategyOrConfirmOptions","confirmationStrategy","endpoint","http","devnet","testnet","https","tls","LAMPORTS_PER_SOL"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEO,IAAMA,QAAQ,GAAIC,SAAZD,QAAYC,CAAAA,GAAD,EAAsD;AAC5E,MAAIC,MAAM,CAANA,QAAAA,CAAJ,GAAIA,CAAJ,EAA0B;AACxB,WAAA,GAAA;AADF,GAAA,MAEO,IAAID,GAAG,YAAP,UAAA,EAA+B;AACpC,WAAOC,MAAM,CAANA,IAAAA,CAAYD,GAAG,CAAfC,MAAAA,EAAwBD,GAAG,CAA3BC,UAAAA,EAAwCD,GAAG,CAAlD,UAAOC,CAAP;AADK,GAAA,MAEA;AACL,WAAOA,MAAM,CAANA,IAAAA,CAAP,GAAOA,CAAP;AACD;AAPI,CAAA;;;;ICFP,kBAAc,GAAGC,Q;;AAEjB,SAASA,QAAT,CAAgB,GAAhB,EAAqB,GAArB,EAA0B;AACxB,MAAI,CAAC,GAAL,EACE,MAAM,IAAI,KAAJ,CAAU,GAAG,IAAI,kBAAjB,CAAN;AACH;;AAEDA,QAAM,CAAC,KAAPA,GAAe,SAAS,WAAT,CAAqB,CAArB,EAAwB,CAAxB,EAA2B,GAA3B,EAAgC;AAC7C,MAAI,CAAC,IAAI,CAAT,EACE,MAAM,IAAI,KAAJ,CAAU,GAAG,IAAK,uBAAuB,CAAvB,GAA2B,MAA3B,GAAoC,CAAtD,CAAN;AACH,CAHDA;;;;;;ACPA,IAAI,OAAO,MAAM,CAAC,MAAd,KAAyB,UAA7B,EAAyC;AACzC;AACEC,EAAAA,gBAAAA,CAAAA,OAAAA,GAAiB,SAAS,QAAT,CAAkB,IAAlB,EAAwB,SAAxB,EAAmC;AAClD,QAAI,SAAJ,EAAe;AACb,MAAA,IAAI,CAAC,MAAL,GAAc,SAAd;AACA,MAAA,IAAI,CAAC,SAAL,GAAiB,MAAM,CAAC,MAAP,CAAc,SAAS,CAAC,SAAxB,EAAmC;AAClD,QAAA,WAAW,EAAE;AACX,UAAA,KAAK,EAAE,IADI;AAEX,UAAA,UAAU,EAAE,KAFD;AAGX,UAAA,QAAQ,EAAE,IAHC;AAIX,UAAA,YAAY,EAAE;AAJH;AADqC,OAAnC,CAAjB;AAQD;AACF,GAZDA;AAaD,CAfD,MAeO;AACP;AACEA,EAAAA,gBAAAA,CAAAA,OAAAA,GAAiB,SAAS,QAAT,CAAkB,IAAlB,EAAwB,SAAxB,EAAmC;AAClD,QAAI,SAAJ,EAAe;AACb,MAAA,IAAI,CAAC,MAAL,GAAc,SAAd;;AACA,UAAI,QAAQ,GAAG,SAAX,QAAW,GAAY,CAAA,CAA3B;;AACA,MAAA,QAAQ,CAAC,SAAT,GAAqB,SAAS,CAAC,SAA/B;AACA,MAAA,IAAI,CAAC,SAAL,GAAiB,IAAI,QAAJ,EAAjB;AACA,MAAA,IAAI,CAAC,SAAL,CAAe,WAAf,GAA6B,IAA7B;AACD;AACL,GAREA;AASF;;ACxBA,IAAID,QAAM,GAAGE,kBAAb;AACA,IAAI,QAAQ,GAAGC,gBAAAA,CAAAA,OAAf;AAEgBC,OAAAA,CAAAA,QAAAA,GAAG,QAAHA;;AAEhB,SAAS,eAAT,CAAyB,GAAzB,EAA8B,CAA9B,EAAiC;AAC/B,MAAI,CAAC,GAAG,CAAC,UAAJ,CAAe,CAAf,IAAoB,MAArB,MAAiC,MAArC,EAA6C;AAC3C,WAAO,KAAP;AACD;;AACD,MAAI,CAAC,GAAG,CAAJ,IAAS,CAAC,GAAG,CAAJ,IAAS,GAAG,CAAC,MAA1B,EAAkC;AAChC,WAAO,KAAP;AACD;;AACD,SAAO,CAAC,GAAG,CAAC,UAAJ,CAAe,CAAC,GAAG,CAAnB,IAAwB,MAAzB,MAAqC,MAA5C;AACD;;AAED,SAAS,OAAT,CAAiB,GAAjB,EAAsB,GAAtB,EAA2B;AACzB,MAAI,KAAK,CAAC,OAAN,CAAc,GAAd,CAAJ,EACE,OAAO,GAAG,CAAC,KAAJ,EAAP;AACF,MAAI,CAAC,GAAL,EACE,OAAO,EAAP;AACF,MAAI,GAAG,GAAG,EAAV;;AACA,MAAI,OAAO,GAAP,KAAe,QAAnB,EAA6B;AAC3B,QAAI,CAAC,GAAL,EAAU;AACd;AACA;AACA;AACA;AACM,UAAI,CAAC,GAAG,CAAR;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,GAAG,CAAC,MAAxB,EAAgC,CAAC,EAAjC,EAAqC;AACnC,YAAI,CAAC,GAAG,GAAG,CAAC,UAAJ,CAAe,CAAf,CAAR;;AACA,YAAI,CAAC,GAAG,GAAR,EAAa;AACX,UAAA,GAAG,CAAC,CAAC,EAAF,CAAH,GAAW,CAAX;AACD,SAFD,MAEO,IAAI,CAAC,GAAG,IAAR,EAAc;AACnB,UAAA,GAAG,CAAC,CAAC,EAAF,CAAH,GAAY,CAAC,IAAI,CAAN,GAAW,GAAtB;AACA,UAAA,GAAG,CAAC,CAAC,EAAF,CAAH,GAAY,CAAC,GAAG,EAAL,GAAW,GAAtB;AACD,SAHM,MAGA,IAAI,eAAe,CAAC,GAAD,EAAM,CAAN,CAAnB,EAA6B;AAClC,UAAA,CAAC,GAAG,WAAW,CAAC,CAAC,GAAG,MAAL,KAAgB,EAA3B,KAAkC,GAAG,CAAC,UAAJ,CAAe,EAAE,CAAjB,IAAsB,MAAxD,CAAJ;AACA,UAAA,GAAG,CAAC,CAAC,EAAF,CAAH,GAAY,CAAC,IAAI,EAAN,GAAY,GAAvB;AACA,UAAA,GAAG,CAAC,CAAC,EAAF,CAAH,GAAa,CAAC,IAAI,EAAN,GAAY,EAAb,GAAmB,GAA9B;AACA,UAAA,GAAG,CAAC,CAAC,EAAF,CAAH,GAAa,CAAC,IAAI,CAAN,GAAW,EAAZ,GAAkB,GAA7B;AACA,UAAA,GAAG,CAAC,CAAC,EAAF,CAAH,GAAY,CAAC,GAAG,EAAL,GAAW,GAAtB;AACD,SANM,MAMA;AACL,UAAA,GAAG,CAAC,CAAC,EAAF,CAAH,GAAY,CAAC,IAAI,EAAN,GAAY,GAAvB;AACA,UAAA,GAAG,CAAC,CAAC,EAAF,CAAH,GAAa,CAAC,IAAI,CAAN,GAAW,EAAZ,GAAkB,GAA7B;AACA,UAAA,GAAG,CAAC,CAAC,EAAF,CAAH,GAAY,CAAC,GAAG,EAAL,GAAW,GAAtB;AACD;AACF;AACF,KAzBD,MAyBO,IAAI,GAAG,KAAK,KAAZ,EAAmB;AACxB,MAAA,GAAG,GAAG,GAAG,CAAC,OAAJ,CAAY,cAAZ,EAA4B,EAA5B,CAAN;AACA,UAAI,GAAG,CAAC,MAAJ,GAAa,CAAb,KAAmB,CAAvB,EACE,GAAG,GAAG,MAAM,GAAZ;;AACF,WAAK,CAAC,GAAG,CAAT,EAAY,CAAC,GAAG,GAAG,CAAC,MAApB,EAA4B,CAAC,IAAI,CAAjC;AACE,QAAA,GAAG,CAAC,IAAJ,CAAS,QAAQ,CAAC,GAAG,CAAC,CAAD,CAAH,GAAS,GAAG,CAAC,CAAC,GAAG,CAAL,CAAb,EAAsB,EAAtB,CAAjB;AADF;AAED;AACF,GAjCD,MAiCO;AACL,SAAK,CAAC,GAAG,CAAT,EAAY,CAAC,GAAG,GAAG,CAAC,MAApB,EAA4B,CAAC,EAA7B;AACE,MAAA,GAAG,CAAC,CAAD,CAAH,GAAS,GAAG,CAAC,CAAD,CAAH,GAAS,CAAlB;AADF;AAED;;AACD,SAAO,GAAP;AACD;;AACcA,OAAAA,CAAAA,OAAAA,GAAG,OAAHA;;AAEf,SAAS,KAAT,CAAe,GAAf,EAAoB;AAClB,MAAI,GAAG,GAAG,EAAV;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,GAAG,CAAC,MAAxB,EAAgC,CAAC,EAAjC;AACE,IAAA,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC,CAAD,CAAH,CAAO,QAAP,CAAgB,EAAhB,CAAD,CAAZ;AADF;;AAEA,SAAO,GAAP;AACD;;AACYA,OAAAA,CAAAA,KAAAA,GAAG,KAAHA;;AAEb,SAAS,KAAT,CAAe,CAAf,EAAkB;AAChB,MAAI,GAAG,GAAI,CAAC,KAAK,EAAP,GACE,CAAC,KAAK,CAAP,GAAY,MADb,GAEE,CAAC,IAAI,CAAN,GAAW,QAFZ,GAGC,CAAC,CAAC,GAAG,IAAL,KAAc,EAHzB;AAIA,SAAO,GAAG,KAAK,CAAf;AACD;;AACYA,OAAAA,CAAAA,KAAAA,GAAG,KAAHA;;AAEb,SAAS,OAAT,CAAiB,GAAjB,EAAsB,MAAtB,EAA8B;AAC5B,MAAI,GAAG,GAAG,EAAV;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,GAAG,CAAC,MAAxB,EAAgC,CAAC,EAAjC,EAAqC;AACnC,QAAI,CAAC,GAAG,GAAG,CAAC,CAAD,CAAX;AACA,QAAI,MAAM,KAAK,QAAf,EACE,CAAC,GAAG,KAAK,CAAC,CAAD,CAAT;AACF,IAAA,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,QAAF,CAAW,EAAX,CAAD,CAAZ;AACD;;AACD,SAAO,GAAP;AACD;;AACcA,OAAAA,CAAAA,OAAAA,GAAG,OAAHA;;AAEf,SAAS,KAAT,CAAe,IAAf,EAAqB;AACnB,MAAI,IAAI,CAAC,MAAL,KAAgB,CAApB,EACE,OAAO,MAAM,IAAb,CADF,KAGE,OAAO,IAAP;AACH;;AACYA,OAAAA,CAAAA,KAAAA,GAAG,KAAHA;;AAEb,SAAS,KAAT,CAAe,IAAf,EAAqB;AACnB,MAAI,IAAI,CAAC,MAAL,KAAgB,CAApB,EACE,OAAO,MAAM,IAAb,CADF,KAEK,IAAI,IAAI,CAAC,MAAL,KAAgB,CAApB,EACH,OAAO,OAAO,IAAd,CADG,KAEA,IAAI,IAAI,CAAC,MAAL,KAAgB,CAApB,EACH,OAAO,QAAQ,IAAf,CADG,KAEA,IAAI,IAAI,CAAC,MAAL,KAAgB,CAApB,EACH,OAAO,SAAS,IAAhB,CADG,KAEA,IAAI,IAAI,CAAC,MAAL,KAAgB,CAApB,EACH,OAAO,UAAU,IAAjB,CADG,KAEA,IAAI,IAAI,CAAC,MAAL,KAAgB,CAApB,EACH,OAAO,WAAW,IAAlB,CADG,KAEA,IAAI,IAAI,CAAC,MAAL,KAAgB,CAApB,EACH,OAAO,YAAY,IAAnB,CADG,KAGH,OAAO,IAAP;AACH;;AACYA,OAAAA,CAAAA,KAAAA,GAAG,KAAHA;;AAEb,SAAS,MAAT,CAAgB,GAAhB,EAAqB,KAArB,EAA4B,GAA5B,EAAiC,MAAjC,EAAyC;AACvC,MAAI,GAAG,GAAG,GAAG,GAAG,KAAhB;AACAJ,EAAAA,QAAM,CAAC,GAAG,GAAG,CAAN,KAAY,CAAb,CAANA;AACA,MAAI,GAAG,GAAG,IAAI,KAAJ,CAAU,GAAG,GAAG,CAAhB,CAAV;;AACA,OAAK,IAAI,CAAC,GAAG,CAAR,EAAW,CAAC,GAAG,KAApB,EAA2B,CAAC,GAAG,GAAG,CAAC,MAAnC,EAA2C,CAAC,IAAI,CAAC,IAAI,CAArD,EAAwD;AACtD,QAAI,CAAJ;AACA,QAAI,MAAM,KAAK,KAAf,EACE,CAAC,GAAI,GAAG,CAAC,CAAD,CAAH,IAAU,EAAX,GAAkB,GAAG,CAAC,CAAC,GAAG,CAAL,CAAH,IAAc,EAAhC,GAAuC,GAAG,CAAC,CAAC,GAAG,CAAL,CAAH,IAAc,CAArD,GAA0D,GAAG,CAAC,CAAC,GAAG,CAAL,CAAjE,CADF,KAGE,CAAC,GAAI,GAAG,CAAC,CAAC,GAAG,CAAL,CAAH,IAAc,EAAf,GAAsB,GAAG,CAAC,CAAC,GAAG,CAAL,CAAH,IAAc,EAApC,GAA2C,GAAG,CAAC,CAAC,GAAG,CAAL,CAAH,IAAc,CAAzD,GAA8D,GAAG,CAAC,CAAD,CAArE;AACF,IAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAC,KAAK,CAAf;AACD;;AACD,SAAO,GAAP;AACD;;AACaI,OAAAA,CAAAA,MAAAA,GAAG,MAAHA;;AAEd,SAAS,OAAT,CAAiB,GAAjB,EAAsB,MAAtB,EAA8B;AAC5B,MAAI,GAAG,GAAG,IAAI,KAAJ,CAAU,GAAG,CAAC,MAAJ,GAAa,CAAvB,CAAV;;AACA,OAAK,IAAI,CAAC,GAAG,CAAR,EAAW,CAAC,GAAG,CAApB,EAAuB,CAAC,GAAG,GAAG,CAAC,MAA/B,EAAuC,CAAC,IAAI,CAAC,IAAI,CAAjD,EAAoD;AAClD,QAAI,CAAC,GAAG,GAAG,CAAC,CAAD,CAAX;;AACA,QAAI,MAAM,KAAK,KAAf,EAAsB;AACpB,MAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAC,KAAK,EAAf;AACA,MAAA,GAAG,CAAC,CAAC,GAAG,CAAL,CAAH,GAAc,CAAC,KAAK,EAAP,GAAa,IAA1B;AACA,MAAA,GAAG,CAAC,CAAC,GAAG,CAAL,CAAH,GAAc,CAAC,KAAK,CAAP,GAAY,IAAzB;AACA,MAAA,GAAG,CAAC,CAAC,GAAG,CAAL,CAAH,GAAa,CAAC,GAAG,IAAjB;AACD,KALD,MAKO;AACL,MAAA,GAAG,CAAC,CAAC,GAAG,CAAL,CAAH,GAAa,CAAC,KAAK,EAAnB;AACA,MAAA,GAAG,CAAC,CAAC,GAAG,CAAL,CAAH,GAAc,CAAC,KAAK,EAAP,GAAa,IAA1B;AACA,MAAA,GAAG,CAAC,CAAC,GAAG,CAAL,CAAH,GAAc,CAAC,KAAK,CAAP,GAAY,IAAzB;AACA,MAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAC,GAAG,IAAb;AACD;AACF;;AACD,SAAO,GAAP;AACD;;AACcA,OAAAA,CAAAA,OAAAA,GAAG,OAAHA;;AAEf,SAASC,QAAT,CAAgB,CAAhB,EAAmB,CAAnB,EAAsB;AACpB,SAAQ,CAAC,KAAK,CAAP,GAAa,CAAC,IAAK,KAAK,CAA/B;AACD;;AACaD,OAAAA,CAAAA,MAAAA,GAAGC,QAAHD;;AAEd,SAASE,QAAT,CAAgB,CAAhB,EAAmB,CAAnB,EAAsB;AACpB,SAAQ,CAAC,IAAI,CAAN,GAAY,CAAC,KAAM,KAAK,CAA/B;AACD;;AACaF,OAAAA,CAAAA,MAAAA,GAAGE,QAAHF;;AAEd,SAASG,OAAT,CAAe,CAAf,EAAkB,CAAlB,EAAqB;AACnB,SAAQ,CAAC,GAAG,CAAL,KAAY,CAAnB;AACD;;AACYH,OAAAA,CAAAA,KAAAA,GAAGG,OAAHH;;AAEb,SAASI,SAAT,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B;AACxB,SAAQ,CAAC,GAAG,CAAJ,GAAQ,CAAT,KAAgB,CAAvB;AACD;;AACcJ,OAAAA,CAAAA,OAAAA,GAAGI,SAAHJ;;AAEf,SAASK,SAAT,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,EAA6B;AAC3B,SAAQ,CAAC,GAAG,CAAJ,GAAQ,CAAR,GAAY,CAAb,KAAoB,CAA3B;AACD;;AACcL,OAAAA,CAAAA,OAAAA,GAAGK,SAAHL;;AAEf,SAASM,SAAT,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,EAAgC;AAC9B,SAAQ,CAAC,GAAG,CAAJ,GAAQ,CAAR,GAAY,CAAZ,GAAgB,CAAjB,KAAwB,CAA/B;AACD;;AACcN,OAAAA,CAAAA,OAAAA,GAAGM,SAAHN;;AAEf,SAASO,OAAT,CAAe,GAAf,EAAoB,GAApB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC;AAC/B,MAAI,EAAE,GAAG,GAAG,CAAC,GAAD,CAAZ;AACA,MAAI,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,CAAP,CAAZ;AAEA,MAAI,EAAE,GAAI,EAAE,GAAG,EAAN,KAAc,CAAvB;AACA,MAAI,EAAE,GAAG,CAAC,EAAE,GAAG,EAAL,GAAU,CAAV,GAAc,CAAf,IAAoB,EAApB,GAAyB,EAAlC;AACA,EAAA,GAAG,CAAC,GAAD,CAAH,GAAW,EAAE,KAAK,CAAlB;AACA,EAAA,GAAG,CAAC,GAAG,GAAG,CAAP,CAAH,GAAe,EAAf;AACD;;AACYP,OAAAA,CAAAA,KAAAA,GAAGO,OAAHP;;AAEb,SAASQ,UAAT,CAAkB,EAAlB,EAAsB,EAAtB,EAA0B,EAA1B,EAA8B,EAA9B,EAAkC;AAChC,MAAI,EAAE,GAAI,EAAE,GAAG,EAAN,KAAc,CAAvB;AACA,MAAI,EAAE,GAAG,CAAC,EAAE,GAAG,EAAL,GAAU,CAAV,GAAc,CAAf,IAAoB,EAApB,GAAyB,EAAlC;AACA,SAAO,EAAE,KAAK,CAAd;AACD;;AACeR,OAAAA,CAAAA,QAAAA,GAAGQ,UAAHR;;AAEhB,SAASS,UAAT,CAAkB,EAAlB,EAAsB,EAAtB,EAA0B,EAA1B,EAA8B,EAA9B,EAAkC;AAChC,MAAI,EAAE,GAAG,EAAE,GAAG,EAAd;AACA,SAAO,EAAE,KAAK,CAAd;AACD;;AACeT,OAAAA,CAAAA,QAAAA,GAAGS,UAAHT;;AAEhB,SAASU,YAAT,CAAoB,EAApB,EAAwB,EAAxB,EAA4B,EAA5B,EAAgC,EAAhC,EAAoC,EAApC,EAAwC,EAAxC,EAA4C,EAA5C,EAAgD,EAAhD,EAAoD;AAClD,MAAI,KAAK,GAAG,CAAZ;AACA,MAAI,EAAE,GAAG,EAAT;AACA,EAAA,EAAE,GAAI,EAAE,GAAG,EAAN,KAAc,CAAnB;AACA,EAAA,KAAK,IAAI,EAAE,GAAG,EAAL,GAAU,CAAV,GAAc,CAAvB;AACA,EAAA,EAAE,GAAI,EAAE,GAAG,EAAN,KAAc,CAAnB;AACA,EAAA,KAAK,IAAI,EAAE,GAAG,EAAL,GAAU,CAAV,GAAc,CAAvB;AACA,EAAA,EAAE,GAAI,EAAE,GAAG,EAAN,KAAc,CAAnB;AACA,EAAA,KAAK,IAAI,EAAE,GAAG,EAAL,GAAU,CAAV,GAAc,CAAvB;AAEA,MAAI,EAAE,GAAG,EAAE,GAAG,EAAL,GAAU,EAAV,GAAe,EAAf,GAAoB,KAA7B;AACA,SAAO,EAAE,KAAK,CAAd;AACD;;AACiBV,OAAAA,CAAAA,UAAAA,GAAGU,YAAHV;;AAElB,SAASW,YAAT,CAAoB,EAApB,EAAwB,EAAxB,EAA4B,EAA5B,EAAgC,EAAhC,EAAoC,EAApC,EAAwC,EAAxC,EAA4C,EAA5C,EAAgD,EAAhD,EAAoD;AAClD,MAAI,EAAE,GAAG,EAAE,GAAG,EAAL,GAAU,EAAV,GAAe,EAAxB;AACA,SAAO,EAAE,KAAK,CAAd;AACD;;AACiBX,OAAAA,CAAAA,UAAAA,GAAGW,YAAHX;;AAElB,SAASY,YAAT,CAAoB,EAApB,EAAwB,EAAxB,EAA4B,EAA5B,EAAgC,EAAhC,EAAoC,EAApC,EAAwC,EAAxC,EAA4C,EAA5C,EAAgD,EAAhD,EAAoD,EAApD,EAAwD,EAAxD,EAA4D;AAC1D,MAAI,KAAK,GAAG,CAAZ;AACA,MAAI,EAAE,GAAG,EAAT;AACA,EAAA,EAAE,GAAI,EAAE,GAAG,EAAN,KAAc,CAAnB;AACA,EAAA,KAAK,IAAI,EAAE,GAAG,EAAL,GAAU,CAAV,GAAc,CAAvB;AACA,EAAA,EAAE,GAAI,EAAE,GAAG,EAAN,KAAc,CAAnB;AACA,EAAA,KAAK,IAAI,EAAE,GAAG,EAAL,GAAU,CAAV,GAAc,CAAvB;AACA,EAAA,EAAE,GAAI,EAAE,GAAG,EAAN,KAAc,CAAnB;AACA,EAAA,KAAK,IAAI,EAAE,GAAG,EAAL,GAAU,CAAV,GAAc,CAAvB;AACA,EAAA,EAAE,GAAI,EAAE,GAAG,EAAN,KAAc,CAAnB;AACA,EAAA,KAAK,IAAI,EAAE,GAAG,EAAL,GAAU,CAAV,GAAc,CAAvB;AAEA,MAAI,EAAE,GAAG,EAAE,GAAG,EAAL,GAAU,EAAV,GAAe,EAAf,GAAoB,EAApB,GAAyB,KAAlC;AACA,SAAO,EAAE,KAAK,CAAd;AACD;;AACiBZ,OAAAA,CAAAA,UAAAA,GAAGY,YAAHZ;;AAElB,SAASa,YAAT,CAAoB,EAApB,EAAwB,EAAxB,EAA4B,EAA5B,EAAgC,EAAhC,EAAoC,EAApC,EAAwC,EAAxC,EAA4C,EAA5C,EAAgD,EAAhD,EAAoD,EAApD,EAAwD,EAAxD,EAA4D;AAC1D,MAAI,EAAE,GAAG,EAAE,GAAG,EAAL,GAAU,EAAV,GAAe,EAAf,GAAoB,EAA7B;AAEA,SAAO,EAAE,KAAK,CAAd;AACD;;AACiBb,OAAAA,CAAAA,UAAAA,GAAGa,YAAHb;;AAElB,SAASc,WAAT,CAAmB,EAAnB,EAAuB,EAAvB,EAA2B,GAA3B,EAAgC;AAC9B,MAAI,CAAC,GAAI,EAAE,IAAK,KAAK,GAAb,GAAsB,EAAE,KAAK,GAArC;AACA,SAAO,CAAC,KAAK,CAAb;AACD;;AACgBd,OAAAA,CAAAA,SAAAA,GAAGc,WAAHd;;AAEjB,SAASe,WAAT,CAAmB,EAAnB,EAAuB,EAAvB,EAA2B,GAA3B,EAAgC;AAC9B,MAAI,CAAC,GAAI,EAAE,IAAK,KAAK,GAAb,GAAsB,EAAE,KAAK,GAArC;AACA,SAAO,CAAC,KAAK,CAAb;AACD;;AACgBf,OAAAA,CAAAA,SAAAA,GAAGe,WAAHf;;AAEjB,SAASgB,UAAT,CAAkB,EAAlB,EAAsB,EAAtB,EAA0B,GAA1B,EAA+B;AAC7B,SAAO,EAAE,KAAK,GAAd;AACD;;AACehB,OAAAA,CAAAA,QAAAA,GAAGgB,UAAHhB;;AAEhB,SAASiB,UAAT,CAAkB,EAAlB,EAAsB,EAAtB,EAA0B,GAA1B,EAA+B;AAC7B,MAAI,CAAC,GAAI,EAAE,IAAK,KAAK,GAAb,GAAsB,EAAE,KAAK,GAArC;AACA,SAAO,CAAC,KAAK,CAAb;AACD;;AACDjB,OAAAA,CAAAA,QAAAA,GAAmBiB,UAAnBjB;;ACnRA,IAAIA,OAAK,GAAGF,OAAZ;AACA,IAAIF,QAAM,GAAGG,kBAAb;;AAEA,SAASmB,WAAT,GAAqB;AACnB,OAAK,OAAL,GAAe,IAAf;AACA,OAAK,YAAL,GAAoB,CAApB;AACA,OAAK,SAAL,GAAiB,KAAK,WAAL,CAAiB,SAAlC;AACA,OAAK,OAAL,GAAe,KAAK,WAAL,CAAiB,OAAhC;AACA,OAAK,YAAL,GAAoB,KAAK,WAAL,CAAiB,YAArC;AACA,OAAK,SAAL,GAAiB,KAAK,WAAL,CAAiB,SAAjB,GAA6B,CAA9C;AACA,OAAK,MAAL,GAAc,KAAd;AAEA,OAAK,OAAL,GAAe,KAAK,SAAL,GAAiB,CAAhC;AACA,OAAK,QAAL,GAAgB,KAAK,SAAL,GAAiB,EAAjC;AACD;;AACgBC,QAAAA,CAAAA,SAAAA,GAAGD,WAAHC;;AAEjBD,WAAS,CAAC,SAAVA,CAAoB,MAApBA,GAA6B,SAAS,MAAT,CAAgB,GAAhB,EAAqB,GAArB,EAA0B;AACvD;AACE,EAAA,GAAG,GAAGlB,OAAK,CAAC,OAANA,CAAc,GAAdA,EAAmB,GAAnBA,CAAN;AACA,MAAI,CAAC,KAAK,OAAV,EACE,KAAK,OAAL,GAAe,GAAf,CADF,KAGE,KAAK,OAAL,GAAe,KAAK,OAAL,CAAa,MAAb,CAAoB,GAApB,CAAf;AACF,OAAK,YAAL,IAAqB,GAAG,CAAC,MAAzB,CAPqD,CASvD;;AACE,MAAI,KAAK,OAAL,CAAa,MAAb,IAAuB,KAAK,OAAhC,EAAyC;AACvC,IAAA,GAAG,GAAG,KAAK,OAAX,CADuC,CAG3C;;AACI,QAAI,CAAC,GAAG,GAAG,CAAC,MAAJ,GAAa,KAAK,OAA1B;AACA,SAAK,OAAL,GAAe,GAAG,CAAC,KAAJ,CAAU,GAAG,CAAC,MAAJ,GAAa,CAAvB,EAA0B,GAAG,CAAC,MAA9B,CAAf;AACA,QAAI,KAAK,OAAL,CAAa,MAAb,KAAwB,CAA5B,EACE,KAAK,OAAL,GAAe,IAAf;AAEF,IAAA,GAAG,GAAGA,OAAK,CAAC,MAANA,CAAa,GAAbA,EAAkB,CAAlBA,EAAqB,GAAG,CAAC,MAAJ,GAAa,CAAlCA,EAAqC,KAAK,MAA1CA,CAAN;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,GAAG,CAAC,MAAxB,EAAgC,CAAC,IAAI,KAAK,QAA1C;AACE,WAAK,OAAL,CAAa,GAAb,EAAkB,CAAlB,EAAqB,CAAC,GAAG,KAAK,QAA9B;AADF;AAED;;AAED,SAAO,IAAP;AACD,CAzBDkB;;AA2BAA,WAAS,CAAC,SAAVA,CAAoB,MAApBA,GAA6B,SAAS,MAAT,CAAgB,GAAhB,EAAqB;AAChD,OAAK,MAAL,CAAY,KAAK,IAAL,EAAZ;AACAtB,EAAAA,QAAM,CAAC,KAAK,OAAL,KAAiB,IAAlB,CAANA;AAEA,SAAO,KAAK,OAAL,CAAa,GAAb,CAAP;AACD,CALDsB;;AAOAA,WAAS,CAAC,SAAVA,CAAoB,IAApBA,GAA2B,SAAS,GAAT,GAAe;AACxC,MAAI,GAAG,GAAG,KAAK,YAAf;AACA,MAAI,KAAK,GAAG,KAAK,OAAjB;AACA,MAAI,CAAC,GAAG,KAAK,GAAI,CAAC,GAAG,GAAG,KAAK,SAAZ,IAAyB,KAA1C;AACA,MAAI,GAAG,GAAG,IAAI,KAAJ,CAAU,CAAC,GAAG,KAAK,SAAnB,CAAV;AACA,EAAA,GAAG,CAAC,CAAD,CAAH,GAAS,IAAT;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,CAAC,EAAxB;AACE,IAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AADF,GANwC,CAS1C;;;AACE,EAAA,GAAG,KAAK,CAAR;;AACA,MAAI,KAAK,MAAL,KAAgB,KAApB,EAA2B;AACzB,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,SAAzB,EAAoC,CAAC,EAArC;AACE,MAAA,GAAG,CAAC,CAAC,EAAF,CAAH,GAAW,CAAX;AADF;;AAGA,IAAA,GAAG,CAAC,CAAC,EAAF,CAAH,GAAW,CAAX;AACA,IAAA,GAAG,CAAC,CAAC,EAAF,CAAH,GAAW,CAAX;AACA,IAAA,GAAG,CAAC,CAAC,EAAF,CAAH,GAAW,CAAX;AACA,IAAA,GAAG,CAAC,CAAC,EAAF,CAAH,GAAW,CAAX;AACA,IAAA,GAAG,CAAC,CAAC,EAAF,CAAH,GAAY,GAAG,KAAK,EAAT,GAAe,IAA1B;AACA,IAAA,GAAG,CAAC,CAAC,EAAF,CAAH,GAAY,GAAG,KAAK,EAAT,GAAe,IAA1B;AACA,IAAA,GAAG,CAAC,CAAC,EAAF,CAAH,GAAY,GAAG,KAAK,CAAT,GAAc,IAAzB;AACA,IAAA,GAAG,CAAC,CAAC,EAAF,CAAH,GAAW,GAAG,GAAG,IAAjB;AACD,GAZD,MAYO;AACL,IAAA,GAAG,CAAC,CAAC,EAAF,CAAH,GAAW,GAAG,GAAG,IAAjB;AACA,IAAA,GAAG,CAAC,CAAC,EAAF,CAAH,GAAY,GAAG,KAAK,CAAT,GAAc,IAAzB;AACA,IAAA,GAAG,CAAC,CAAC,EAAF,CAAH,GAAY,GAAG,KAAK,EAAT,GAAe,IAA1B;AACA,IAAA,GAAG,CAAC,CAAC,EAAF,CAAH,GAAY,GAAG,KAAK,EAAT,GAAe,IAA1B;AACA,IAAA,GAAG,CAAC,CAAC,EAAF,CAAH,GAAW,CAAX;AACA,IAAA,GAAG,CAAC,CAAC,EAAF,CAAH,GAAW,CAAX;AACA,IAAA,GAAG,CAAC,CAAC,EAAF,CAAH,GAAW,CAAX;AACA,IAAA,GAAG,CAAC,CAAC,EAAF,CAAH,GAAW,CAAX;;AAEA,SAAK,CAAC,GAAG,CAAT,EAAY,CAAC,GAAG,KAAK,SAArB,EAAgC,CAAC,EAAjC;AACE,MAAA,GAAG,CAAC,CAAC,EAAF,CAAH,GAAW,CAAX;AADF;AAED;;AAED,SAAO,GAAP;AACD,CAtCDA;;;;ACnDA,IAAIlB,OAAK,GAAGF,OAAZ;AACA,IAAI,MAAM,GAAGE,OAAK,CAAC,MAAnB;;AAEA,SAASoB,MAAT,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B;AACxB,MAAI,CAAC,KAAK,CAAV,EACE,OAAOC,MAAI,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAX;AACF,MAAI,CAAC,KAAK,CAAN,IAAW,CAAC,KAAK,CAArB,EACE,OAAO,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAV;AACF,MAAI,CAAC,KAAK,CAAV,EACE,OAAOC,OAAK,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAZ;AACH;;AACWH,QAAAA,CAAAA,IAAAA,GAAGC,MAAHD;;AAEZ,SAASE,MAAT,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB;AACrB,SAAQ,CAAC,GAAG,CAAL,GAAY,CAAC,CAAF,GAAO,CAAzB;AACD;;AACWF,QAAAA,CAAAA,IAAAA,GAAGE,MAAHF;;AAEZ,SAASG,OAAT,CAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB;AACtB,SAAQ,CAAC,GAAG,CAAL,GAAW,CAAC,GAAG,CAAf,GAAqB,CAAC,GAAG,CAAhC;AACD;;AACYH,QAAAA,CAAAA,KAAAA,GAAGG,OAAHH;;AAEb,SAAS,GAAT,CAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB;AACpB,SAAO,CAAC,GAAG,CAAJ,GAAQ,CAAf;AACD;;AACUA,QAAAA,CAAAA,GAAAA,GAAG,GAAHA;;AAEX,SAASI,QAAT,CAAgB,CAAhB,EAAmB;AACjB,SAAO,MAAM,CAAC,CAAD,EAAI,CAAJ,CAAN,GAAe,MAAM,CAAC,CAAD,EAAI,EAAJ,CAArB,GAA+B,MAAM,CAAC,CAAD,EAAI,EAAJ,CAA5C;AACD;;AACaJ,QAAAA,CAAAA,MAAAA,GAAGI,QAAHJ;;AAEd,SAASK,QAAT,CAAgB,CAAhB,EAAmB;AACjB,SAAO,MAAM,CAAC,CAAD,EAAI,CAAJ,CAAN,GAAe,MAAM,CAAC,CAAD,EAAI,EAAJ,CAArB,GAA+B,MAAM,CAAC,CAAD,EAAI,EAAJ,CAA5C;AACD;;AACaL,QAAAA,CAAAA,MAAAA,GAAGK,QAAHL;;AAEd,SAASM,QAAT,CAAgB,CAAhB,EAAmB;AACjB,SAAO,MAAM,CAAC,CAAD,EAAI,CAAJ,CAAN,GAAe,MAAM,CAAC,CAAD,EAAI,EAAJ,CAArB,GAAgC,CAAC,KAAK,CAA7C;AACD;;AACaN,QAAAA,CAAAA,MAAAA,GAAGM,QAAHN;;AAEd,SAASO,QAAT,CAAgB,CAAhB,EAAmB;AACjB,SAAO,MAAM,CAAC,CAAD,EAAI,EAAJ,CAAN,GAAgB,MAAM,CAAC,CAAD,EAAI,EAAJ,CAAtB,GAAiC,CAAC,KAAK,EAA9C;AACD;;AACDP,QAAAA,CAAAA,MAAAA,GAAiBO,QAAjBP;AC9CA,IAAInB,OAAK,GAAGF,OAAZ;AACA,IAAIqB,QAAM,GAAGpB,QAAb;AACA,IAAI4B,WAAS,GAAGC,QAAhB;AAEA,IAAI1B,QAAM,GAAGF,OAAK,CAAC,MAAnB;AACA,IAAIG,OAAK,GAAGH,OAAK,CAAC,KAAlB;AACA,IAAIM,SAAO,GAAGN,OAAK,CAAC,OAApB;AACA,IAAI,IAAI,GAAG2B,WAAS,CAAC,IAArB;AACA,IAAIT,WAAS,GAAGC,QAAM,CAAC,SAAvB;AAEA,IAAI,MAAM,GAAG,CACX,UADW,EACC,UADD,EAEX,UAFW,EAEC,UAFD,CAAb;;AAKA,SAAS,IAAT,GAAgB;AACd,MAAI,EAAE,gBAAgB,IAAlB,CAAJ,EACE,OAAO,IAAI,IAAJ,EAAP;AAEFD,EAAAA,WAAS,CAAC,IAAVA,CAAe,IAAfA;AACA,OAAK,CAAL,GAAS,CACP,UADO,EACK,UADL,EACiB,UADjB,EAEP,UAFO,EAEK,UAFL,CAAT;AAGA,OAAK,CAAL,GAAS,IAAI,KAAJ,CAAU,EAAV,CAAT;AACD;;AAEDlB,OAAK,CAAC,QAANA,CAAe,IAAfA,EAAqBkB,WAArBlB;IACA,EAAc,GAAG,I;AAEjB,IAAI,CAAC,SAAL,GAAiB,GAAjB;AACA,IAAI,CAAC,OAAL,GAAe,GAAf;AACA,IAAI,CAAC,YAAL,GAAoB,EAApB;AACA,IAAI,CAAC,SAAL,GAAiB,EAAjB;;AAEA,IAAI,CAAC,SAAL,CAAe,OAAf,GAAyB,SAAS,OAAT,CAAiB,GAAjB,EAAsB,KAAtB,EAA6B;AACpD,MAAI,CAAC,GAAG,KAAK,CAAb;;AAEA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,EAApB,EAAwB,CAAC,EAAzB;AACE,IAAA,CAAC,CAAC,CAAD,CAAD,GAAO,GAAG,CAAC,KAAK,GAAG,CAAT,CAAV;AADF;;AAGA,SAAM,CAAC,GAAG,CAAC,CAAC,MAAZ,EAAoB,CAAC,EAArB;AACE,IAAA,CAAC,CAAC,CAAD,CAAD,GAAOE,QAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAL,CAAD,GAAW,CAAC,CAAC,CAAC,GAAG,CAAL,CAAZ,GAAsB,CAAC,CAAC,CAAC,GAAG,EAAL,CAAvB,GAAkC,CAAC,CAAC,CAAC,GAAG,EAAL,CAApC,EAA8C,CAA9C,CAAb;AADF;;AAGA,MAAI,CAAC,GAAG,KAAK,CAAL,CAAO,CAAP,CAAR;AACA,MAAI,CAAC,GAAG,KAAK,CAAL,CAAO,CAAP,CAAR;AACA,MAAI,CAAC,GAAG,KAAK,CAAL,CAAO,CAAP,CAAR;AACA,MAAI,CAAC,GAAG,KAAK,CAAL,CAAO,CAAP,CAAR;AACA,MAAI,CAAC,GAAG,KAAK,CAAL,CAAO,CAAP,CAAR;;AAEA,OAAK,CAAC,GAAG,CAAT,EAAY,CAAC,GAAG,CAAC,CAAC,MAAlB,EAA0B,CAAC,EAA3B,EAA+B;AAC7B,QAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAN,CAAT;AACA,QAAI,CAAC,GAAGI,SAAO,CAACJ,QAAM,CAAC,CAAD,EAAI,CAAJ,CAAP,EAAe,IAAI,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAnB,EAAiC,CAAjC,EAAoC,CAAC,CAAC,CAAD,CAArC,EAA0C,MAAM,CAAC,CAAD,CAAhD,CAAf;AACA,IAAA,CAAC,GAAG,CAAJ;AACA,IAAA,CAAC,GAAG,CAAJ;AACA,IAAA,CAAC,GAAGA,QAAM,CAAC,CAAD,EAAI,EAAJ,CAAV;AACA,IAAA,CAAC,GAAG,CAAJ;AACA,IAAA,CAAC,GAAG,CAAJ;AACD;;AAED,OAAK,CAAL,CAAO,CAAP,IAAYC,OAAK,CAAC,KAAK,CAAL,CAAO,CAAP,CAAD,EAAY,CAAZ,CAAjB;AACA,OAAK,CAAL,CAAO,CAAP,IAAYA,OAAK,CAAC,KAAK,CAAL,CAAO,CAAP,CAAD,EAAY,CAAZ,CAAjB;AACA,OAAK,CAAL,CAAO,CAAP,IAAYA,OAAK,CAAC,KAAK,CAAL,CAAO,CAAP,CAAD,EAAY,CAAZ,CAAjB;AACA,OAAK,CAAL,CAAO,CAAP,IAAYA,OAAK,CAAC,KAAK,CAAL,CAAO,CAAP,CAAD,EAAY,CAAZ,CAAjB;AACA,OAAK,CAAL,CAAO,CAAP,IAAYA,OAAK,CAAC,KAAK,CAAL,CAAO,CAAP,CAAD,EAAY,CAAZ,CAAjB;AACD,CA9BD;;AAgCA,IAAI,CAAC,SAAL,CAAe,OAAf,GAAyB,SAAS,MAAT,CAAgB,GAAhB,EAAqB;AAC5C,MAAI,GAAG,KAAK,KAAZ,EACE,OAAOH,OAAK,CAAC,OAANA,CAAc,KAAK,CAAnBA,EAAsB,KAAtBA,CAAP,CADF,KAGE,OAAOA,OAAK,CAAC,OAANA,CAAc,KAAK,CAAnBA,EAAsB,KAAtBA,CAAP;AACH,CALD;;AClEA,IAAIA,OAAK,GAAGF,OAAZ;AACA,IAAIqB,QAAM,GAAGpB,QAAb;AACA,IAAI,SAAS,GAAG6B,QAAhB;AACA,IAAIhC,QAAM,GAAGiC,kBAAb;AAEA,IAAI1B,OAAK,GAAGH,OAAK,CAAC,KAAlB;AACA,IAAIK,SAAO,GAAGL,OAAK,CAAC,OAApB;AACA,IAAI,OAAO,GAAGA,OAAK,CAAC,OAApB;AACA,IAAI,IAAI,GAAG,SAAS,CAAC,IAArB;AACA,IAAI,KAAK,GAAG,SAAS,CAAC,KAAtB;AACA,IAAI,MAAM,GAAG,SAAS,CAAC,MAAvB;AACA,IAAI,MAAM,GAAG,SAAS,CAAC,MAAvB;AACA,IAAI,MAAM,GAAG,SAAS,CAAC,MAAvB;AACA,IAAI,MAAM,GAAG,SAAS,CAAC,MAAvB;AAEA,IAAIkB,WAAS,GAAGC,QAAM,CAAC,SAAvB;AAEA,IAAI,QAAQ,GAAG,CACb,UADa,EACD,UADC,EACW,UADX,EACuB,UADvB,EAEb,UAFa,EAED,UAFC,EAEW,UAFX,EAEuB,UAFvB,EAGb,UAHa,EAGD,UAHC,EAGW,UAHX,EAGuB,UAHvB,EAIb,UAJa,EAID,UAJC,EAIW,UAJX,EAIuB,UAJvB,EAKb,UALa,EAKD,UALC,EAKW,UALX,EAKuB,UALvB,EAMb,UANa,EAMD,UANC,EAMW,UANX,EAMuB,UANvB,EAOb,UAPa,EAOD,UAPC,EAOW,UAPX,EAOuB,UAPvB,EAQb,UARa,EAQD,UARC,EAQW,UARX,EAQuB,UARvB,EASb,UATa,EASD,UATC,EASW,UATX,EASuB,UATvB,EAUb,UAVa,EAUD,UAVC,EAUW,UAVX,EAUuB,UAVvB,EAWb,UAXa,EAWD,UAXC,EAWW,UAXX,EAWuB,UAXvB,EAYb,UAZa,EAYD,UAZC,EAYW,UAZX,EAYuB,UAZvB,EAab,UAba,EAaD,UAbC,EAaW,UAbX,EAauB,UAbvB,EAcb,UAda,EAcD,UAdC,EAcW,UAdX,EAcuB,UAdvB,EAeb,UAfa,EAeD,UAfC,EAeW,UAfX,EAeuB,UAfvB,EAgBb,UAhBa,EAgBD,UAhBC,EAgBW,UAhBX,EAgBuB,UAhBvB,CAAf;;AAmBA,SAASW,QAAT,GAAkB;AAChB,MAAI,EAAE,gBAAgBA,QAAlB,CAAJ,EACE,OAAO,IAAIA,QAAJ,EAAP;AAEFZ,EAAAA,WAAS,CAAC,IAAVA,CAAe,IAAfA;AACA,OAAK,CAAL,GAAS,CACP,UADO,EACK,UADL,EACiB,UADjB,EAC6B,UAD7B,EAEP,UAFO,EAEK,UAFL,EAEiB,UAFjB,EAE6B,UAF7B,CAAT;AAIA,OAAK,CAAL,GAAS,QAAT;AACA,OAAK,CAAL,GAAS,IAAI,KAAJ,CAAU,EAAV,CAAT;AACD;;AACDlB,OAAK,CAAC,QAANA,CAAe8B,QAAf9B,EAAuBkB,WAAvBlB;IACA,IAAc,GAAG8B,Q;AAEjBA,QAAM,CAAC,SAAPA,GAAmB,GAAnBA;AACAA,QAAM,CAAC,OAAPA,GAAiB,GAAjBA;AACAA,QAAM,CAAC,YAAPA,GAAsB,GAAtBA;AACAA,QAAM,CAAC,SAAPA,GAAmB,EAAnBA;;AAEAA,QAAM,CAAC,SAAPA,CAAiB,OAAjBA,GAA2B,SAAS,OAAT,CAAiB,GAAjB,EAAsB,KAAtB,EAA6B;AACtD,MAAI,CAAC,GAAG,KAAK,CAAb;;AAEA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,EAApB,EAAwB,CAAC,EAAzB;AACE,IAAA,CAAC,CAAC,CAAD,CAAD,GAAO,GAAG,CAAC,KAAK,GAAG,CAAT,CAAV;AADF;;AAEA,SAAO,CAAC,GAAG,CAAC,CAAC,MAAb,EAAqB,CAAC,EAAtB;AACE,IAAA,CAAC,CAAC,CAAD,CAAD,GAAOzB,SAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAL,CAAF,CAAP,EAAmB,CAAC,CAAC,CAAC,GAAG,CAAL,CAApB,EAA6B,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,EAAL,CAAF,CAAnC,EAAgD,CAAC,CAAC,CAAC,GAAG,EAAL,CAAjD,CAAd;AADF;;AAGA,MAAI,CAAC,GAAG,KAAK,CAAL,CAAO,CAAP,CAAR;AACA,MAAI,CAAC,GAAG,KAAK,CAAL,CAAO,CAAP,CAAR;AACA,MAAI,CAAC,GAAG,KAAK,CAAL,CAAO,CAAP,CAAR;AACA,MAAI,CAAC,GAAG,KAAK,CAAL,CAAO,CAAP,CAAR;AACA,MAAI,CAAC,GAAG,KAAK,CAAL,CAAO,CAAP,CAAR;AACA,MAAI,CAAC,GAAG,KAAK,CAAL,CAAO,CAAP,CAAR;AACA,MAAI,CAAC,GAAG,KAAK,CAAL,CAAO,CAAP,CAAR;AACA,MAAI,CAAC,GAAG,KAAK,CAAL,CAAO,CAAP,CAAR;AAEAT,EAAAA,QAAM,CAAC,KAAK,CAAL,CAAO,MAAP,KAAkB,CAAC,CAAC,MAArB,CAANA;;AACA,OAAK,CAAC,GAAG,CAAT,EAAY,CAAC,GAAG,CAAC,CAAC,MAAlB,EAA0B,CAAC,EAA3B,EAA+B;AAC7B,QAAI,EAAE,GAAG,OAAO,CAAC,CAAD,EAAI,MAAM,CAAC,CAAD,CAAV,EAAe,IAAI,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAnB,EAA8B,KAAK,CAAL,CAAO,CAAP,CAA9B,EAAyC,CAAC,CAAC,CAAD,CAA1C,CAAhB;AACA,QAAI,EAAE,GAAGO,OAAK,CAAC,MAAM,CAAC,CAAD,CAAP,EAAY,KAAK,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAjB,CAAd;AACA,IAAA,CAAC,GAAG,CAAJ;AACA,IAAA,CAAC,GAAG,CAAJ;AACA,IAAA,CAAC,GAAG,CAAJ;AACA,IAAA,CAAC,GAAGA,OAAK,CAAC,CAAD,EAAI,EAAJ,CAAT;AACA,IAAA,CAAC,GAAG,CAAJ;AACA,IAAA,CAAC,GAAG,CAAJ;AACA,IAAA,CAAC,GAAG,CAAJ;AACA,IAAA,CAAC,GAAGA,OAAK,CAAC,EAAD,EAAK,EAAL,CAAT;AACD;;AAED,OAAK,CAAL,CAAO,CAAP,IAAYA,OAAK,CAAC,KAAK,CAAL,CAAO,CAAP,CAAD,EAAY,CAAZ,CAAjB;AACA,OAAK,CAAL,CAAO,CAAP,IAAYA,OAAK,CAAC,KAAK,CAAL,CAAO,CAAP,CAAD,EAAY,CAAZ,CAAjB;AACA,OAAK,CAAL,CAAO,CAAP,IAAYA,OAAK,CAAC,KAAK,CAAL,CAAO,CAAP,CAAD,EAAY,CAAZ,CAAjB;AACA,OAAK,CAAL,CAAO,CAAP,IAAYA,OAAK,CAAC,KAAK,CAAL,CAAO,CAAP,CAAD,EAAY,CAAZ,CAAjB;AACA,OAAK,CAAL,CAAO,CAAP,IAAYA,OAAK,CAAC,KAAK,CAAL,CAAO,CAAP,CAAD,EAAY,CAAZ,CAAjB;AACA,OAAK,CAAL,CAAO,CAAP,IAAYA,OAAK,CAAC,KAAK,CAAL,CAAO,CAAP,CAAD,EAAY,CAAZ,CAAjB;AACA,OAAK,CAAL,CAAO,CAAP,IAAYA,OAAK,CAAC,KAAK,CAAL,CAAO,CAAP,CAAD,EAAY,CAAZ,CAAjB;AACA,OAAK,CAAL,CAAO,CAAP,IAAYA,OAAK,CAAC,KAAK,CAAL,CAAO,CAAP,CAAD,EAAY,CAAZ,CAAjB;AACD,CAvCD2B;;AAyCAA,QAAM,CAAC,SAAPA,CAAiB,OAAjBA,GAA2B,SAAS,MAAT,CAAgB,GAAhB,EAAqB;AAC9C,MAAI,GAAG,KAAK,KAAZ,EACE,OAAO9B,OAAK,CAAC,OAANA,CAAc,KAAK,CAAnBA,EAAsB,KAAtBA,CAAP,CADF,KAGE,OAAOA,OAAK,CAAC,OAANA,CAAc,KAAK,CAAnBA,EAAsB,KAAtBA,CAAP;AACH,CALD8B;;ACjGA,IAAI9B,OAAK,GAAGF,OAAZ;AACA,IAAI,MAAM,GAAGC,IAAb;;AAEA,SAAS,MAAT,GAAkB;AAChB,MAAI,EAAE,gBAAgB,MAAlB,CAAJ,EACE,OAAO,IAAI,MAAJ,EAAP;AAEF,EAAA,MAAM,CAAC,IAAP,CAAY,IAAZ;AACA,OAAK,CAAL,GAAS,CACP,UADO,EACK,UADL,EACiB,UADjB,EAC6B,UAD7B,EAEP,UAFO,EAEK,UAFL,EAEiB,UAFjB,EAE6B,UAF7B,CAAT;AAGD;;AACDC,OAAK,CAAC,QAANA,CAAe,MAAfA,EAAuB,MAAvBA;IACA,IAAc,GAAG,M;AAEjB,MAAM,CAAC,SAAP,GAAmB,GAAnB;AACA,MAAM,CAAC,OAAP,GAAiB,GAAjB;AACA,MAAM,CAAC,YAAP,GAAsB,GAAtB;AACA,MAAM,CAAC,SAAP,GAAmB,EAAnB;;AAEA,MAAM,CAAC,SAAP,CAAiB,OAAjB,GAA2B,SAAS,MAAT,CAAgB,GAAhB,EAAqB;AAChD;AACE,MAAI,GAAG,KAAK,KAAZ,EACE,OAAOA,OAAK,CAAC,OAANA,CAAc,KAAK,CAAL,CAAO,KAAP,CAAa,CAAb,EAAgB,CAAhB,CAAdA,EAAkC,KAAlCA,CAAP,CADF,KAGE,OAAOA,OAAK,CAAC,OAANA,CAAc,KAAK,CAAL,CAAO,KAAP,CAAa,CAAb,EAAgB,CAAhB,CAAdA,EAAkC,KAAlCA,CAAP;AACH,CAND;;ACpBA,IAAIA,OAAK,GAAGF,OAAZ;AACA,IAAIqB,QAAM,GAAGpB,QAAb;AACA,IAAIH,QAAM,GAAGgC,kBAAb;AAEA,IAAI,SAAS,GAAG5B,OAAK,CAAC,SAAtB;AACA,IAAI,SAAS,GAAGA,OAAK,CAAC,SAAtB;AACA,IAAI,QAAQ,GAAGA,OAAK,CAAC,QAArB;AACA,IAAI,QAAQ,GAAGA,OAAK,CAAC,QAArB;AACA,IAAI,KAAK,GAAGA,OAAK,CAAC,KAAlB;AACA,IAAI,QAAQ,GAAGA,OAAK,CAAC,QAArB;AACA,IAAI,QAAQ,GAAGA,OAAK,CAAC,QAArB;AACA,IAAI,UAAU,GAAGA,OAAK,CAAC,UAAvB;AACA,IAAI,UAAU,GAAGA,OAAK,CAAC,UAAvB;AACA,IAAI,UAAU,GAAGA,OAAK,CAAC,UAAvB;AACA,IAAI,UAAU,GAAGA,OAAK,CAAC,UAAvB;AAEA,IAAIkB,WAAS,GAAGC,QAAM,CAAC,SAAvB;AAEA,IAAI,QAAQ,GAAG,CACb,UADa,EACD,UADC,EACW,UADX,EACuB,UADvB,EAEb,UAFa,EAED,UAFC,EAEW,UAFX,EAEuB,UAFvB,EAGb,UAHa,EAGD,UAHC,EAGW,UAHX,EAGuB,UAHvB,EAIb,UAJa,EAID,UAJC,EAIW,UAJX,EAIuB,UAJvB,EAKb,UALa,EAKD,UALC,EAKW,UALX,EAKuB,UALvB,EAMb,UANa,EAMD,UANC,EAMW,UANX,EAMuB,UANvB,EAOb,UAPa,EAOD,UAPC,EAOW,UAPX,EAOuB,UAPvB,EAQb,UARa,EAQD,UARC,EAQW,UARX,EAQuB,UARvB,EASb,UATa,EASD,UATC,EASW,UATX,EASuB,UATvB,EAUb,UAVa,EAUD,UAVC,EAUW,UAVX,EAUuB,UAVvB,EAWb,UAXa,EAWD,UAXC,EAWW,UAXX,EAWuB,UAXvB,EAYb,UAZa,EAYD,UAZC,EAYW,UAZX,EAYuB,UAZvB,EAab,UAba,EAaD,UAbC,EAaW,UAbX,EAauB,UAbvB,EAcb,UAda,EAcD,UAdC,EAcW,UAdX,EAcuB,UAdvB,EAeb,UAfa,EAeD,UAfC,EAeW,UAfX,EAeuB,UAfvB,EAgBb,UAhBa,EAgBD,UAhBC,EAgBW,UAhBX,EAgBuB,UAhBvB,EAiBb,UAjBa,EAiBD,UAjBC,EAiBW,UAjBX,EAiBuB,UAjBvB,EAkBb,UAlBa,EAkBD,UAlBC,EAkBW,UAlBX,EAkBuB,UAlBvB,EAmBb,UAnBa,EAmBD,UAnBC,EAmBW,UAnBX,EAmBuB,UAnBvB,EAoBb,UApBa,EAoBD,UApBC,EAoBW,UApBX,EAoBuB,UApBvB,EAqBb,UArBa,EAqBD,UArBC,EAqBW,UArBX,EAqBuB,UArBvB,EAsBb,UAtBa,EAsBD,UAtBC,EAsBW,UAtBX,EAsBuB,UAtBvB,EAuBb,UAvBa,EAuBD,UAvBC,EAuBW,UAvBX,EAuBuB,UAvBvB,EAwBb,UAxBa,EAwBD,UAxBC,EAwBW,UAxBX,EAwBuB,UAxBvB,EAyBb,UAzBa,EAyBD,UAzBC,EAyBW,UAzBX,EAyBuB,UAzBvB,EA0Bb,UA1Ba,EA0BD,UA1BC,EA0BW,UA1BX,EA0BuB,UA1BvB,EA2Bb,UA3Ba,EA2BD,UA3BC,EA2BW,UA3BX,EA2BuB,UA3BvB,EA4Bb,UA5Ba,EA4BD,UA5BC,EA4BW,UA5BX,EA4BuB,UA5BvB,EA6Bb,UA7Ba,EA6BD,UA7BC,EA6BW,UA7BX,EA6BuB,UA7BvB,EA8Bb,UA9Ba,EA8BD,UA9BC,EA8BW,UA9BX,EA8BuB,UA9BvB,EA+Bb,UA/Ba,EA+BD,UA/BC,EA+BW,UA/BX,EA+BuB,UA/BvB,EAgCb,UAhCa,EAgCD,UAhCC,EAgCW,UAhCX,EAgCuB,UAhCvB,EAiCb,UAjCa,EAiCD,UAjCC,EAiCW,UAjCX,EAiCuB,UAjCvB,EAkCb,UAlCa,EAkCD,UAlCC,EAkCW,UAlCX,EAkCuB,UAlCvB,EAmCb,UAnCa,EAmCD,UAnCC,EAmCW,UAnCX,EAmCuB,UAnCvB,EAoCb,UApCa,EAoCD,UApCC,EAoCW,UApCX,EAoCuB,UApCvB,EAqCb,UArCa,EAqCD,UArCC,EAqCW,UArCX,EAqCuB,UArCvB,EAsCb,UAtCa,EAsCD,UAtCC,EAsCW,UAtCX,EAsCuB,UAtCvB,EAuCb,UAvCa,EAuCD,UAvCC,EAuCW,UAvCX,EAuCuB,UAvCvB,EAwCb,UAxCa,EAwCD,UAxCC,EAwCW,UAxCX,EAwCuB,UAxCvB,CAAf;;AA2CA,SAASY,QAAT,GAAkB;AAChB,MAAI,EAAE,gBAAgBA,QAAlB,CAAJ,EACE,OAAO,IAAIA,QAAJ,EAAP;AAEFb,EAAAA,WAAS,CAAC,IAAVA,CAAe,IAAfA;AACA,OAAK,CAAL,GAAS,CACP,UADO,EACK,UADL,EAEP,UAFO,EAEK,UAFL,EAGP,UAHO,EAGK,UAHL,EAIP,UAJO,EAIK,UAJL,EAKP,UALO,EAKK,UALL,EAMP,UANO,EAMK,UANL,EAOP,UAPO,EAOK,UAPL,EAQP,UARO,EAQK,UARL,CAAT;AASA,OAAK,CAAL,GAAS,QAAT;AACA,OAAK,CAAL,GAAS,IAAI,KAAJ,CAAU,GAAV,CAAT;AACD;;AACDlB,OAAK,CAAC,QAANA,CAAe+B,QAAf/B,EAAuBkB,WAAvBlB;IACA,IAAc,GAAG+B,Q;AAEjBA,QAAM,CAAC,SAAPA,GAAmB,IAAnBA;AACAA,QAAM,CAAC,OAAPA,GAAiB,GAAjBA;AACAA,QAAM,CAAC,YAAPA,GAAsB,GAAtBA;AACAA,QAAM,CAAC,SAAPA,GAAmB,GAAnBA;;AAEAA,QAAM,CAAC,SAAPA,CAAiB,aAAjBA,GAAiC,SAAS,aAAT,CAAuB,GAAvB,EAA4B,KAA5B,EAAmC;AAClE,MAAI,CAAC,GAAG,KAAK,CAAb,CADkE,CAGpE;;AACE,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,EAApB,EAAwB,CAAC,EAAzB;AACE,IAAA,CAAC,CAAC,CAAD,CAAD,GAAO,GAAG,CAAC,KAAK,GAAG,CAAT,CAAV;AADF;;AAEA,SAAO,CAAC,GAAG,CAAC,CAAC,MAAb,EAAqB,CAAC,IAAI,CAA1B,EAA6B;AAC3B,QAAI,KAAK,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,CAAL,CAAF,EAAW,CAAC,CAAC,CAAC,GAAG,CAAL,CAAZ,CAArB,CAD2B,CACe;;AAC1C,QAAI,KAAK,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,CAAL,CAAF,EAAW,CAAC,CAAC,CAAC,GAAG,CAAL,CAAZ,CAArB;AACA,QAAI,KAAK,GAAG,CAAC,CAAC,CAAC,GAAG,EAAL,CAAb,CAH2B,CAGL;;AACtB,QAAI,KAAK,GAAG,CAAC,CAAC,CAAC,GAAG,EAAL,CAAb;AACA,QAAI,KAAK,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,EAAL,CAAF,EAAY,CAAC,CAAC,CAAC,GAAG,EAAL,CAAb,CAArB,CAL2B,CAKiB;;AAC5C,QAAI,KAAK,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,EAAL,CAAF,EAAY,CAAC,CAAC,CAAC,GAAG,EAAL,CAAb,CAArB;AACA,QAAI,KAAK,GAAG,CAAC,CAAC,CAAC,GAAG,EAAL,CAAb,CAP2B,CAOL;;AACtB,QAAI,KAAK,GAAG,CAAC,CAAC,CAAC,GAAG,EAAL,CAAb;AAEA,IAAA,CAAC,CAAC,CAAD,CAAD,GAAO,UAAU,CACf,KADe,EACR,KADQ,EAEf,KAFe,EAER,KAFQ,EAGf,KAHe,EAGR,KAHQ,EAIf,KAJe,EAIR,KAJQ,CAAjB;AAKA,IAAA,CAAC,CAAC,CAAC,GAAG,CAAL,CAAD,GAAW,UAAU,CACnB,KADmB,EACZ,KADY,EAEnB,KAFmB,EAEZ,KAFY,EAGnB,KAHmB,EAGZ,KAHY,EAInB,KAJmB,EAIZ,KAJY,CAArB;AAKD;AACF,CA3BDA;;AA6BAA,QAAM,CAAC,SAAPA,CAAiB,OAAjBA,GAA2B,SAAS,OAAT,CAAiB,GAAjB,EAAsB,KAAtB,EAA6B;AACtD,OAAK,aAAL,CAAmB,GAAnB,EAAwB,KAAxB;;AAEA,MAAI,CAAC,GAAG,KAAK,CAAb;AAEA,MAAI,EAAE,GAAG,KAAK,CAAL,CAAO,CAAP,CAAT;AACA,MAAI,EAAE,GAAG,KAAK,CAAL,CAAO,CAAP,CAAT;AACA,MAAI,EAAE,GAAG,KAAK,CAAL,CAAO,CAAP,CAAT;AACA,MAAI,EAAE,GAAG,KAAK,CAAL,CAAO,CAAP,CAAT;AACA,MAAI,EAAE,GAAG,KAAK,CAAL,CAAO,CAAP,CAAT;AACA,MAAI,EAAE,GAAG,KAAK,CAAL,CAAO,CAAP,CAAT;AACA,MAAI,EAAE,GAAG,KAAK,CAAL,CAAO,CAAP,CAAT;AACA,MAAI,EAAE,GAAG,KAAK,CAAL,CAAO,CAAP,CAAT;AACA,MAAI,EAAE,GAAG,KAAK,CAAL,CAAO,CAAP,CAAT;AACA,MAAI,EAAE,GAAG,KAAK,CAAL,CAAO,CAAP,CAAT;AACA,MAAI,EAAE,GAAG,KAAK,CAAL,CAAO,EAAP,CAAT;AACA,MAAI,EAAE,GAAG,KAAK,CAAL,CAAO,EAAP,CAAT;AACA,MAAI,EAAE,GAAG,KAAK,CAAL,CAAO,EAAP,CAAT;AACA,MAAI,EAAE,GAAG,KAAK,CAAL,CAAO,EAAP,CAAT;AACA,MAAI,EAAE,GAAG,KAAK,CAAL,CAAO,EAAP,CAAT;AACA,MAAI,EAAE,GAAG,KAAK,CAAL,CAAO,EAAP,CAAT;AAEAnC,EAAAA,QAAM,CAAC,KAAK,CAAL,CAAO,MAAP,KAAkB,CAAC,CAAC,MAArB,CAANA;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAAC,CAAC,MAAtB,EAA8B,CAAC,IAAI,CAAnC,EAAsC;AACpC,QAAI,KAAK,GAAG,EAAZ;AACA,QAAI,KAAK,GAAG,EAAZ;AACA,QAAI,KAAK,GAAG,SAAS,CAAC,EAAD,EAAK,EAAL,CAArB;AACA,QAAI,KAAK,GAAG,SAAS,CAAC,EAAD,EAAK,EAAL,CAArB;AACA,QAAI,KAAK,GAAG,OAAO,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,CAAnB;AACA,QAAI,KAAK,GAAG,OAAO,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,CAAnB;AACA,QAAI,KAAK,GAAG,KAAK,CAAL,CAAO,CAAP,CAAZ;AACA,QAAI,KAAK,GAAG,KAAK,CAAL,CAAO,CAAC,GAAG,CAAX,CAAZ;AACA,QAAI,KAAK,GAAG,CAAC,CAAC,CAAD,CAAb;AACA,QAAI,KAAK,GAAG,CAAC,CAAC,CAAC,GAAG,CAAL,CAAb;AAEA,QAAI,KAAK,GAAG,UAAU,CACpB,KADoB,EACb,KADa,EAEpB,KAFoB,EAEb,KAFa,EAGpB,KAHoB,EAGb,KAHa,EAIpB,KAJoB,EAIb,KAJa,EAKpB,KALoB,EAKb,KALa,CAAtB;AAMA,QAAI,KAAK,GAAG,UAAU,CACpB,KADoB,EACb,KADa,EAEpB,KAFoB,EAEb,KAFa,EAGpB,KAHoB,EAGb,KAHa,EAIpB,KAJoB,EAIb,KAJa,EAKpB,KALoB,EAKb,KALa,CAAtB;AAOA,IAAA,KAAK,GAAG,SAAS,CAAC,EAAD,EAAK,EAAL,CAAjB;AACA,IAAA,KAAK,GAAG,SAAS,CAAC,EAAD,EAAK,EAAL,CAAjB;AACA,IAAA,KAAK,GAAG,QAAQ,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,CAAhB;AACA,IAAA,KAAK,GAAG,QAAQ,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,CAAhB;AAEA,QAAI,KAAK,GAAG,QAAQ,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,CAApB;AACA,QAAI,KAAK,GAAG,QAAQ,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,CAApB;AAEA,IAAA,EAAE,GAAG,EAAL;AACA,IAAA,EAAE,GAAG,EAAL;AAEA,IAAA,EAAE,GAAG,EAAL;AACA,IAAA,EAAE,GAAG,EAAL;AAEA,IAAA,EAAE,GAAG,EAAL;AACA,IAAA,EAAE,GAAG,EAAL;AAEA,IAAA,EAAE,GAAG,QAAQ,CAAC,EAAD,EAAK,EAAL,EAAS,KAAT,EAAgB,KAAhB,CAAb;AACA,IAAA,EAAE,GAAG,QAAQ,CAAC,EAAD,EAAK,EAAL,EAAS,KAAT,EAAgB,KAAhB,CAAb;AAEA,IAAA,EAAE,GAAG,EAAL;AACA,IAAA,EAAE,GAAG,EAAL;AAEA,IAAA,EAAE,GAAG,EAAL;AACA,IAAA,EAAE,GAAG,EAAL;AAEA,IAAA,EAAE,GAAG,EAAL;AACA,IAAA,EAAE,GAAG,EAAL;AAEA,IAAA,EAAE,GAAG,QAAQ,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,CAAb;AACA,IAAA,EAAE,GAAG,QAAQ,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,CAAb;AACD;;AAED,EAAA,KAAK,CAAC,KAAK,CAAN,EAAS,CAAT,EAAY,EAAZ,EAAgB,EAAhB,CAAL;AACA,EAAA,KAAK,CAAC,KAAK,CAAN,EAAS,CAAT,EAAY,EAAZ,EAAgB,EAAhB,CAAL;AACA,EAAA,KAAK,CAAC,KAAK,CAAN,EAAS,CAAT,EAAY,EAAZ,EAAgB,EAAhB,CAAL;AACA,EAAA,KAAK,CAAC,KAAK,CAAN,EAAS,CAAT,EAAY,EAAZ,EAAgB,EAAhB,CAAL;AACA,EAAA,KAAK,CAAC,KAAK,CAAN,EAAS,CAAT,EAAY,EAAZ,EAAgB,EAAhB,CAAL;AACA,EAAA,KAAK,CAAC,KAAK,CAAN,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,CAAL;AACA,EAAA,KAAK,CAAC,KAAK,CAAN,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,CAAL;AACA,EAAA,KAAK,CAAC,KAAK,CAAN,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,CAAL;AACD,CAzFDmC;;AA2FAA,QAAM,CAAC,SAAPA,CAAiB,OAAjBA,GAA2B,SAAS,MAAT,CAAgB,GAAhB,EAAqB;AAC9C,MAAI,GAAG,KAAK,KAAZ,EACE,OAAO/B,OAAK,CAAC,OAANA,CAAc,KAAK,CAAnBA,EAAsB,KAAtBA,CAAP,CADF,KAGE,OAAOA,OAAK,CAAC,OAANA,CAAc,KAAK,CAAnBA,EAAsB,KAAtBA,CAAP;AACH,CALD+B;;AAOA,SAAS,OAAT,CAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC;AACnC,MAAI,CAAC,GAAI,EAAE,GAAG,EAAN,GAAc,CAAC,EAAF,GAAQ,EAA7B;AACA,MAAI,CAAC,GAAG,CAAR,EACE,CAAC,IAAI,WAAL;AACF,SAAO,CAAP;AACD;;AAED,SAAS,OAAT,CAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC;AACvC,MAAI,CAAC,GAAI,EAAE,GAAG,EAAN,GAAc,CAAC,EAAF,GAAQ,EAA7B;AACA,MAAI,CAAC,GAAG,CAAR,EACE,CAAC,IAAI,WAAL;AACF,SAAO,CAAP;AACD;;AAED,SAAS,QAAT,CAAkB,EAAlB,EAAsB,EAAtB,EAA0B,EAA1B,EAA8B,EAA9B,EAAkC,EAAlC,EAAsC;AACpC,MAAI,CAAC,GAAI,EAAE,GAAG,EAAN,GAAa,EAAE,GAAG,EAAlB,GAAyB,EAAE,GAAG,EAAtC;AACA,MAAI,CAAC,GAAG,CAAR,EACE,CAAC,IAAI,WAAL;AACF,SAAO,CAAP;AACD;;AAED,SAAS,QAAT,CAAkB,EAAlB,EAAsB,EAAtB,EAA0B,EAA1B,EAA8B,EAA9B,EAAkC,EAAlC,EAAsC,EAAtC,EAA0C;AACxC,MAAI,CAAC,GAAI,EAAE,GAAG,EAAN,GAAa,EAAE,GAAG,EAAlB,GAAyB,EAAE,GAAG,EAAtC;AACA,MAAI,CAAC,GAAG,CAAR,EACE,CAAC,IAAI,WAAL;AACF,SAAO,CAAP;AACD;;AAED,SAAS,SAAT,CAAmB,EAAnB,EAAuB,EAAvB,EAA2B;AACzB,MAAI,KAAK,GAAG,SAAS,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAArB;AACA,MAAI,KAAK,GAAG,SAAS,CAAC,EAAD,EAAK,EAAL,EAAS,CAAT,CAArB,CAFyB,CAEQ;;AACjC,MAAI,KAAK,GAAG,SAAS,CAAC,EAAD,EAAK,EAAL,EAAS,CAAT,CAArB,CAHyB,CAGQ;;AAEjC,MAAI,CAAC,GAAG,KAAK,GAAG,KAAR,GAAgB,KAAxB;AACA,MAAI,CAAC,GAAG,CAAR,EACE,CAAC,IAAI,WAAL;AACF,SAAO,CAAP;AACD;;AAED,SAAS,SAAT,CAAmB,EAAnB,EAAuB,EAAvB,EAA2B;AACzB,MAAI,KAAK,GAAG,SAAS,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAArB;AACA,MAAI,KAAK,GAAG,SAAS,CAAC,EAAD,EAAK,EAAL,EAAS,CAAT,CAArB,CAFyB,CAEQ;;AACjC,MAAI,KAAK,GAAG,SAAS,CAAC,EAAD,EAAK,EAAL,EAAS,CAAT,CAArB,CAHyB,CAGQ;;AAEjC,MAAI,CAAC,GAAG,KAAK,GAAG,KAAR,GAAgB,KAAxB;AACA,MAAI,CAAC,GAAG,CAAR,EACE,CAAC,IAAI,WAAL;AACF,SAAO,CAAP;AACD;;AAED,SAAS,SAAT,CAAmB,EAAnB,EAAuB,EAAvB,EAA2B;AACzB,MAAI,KAAK,GAAG,SAAS,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAArB;AACA,MAAI,KAAK,GAAG,SAAS,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAArB;AACA,MAAI,KAAK,GAAG,SAAS,CAAC,EAAD,EAAK,EAAL,EAAS,CAAT,CAArB,CAHyB,CAGQ;;AAEjC,MAAI,CAAC,GAAG,KAAK,GAAG,KAAR,GAAgB,KAAxB;AACA,MAAI,CAAC,GAAG,CAAR,EACE,CAAC,IAAI,WAAL;AACF,SAAO,CAAP;AACD;;AAED,SAAS,SAAT,CAAmB,EAAnB,EAAuB,EAAvB,EAA2B;AACzB,MAAI,KAAK,GAAG,SAAS,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAArB;AACA,MAAI,KAAK,GAAG,SAAS,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAArB;AACA,MAAI,KAAK,GAAG,SAAS,CAAC,EAAD,EAAK,EAAL,EAAS,CAAT,CAArB,CAHyB,CAGQ;;AAEjC,MAAI,CAAC,GAAG,KAAK,GAAG,KAAR,GAAgB,KAAxB;AACA,MAAI,CAAC,GAAG,CAAR,EACE,CAAC,IAAI,WAAL;AACF,SAAO,CAAP;AACD;;AAED,SAAS,SAAT,CAAmB,EAAnB,EAAuB,EAAvB,EAA2B;AACzB,MAAI,KAAK,GAAG,SAAS,CAAC,EAAD,EAAK,EAAL,EAAS,CAAT,CAArB;AACA,MAAI,KAAK,GAAG,SAAS,CAAC,EAAD,EAAK,EAAL,EAAS,CAAT,CAArB;AACA,MAAI,KAAK,GAAG,QAAQ,CAAC,EAAD,EAAK,EAAL,EAAS,CAAT,CAApB;AAEA,MAAI,CAAC,GAAG,KAAK,GAAG,KAAR,GAAgB,KAAxB;AACA,MAAI,CAAC,GAAG,CAAR,EACE,CAAC,IAAI,WAAL;AACF,SAAO,CAAP;AACD;;AAED,SAAS,SAAT,CAAmB,EAAnB,EAAuB,EAAvB,EAA2B;AACzB,MAAI,KAAK,GAAG,SAAS,CAAC,EAAD,EAAK,EAAL,EAAS,CAAT,CAArB;AACA,MAAI,KAAK,GAAG,SAAS,CAAC,EAAD,EAAK,EAAL,EAAS,CAAT,CAArB;AACA,MAAI,KAAK,GAAG,QAAQ,CAAC,EAAD,EAAK,EAAL,EAAS,CAAT,CAApB;AAEA,MAAI,CAAC,GAAG,KAAK,GAAG,KAAR,GAAgB,KAAxB;AACA,MAAI,CAAC,GAAG,CAAR,EACE,CAAC,IAAI,WAAL;AACF,SAAO,CAAP;AACD;;AAED,SAAS,SAAT,CAAmB,EAAnB,EAAuB,EAAvB,EAA2B;AACzB,MAAI,KAAK,GAAG,SAAS,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAArB;AACA,MAAI,KAAK,GAAG,SAAS,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAArB,CAFyB,CAES;;AAClC,MAAI,KAAK,GAAG,QAAQ,CAAC,EAAD,EAAK,EAAL,EAAS,CAAT,CAApB;AAEA,MAAI,CAAC,GAAG,KAAK,GAAG,KAAR,GAAgB,KAAxB;AACA,MAAI,CAAC,GAAG,CAAR,EACE,CAAC,IAAI,WAAL;AACF,SAAO,CAAP;AACD;;AAED,SAAS,SAAT,CAAmB,EAAnB,EAAuB,EAAvB,EAA2B;AACzB,MAAI,KAAK,GAAG,SAAS,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAArB;AACA,MAAI,KAAK,GAAG,SAAS,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAArB,CAFyB,CAES;;AAClC,MAAI,KAAK,GAAG,QAAQ,CAAC,EAAD,EAAK,EAAL,EAAS,CAAT,CAApB;AAEA,MAAI,CAAC,GAAG,KAAK,GAAG,KAAR,GAAgB,KAAxB;AACA,MAAI,CAAC,GAAG,CAAR,EACE,CAAC,IAAI,WAAL;AACF,SAAO,CAAP;AACF;;ACvUA,IAAI/B,OAAK,GAAGF,OAAZ;AAEA,IAAI,MAAM,GAAGC,IAAb;;AAEA,SAAS,MAAT,GAAkB;AAChB,MAAI,EAAE,gBAAgB,MAAlB,CAAJ,EACE,OAAO,IAAI,MAAJ,EAAP;AAEF,EAAA,MAAM,CAAC,IAAP,CAAY,IAAZ;AACA,OAAK,CAAL,GAAS,CACP,UADO,EACK,UADL,EAEP,UAFO,EAEK,UAFL,EAGP,UAHO,EAGK,UAHL,EAIP,UAJO,EAIK,UAJL,EAKP,UALO,EAKK,UALL,EAMP,UANO,EAMK,UANL,EAOP,UAPO,EAOK,UAPL,EAQP,UARO,EAQK,UARL,CAAT;AASD;;AACDC,OAAK,CAAC,QAANA,CAAe,MAAfA,EAAuB,MAAvBA;IACA,IAAc,GAAG,M;AAEjB,MAAM,CAAC,SAAP,GAAmB,IAAnB;AACA,MAAM,CAAC,OAAP,GAAiB,GAAjB;AACA,MAAM,CAAC,YAAP,GAAsB,GAAtB;AACA,MAAM,CAAC,SAAP,GAAmB,GAAnB;;AAEA,MAAM,CAAC,SAAP,CAAiB,OAAjB,GAA2B,SAAS,MAAT,CAAgB,GAAhB,EAAqB;AAC9C,MAAI,GAAG,KAAK,KAAZ,EACE,OAAOA,OAAK,CAAC,OAANA,CAAc,KAAK,CAAL,CAAO,KAAP,CAAa,CAAb,EAAgB,EAAhB,CAAdA,EAAmC,KAAnCA,CAAP,CADF,KAGE,OAAOA,OAAK,CAAC,OAANA,CAAc,KAAK,CAAL,CAAO,KAAP,CAAa,CAAb,EAAgB,EAAhB,CAAdA,EAAmC,KAAnCA,CAAP;AACH,CALD;;AC3BY,GAAA,CAAA,IAAA,GAAGF,EAAH;AACE,GAAA,CAAA,MAAA,GAAGC,IAAH;AACA,GAAA,CAAA,MAAA,GAAG6B,IAAH;AACA,GAAA,CAAA,MAAA,GAAGC,IAAH;AACd,GAAA,CAAA,MAAA,GAAiBG,IAAjB;;ACJA,IAAIhC,OAAK,GAAGF,OAAZ;AACA,IAAI,MAAM,GAAGC,QAAb;AAEA,IAAI,MAAM,GAAGC,OAAK,CAAC,MAAnB;AACA,IAAI,KAAK,GAAGA,OAAK,CAAC,KAAlB;AACA,IAAI,OAAO,GAAGA,OAAK,CAAC,OAApB;AACA,IAAI,OAAO,GAAGA,OAAK,CAAC,OAApB;AACA,IAAI,SAAS,GAAG,MAAM,CAAC,SAAvB;;AAEA,SAAS,SAAT,GAAqB;AACnB,MAAI,EAAE,gBAAgB,SAAlB,CAAJ,EACE,OAAO,IAAI,SAAJ,EAAP;AAEF,EAAA,SAAS,CAAC,IAAV,CAAe,IAAf;AAEA,OAAK,CAAL,GAAS,CAAE,UAAF,EAAc,UAAd,EAA0B,UAA1B,EAAsC,UAAtC,EAAkD,UAAlD,CAAT;AACA,OAAK,MAAL,GAAc,QAAd;AACD;;AACDA,OAAK,CAAC,QAANA,CAAe,SAAfA,EAA0B,SAA1BA;AACiB,MAAA,CAAA,SAAA,GAAG,SAAH;AAEjB,SAAS,CAAC,SAAV,GAAsB,GAAtB;AACA,SAAS,CAAC,OAAV,GAAoB,GAApB;AACA,SAAS,CAAC,YAAV,GAAyB,GAAzB;AACA,SAAS,CAAC,SAAV,GAAsB,EAAtB;;AAEA,SAAS,CAAC,SAAV,CAAoB,OAApB,GAA8B,SAAS,MAAT,CAAgB,GAAhB,EAAqB,KAArB,EAA4B;AACxD,MAAI,CAAC,GAAG,KAAK,CAAL,CAAO,CAAP,CAAR;AACA,MAAI,CAAC,GAAG,KAAK,CAAL,CAAO,CAAP,CAAR;AACA,MAAI,CAAC,GAAG,KAAK,CAAL,CAAO,CAAP,CAAR;AACA,MAAI,CAAC,GAAG,KAAK,CAAL,CAAO,CAAP,CAAR;AACA,MAAI,CAAC,GAAG,KAAK,CAAL,CAAO,CAAP,CAAR;AACA,MAAI,EAAE,GAAG,CAAT;AACA,MAAI,EAAE,GAAG,CAAT;AACA,MAAI,EAAE,GAAG,CAAT;AACA,MAAI,EAAE,GAAG,CAAT;AACA,MAAI,EAAE,GAAG,CAAT;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,EAApB,EAAwB,CAAC,EAAzB,EAA6B;AAC3B,QAAI,CAAC,GAAG,KAAK,CACX,MAAM,CACJ,OAAO,CAAC,CAAD,EAAI,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAL,EAAmB,GAAG,CAAC,CAAC,CAAC,CAAD,CAAD,GAAO,KAAR,CAAtB,EAAsC,CAAC,CAAC,CAAD,CAAvC,CADH,EAEJ,CAAC,CAAC,CAAD,CAFG,CADK,EAIX,CAJW,CAAb;AAKA,IAAA,CAAC,GAAG,CAAJ;AACA,IAAA,CAAC,GAAG,CAAJ;AACA,IAAA,CAAC,GAAG,MAAM,CAAC,CAAD,EAAI,EAAJ,CAAV;AACA,IAAA,CAAC,GAAG,CAAJ;AACA,IAAA,CAAC,GAAG,CAAJ;AACA,IAAA,CAAC,GAAG,KAAK,CACP,MAAM,CACJ,OAAO,CAAC,EAAD,EAAK,CAAC,CAAC,KAAK,CAAN,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,CAAN,EAA4B,GAAG,CAAC,EAAE,CAAC,CAAD,CAAF,GAAQ,KAAT,CAA/B,EAAgD,EAAE,CAAC,CAAD,CAAlD,CADH,EAEJ,EAAE,CAAC,CAAD,CAFE,CADC,EAIP,EAJO,CAAT;AAKA,IAAA,EAAE,GAAG,EAAL;AACA,IAAA,EAAE,GAAG,EAAL;AACA,IAAA,EAAE,GAAG,MAAM,CAAC,EAAD,EAAK,EAAL,CAAX;AACA,IAAA,EAAE,GAAG,EAAL;AACA,IAAA,EAAE,GAAG,CAAL;AACD;;AACD,EAAA,CAAC,GAAG,OAAO,CAAC,KAAK,CAAL,CAAO,CAAP,CAAD,EAAY,CAAZ,EAAe,EAAf,CAAX;AACA,OAAK,CAAL,CAAO,CAAP,IAAY,OAAO,CAAC,KAAK,CAAL,CAAO,CAAP,CAAD,EAAY,CAAZ,EAAe,EAAf,CAAnB;AACA,OAAK,CAAL,CAAO,CAAP,IAAY,OAAO,CAAC,KAAK,CAAL,CAAO,CAAP,CAAD,EAAY,CAAZ,EAAe,EAAf,CAAnB;AACA,OAAK,CAAL,CAAO,CAAP,IAAY,OAAO,CAAC,KAAK,CAAL,CAAO,CAAP,CAAD,EAAY,CAAZ,EAAe,EAAf,CAAnB;AACA,OAAK,CAAL,CAAO,CAAP,IAAY,OAAO,CAAC,KAAK,CAAL,CAAO,CAAP,CAAD,EAAY,CAAZ,EAAe,EAAf,CAAnB;AACA,OAAK,CAAL,CAAO,CAAP,IAAY,CAAZ;AACD,CAvCD;;AAyCA,SAAS,CAAC,SAAV,CAAoB,OAApB,GAA8B,SAAS,MAAT,CAAgB,GAAhB,EAAqB;AACjD,MAAI,GAAG,KAAK,KAAZ,EACE,OAAOA,OAAK,CAAC,OAANA,CAAc,KAAK,CAAnBA,EAAsB,QAAtBA,CAAP,CADF,KAGE,OAAOA,OAAK,CAAC,OAANA,CAAc,KAAK,CAAnBA,EAAsB,QAAtBA,CAAP;AACH,CALD;;AAOA,SAAS,CAAT,CAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB;AACrB,MAAI,CAAC,IAAI,EAAT,EACE,OAAO,CAAC,GAAG,CAAJ,GAAQ,CAAf,CADF,KAEK,IAAI,CAAC,IAAI,EAAT,EACH,OAAQ,CAAC,GAAG,CAAL,GAAY,CAAC,CAAF,GAAO,CAAzB,CADG,KAEA,IAAI,CAAC,IAAI,EAAT,EACH,OAAO,CAAC,CAAC,GAAI,CAAC,CAAP,IAAa,CAApB,CADG,KAEA,IAAI,CAAC,IAAI,EAAT,EACH,OAAQ,CAAC,GAAG,CAAL,GAAW,CAAC,GAAI,CAAC,CAAxB,CADG,KAGH,OAAO,CAAC,IAAI,CAAC,GAAI,CAAC,CAAV,CAAR;AACH;;AAED,SAAS,CAAT,CAAW,CAAX,EAAc;AACZ,MAAI,CAAC,IAAI,EAAT,EACE,OAAO,UAAP,CADF,KAEK,IAAI,CAAC,IAAI,EAAT,EACH,OAAO,UAAP,CADG,KAEA,IAAI,CAAC,IAAI,EAAT,EACH,OAAO,UAAP,CADG,KAEA,IAAI,CAAC,IAAI,EAAT,EACH,OAAO,UAAP,CADG,KAGH,OAAO,UAAP;AACH;;AAED,SAAS,EAAT,CAAY,CAAZ,EAAe;AACb,MAAI,CAAC,IAAI,EAAT,EACE,OAAO,UAAP,CADF,KAEK,IAAI,CAAC,IAAI,EAAT,EACH,OAAO,UAAP,CADG,KAEA,IAAI,CAAC,IAAI,EAAT,EACH,OAAO,UAAP,CADG,KAEA,IAAI,CAAC,IAAI,EAAT,EACH,OAAO,UAAP,CADG,KAGH,OAAO,UAAP;AACH;;AAED,IAAI,CAAC,GAAG,CACN,CADM,EACH,CADG,EACA,CADA,EACG,CADH,EACM,CADN,EACS,CADT,EACY,CADZ,EACe,CADf,EACkB,CADlB,EACqB,CADrB,EACwB,EADxB,EAC4B,EAD5B,EACgC,EADhC,EACoC,EADpC,EACwC,EADxC,EAC4C,EAD5C,EAEN,CAFM,EAEH,CAFG,EAEA,EAFA,EAEI,CAFJ,EAEO,EAFP,EAEW,CAFX,EAEc,EAFd,EAEkB,CAFlB,EAEqB,EAFrB,EAEyB,CAFzB,EAE4B,CAF5B,EAE+B,CAF/B,EAEkC,CAFlC,EAEqC,EAFrC,EAEyC,EAFzC,EAE6C,CAF7C,EAGN,CAHM,EAGH,EAHG,EAGC,EAHD,EAGK,CAHL,EAGQ,CAHR,EAGW,EAHX,EAGe,CAHf,EAGkB,CAHlB,EAGqB,CAHrB,EAGwB,CAHxB,EAG2B,CAH3B,EAG8B,CAH9B,EAGiC,EAHjC,EAGqC,EAHrC,EAGyC,CAHzC,EAG4C,EAH5C,EAIN,CAJM,EAIH,CAJG,EAIA,EAJA,EAII,EAJJ,EAIQ,CAJR,EAIW,CAJX,EAIc,EAJd,EAIkB,CAJlB,EAIqB,EAJrB,EAIyB,CAJzB,EAI4B,CAJ5B,EAI+B,EAJ/B,EAImC,EAJnC,EAIuC,CAJvC,EAI0C,CAJ1C,EAI6C,CAJ7C,EAKN,CALM,EAKH,CALG,EAKA,CALA,EAKG,CALH,EAKM,CALN,EAKS,EALT,EAKa,CALb,EAKgB,EALhB,EAKoB,EALpB,EAKwB,CALxB,EAK2B,CAL3B,EAK8B,CAL9B,EAKiC,EALjC,EAKqC,CALrC,EAKwC,EALxC,EAK4C,EAL5C,CAAR;AAQA,IAAI,EAAE,GAAG,CACP,CADO,EACJ,EADI,EACA,CADA,EACG,CADH,EACM,CADN,EACS,CADT,EACY,EADZ,EACgB,CADhB,EACmB,EADnB,EACuB,CADvB,EAC0B,EAD1B,EAC8B,CAD9B,EACiC,CADjC,EACoC,EADpC,EACwC,CADxC,EAC2C,EAD3C,EAEP,CAFO,EAEJ,EAFI,EAEA,CAFA,EAEG,CAFH,EAEM,CAFN,EAES,EAFT,EAEa,CAFb,EAEgB,EAFhB,EAEoB,EAFpB,EAEwB,EAFxB,EAE4B,CAF5B,EAE+B,EAF/B,EAEmC,CAFnC,EAEsC,CAFtC,EAEyC,CAFzC,EAE4C,CAF5C,EAGP,EAHO,EAGH,CAHG,EAGA,CAHA,EAGG,CAHH,EAGM,CAHN,EAGS,EAHT,EAGa,CAHb,EAGgB,CAHhB,EAGmB,EAHnB,EAGuB,CAHvB,EAG0B,EAH1B,EAG8B,CAH9B,EAGiC,EAHjC,EAGqC,CAHrC,EAGwC,CAHxC,EAG2C,EAH3C,EAIP,CAJO,EAIJ,CAJI,EAID,CAJC,EAIE,CAJF,EAIK,CAJL,EAIQ,EAJR,EAIY,EAJZ,EAIgB,CAJhB,EAImB,CAJnB,EAIsB,EAJtB,EAI0B,CAJ1B,EAI6B,EAJ7B,EAIiC,CAJjC,EAIoC,CAJpC,EAIuC,EAJvC,EAI2C,EAJ3C,EAKP,EALO,EAKH,EALG,EAKC,EALD,EAKK,CALL,EAKQ,CALR,EAKW,CALX,EAKc,CALd,EAKiB,CALjB,EAKoB,CALpB,EAKuB,CALvB,EAK0B,EAL1B,EAK8B,EAL9B,EAKkC,CALlC,EAKqC,CALrC,EAKwC,CALxC,EAK2C,EAL3C,CAAT;AAQA,IAAI,CAAC,GAAG,CACN,EADM,EACF,EADE,EACE,EADF,EACM,EADN,EACU,CADV,EACa,CADb,EACgB,CADhB,EACmB,CADnB,EACsB,EADtB,EAC0B,EAD1B,EAC8B,EAD9B,EACkC,EADlC,EACsC,CADtC,EACyC,CADzC,EAC4C,CAD5C,EAC+C,CAD/C,EAEN,CAFM,EAEH,CAFG,EAEA,CAFA,EAEG,EAFH,EAEO,EAFP,EAEW,CAFX,EAEc,CAFd,EAEiB,EAFjB,EAEqB,CAFrB,EAEwB,EAFxB,EAE4B,EAF5B,EAEgC,CAFhC,EAEmC,EAFnC,EAEuC,CAFvC,EAE0C,EAF1C,EAE8C,EAF9C,EAGN,EAHM,EAGF,EAHE,EAGE,CAHF,EAGK,CAHL,EAGQ,EAHR,EAGY,CAHZ,EAGe,EAHf,EAGmB,EAHnB,EAGuB,EAHvB,EAG2B,CAH3B,EAG8B,EAH9B,EAGkC,CAHlC,EAGqC,CAHrC,EAGwC,EAHxC,EAG4C,CAH5C,EAG+C,CAH/C,EAIN,EAJM,EAIF,EAJE,EAIE,EAJF,EAIM,EAJN,EAIU,EAJV,EAIc,EAJd,EAIkB,CAJlB,EAIqB,CAJrB,EAIwB,CAJxB,EAI2B,EAJ3B,EAI+B,CAJ/B,EAIkC,CAJlC,EAIqC,CAJrC,EAIwC,CAJxC,EAI2C,CAJ3C,EAI8C,EAJ9C,EAKN,CALM,EAKH,EALG,EAKC,CALD,EAKI,EALJ,EAKQ,CALR,EAKW,CALX,EAKc,EALd,EAKkB,EALlB,EAKsB,CALtB,EAKyB,EALzB,EAK6B,EAL7B,EAKiC,EALjC,EAKqC,EALrC,EAKyC,CALzC,EAK4C,CAL5C,EAK+C,CAL/C,CAAR;AAQA,IAAI,EAAE,GAAG,CACP,CADO,EACJ,CADI,EACD,CADC,EACE,EADF,EACM,EADN,EACU,EADV,EACc,EADd,EACkB,CADlB,EACqB,CADrB,EACwB,CADxB,EAC2B,CAD3B,EAC8B,EAD9B,EACkC,EADlC,EACsC,EADtC,EAC0C,EAD1C,EAC8C,CAD9C,EAEP,CAFO,EAEJ,EAFI,EAEA,EAFA,EAEI,CAFJ,EAEO,EAFP,EAEW,CAFX,EAEc,CAFd,EAEiB,EAFjB,EAEqB,CAFrB,EAEwB,CAFxB,EAE2B,EAF3B,EAE+B,CAF/B,EAEkC,CAFlC,EAEqC,EAFrC,EAEyC,EAFzC,EAE6C,EAF7C,EAGP,CAHO,EAGJ,CAHI,EAGD,EAHC,EAGG,EAHH,EAGO,CAHP,EAGU,CAHV,EAGa,CAHb,EAGgB,EAHhB,EAGoB,EAHpB,EAGwB,EAHxB,EAG4B,CAH5B,EAG+B,EAH/B,EAGmC,EAHnC,EAGuC,EAHvC,EAG2C,CAH3C,EAG8C,CAH9C,EAIP,EAJO,EAIH,CAJG,EAIA,CAJA,EAIG,EAJH,EAIO,EAJP,EAIW,EAJX,EAIe,CAJf,EAIkB,EAJlB,EAIsB,CAJtB,EAIyB,CAJzB,EAI4B,EAJ5B,EAIgC,CAJhC,EAImC,EAJnC,EAIuC,CAJvC,EAI0C,EAJ1C,EAI8C,CAJ9C,EAKP,CALO,EAKJ,CALI,EAKD,EALC,EAKG,CALH,EAKM,EALN,EAKU,CALV,EAKa,EALb,EAKiB,CALjB,EAKoB,CALpB,EAKuB,EALvB,EAK2B,CAL3B,EAK8B,CAL9B,EAKiC,EALjC,EAKqC,EALrC,EAKyC,EALzC,EAK6C,EAL7C,CAAT;ACzIA,IAAI,KAAK,GAAGF,OAAZ;AACA,IAAIF,QAAM,GAAGG,kBAAb;;AAEA,SAAS,IAAT,CAAc,IAAd,EAAoB,GAApB,EAAyB,GAAzB,EAA8B;AAC5B,MAAI,EAAE,gBAAgB,IAAlB,CAAJ,EACE,OAAO,IAAI,IAAJ,CAAS,IAAT,EAAe,GAAf,EAAoB,GAApB,CAAP;AACF,OAAK,IAAL,GAAY,IAAZ;AACA,OAAK,SAAL,GAAiB,IAAI,CAAC,SAAL,GAAiB,CAAlC;AACA,OAAK,OAAL,GAAe,IAAI,CAAC,OAAL,GAAe,CAA9B;AACA,OAAK,KAAL,GAAa,IAAb;AACA,OAAK,KAAL,GAAa,IAAb;;AAEA,OAAK,KAAL,CAAW,KAAK,CAAC,OAAN,CAAc,GAAd,EAAmB,GAAnB,CAAX;AACD;;IACD,IAAc,GAAG,I;;AAEjB,IAAI,CAAC,SAAL,CAAe,KAAf,GAAuB,SAAS,IAAT,CAAc,GAAd,EAAmB;AAC1C;AACE,MAAI,GAAG,CAAC,MAAJ,GAAa,KAAK,SAAtB,EACE,GAAG,GAAG,IAAI,KAAK,IAAT,GAAgB,MAAhB,CAAuB,GAAvB,EAA4B,MAA5B,EAAN;AACFH,EAAAA,QAAM,CAAC,GAAG,CAAC,MAAJ,IAAc,KAAK,SAApB,CAANA,CAJwC,CAM1C;;AACE,OAAK,IAAI,CAAC,GAAG,GAAG,CAAC,MAAjB,EAAyB,CAAC,GAAG,KAAK,SAAlC,EAA6C,CAAC,EAA9C;AACE,IAAA,GAAG,CAAC,IAAJ,CAAS,CAAT;AADF;;AAGA,OAAK,CAAC,GAAG,CAAT,EAAY,CAAC,GAAG,GAAG,CAAC,MAApB,EAA4B,CAAC,EAA7B;AACE,IAAA,GAAG,CAAC,CAAD,CAAH,IAAU,IAAV;AADF;;AAEA,OAAK,KAAL,GAAa,IAAI,KAAK,IAAT,GAAgB,MAAhB,CAAuB,GAAvB,CAAb,CAZwC,CAc1C;;AACE,OAAK,CAAC,GAAG,CAAT,EAAY,CAAC,GAAG,GAAG,CAAC,MAApB,EAA4B,CAAC,EAA7B;AACE,IAAA,GAAG,CAAC,CAAD,CAAH,IAAU,IAAV;AADF;;AAEA,OAAK,KAAL,GAAa,IAAI,KAAK,IAAT,GAAgB,MAAhB,CAAuB,GAAvB,CAAb;AACD,CAlBD;;AAoBA,IAAI,CAAC,SAAL,CAAe,MAAf,GAAwB,SAAS,MAAT,CAAgB,GAAhB,EAAqB,GAArB,EAA0B;AAChD,OAAK,KAAL,CAAW,MAAX,CAAkB,GAAlB,EAAuB,GAAvB;AACA,SAAO,IAAP;AACD,CAHD;;AAKA,IAAI,CAAC,SAAL,CAAe,MAAf,GAAwB,SAAS,MAAT,CAAgB,GAAhB,EAAqB;AAC3C,OAAK,KAAL,CAAW,MAAX,CAAkB,KAAK,KAAL,CAAW,MAAX,EAAlB;AACA,SAAO,KAAK,KAAL,CAAW,MAAX,CAAkB,GAAlB,CAAP;AACD,CAHD;;;AC3CA,MAAI,IAAI,GAAG,OAAX;AAEA,EAAA,IAAI,CAAC,KAAL,GAAaE,OAAb;AACA,EAAA,IAAI,CAAC,MAAL,GAAcC,QAAd;AACA,EAAA,IAAI,CAAC,GAAL,GAAW6B,GAAX;AACA,EAAA,IAAI,CAAC,MAAL,GAAcC,MAAd;AACA,EAAA,IAAI,CAAC,IAAL,GAAYG,IAAZ,C,CAEA;;AACA,EAAA,IAAI,CAAC,IAAL,GAAY,IAAI,CAAC,GAAL,CAAS,IAArB;AACA,EAAA,IAAI,CAAC,MAAL,GAAc,IAAI,CAAC,GAAL,CAAS,MAAvB;AACA,EAAA,IAAI,CAAC,MAAL,GAAc,IAAI,CAAC,GAAL,CAAS,MAAvB;AACA,EAAA,IAAI,CAAC,MAAL,GAAc,IAAI,CAAC,GAAL,CAAS,MAAvB;AACA,EAAA,IAAI,CAAC,MAAL,GAAc,IAAI,CAAC,GAAL,CAAS,MAAvB;AACA,EAAA,IAAI,CAAC,SAAL,GAAiB,IAAI,CAAC,MAAL,CAAY,SAA7B;;;;ACdO,IAAMC,SAAO,GAAG,cAAhB;ACCP,IAAI,sBAAsB,GAAG,KAA7B;AACA,IAAI,aAAa,GAAG,KAApB;AACA,IAAM,SAAS,GAAG;AAAE,EAAA,KAAK,EAAE,CAAT;AAAY,aAAW,CAAvB;AAA0B,EAAA,IAAI,EAAE,CAAhC;AAAmC,EAAA,OAAO,EAAE,CAA5C;AAA+C,EAAA,KAAK,EAAE,CAAtD;AAAyD,EAAA,GAAG,EAAE;AAA9D,CAAlB;AACA,IAAI,SAAS,GAAG,SAAS,CAAC,SAAD,CAAzB;AAEA,IAAI,aAAa,GAAG,IAApB;;AACA,SAAS,eAAT,GAA2B;AACvB,MAAI;AACA,QAAM,OAAO,GAAG,EAAhB,CADA,CAER;;AACQ,KAAC,KAAD,EAAQ,KAAR,EAAe,MAAf,EAAuB,MAAvB,EAA+B,OAA/B,CAAuC,UAAC,IAAD,EAAU;AAC7C,UAAI;AACA,YAAI,OAAO,SAAP,CAAiB,IAAjB,MAA2B,MAA/B,EAAuC;AACnC,gBAAM,IAAI,KAAJ,CAAU,eAAV,CAAN;AACH;;AACD;AACH,OALD,CAMA,OAAO,KAAP,EAAc;AACV,QAAA,OAAO,CAAC,IAAR,CAAa,IAAb;AACH;AACJ,KAVD;;AAWA,QAAI,OAAO,CAAC,MAAZ,EAAoB;AAChB,YAAM,IAAI,KAAJ,CAAU,aAAa,OAAO,CAAC,IAAR,CAAa,IAAb,CAAvB,CAAN;AACH;;AACD,QAAI,MAAM,CAAC,YAAP,CAAoB,IAApB,EAA0B,SAA1B,CAAoC,KAApC,MAA+C,MAAM,CAAC,YAAP,CAAoB,IAApB,EAA0B,MAA1B,CAAnD,EAAsF;AAClF,YAAM,IAAI,KAAJ,CAAU,uBAAV,CAAN;AACH;AACJ,GApBD,CAqBA,OAAO,KAAP,EAAc;AACV,WAAO,KAAK,CAAC,OAAb;AACH;;AACD,SAAO,IAAP;AACH;;AACD,IAAM,eAAe,GAAG,eAAe,EAAvC;;AACO,IAAI,QAAJ;;AACP,CAAC,UAAU,QAAV,EAAoB;AACjB,EAAA,QAAQ,CAAC,OAAD,CAAR,GAAoB,OAApB;AACA,EAAA,QAAQ,CAAC,MAAD,CAAR,GAAmB,MAAnB;AACA,EAAA,QAAQ,CAAC,SAAD,CAAR,GAAsB,SAAtB;AACA,EAAA,QAAQ,CAAC,OAAD,CAAR,GAAoB,OAApB;AACA,EAAA,QAAQ,CAAC,KAAD,CAAR,GAAkB,KAAlB;AACH,CAND,EAMG,QAAQ,KAAK,QAAQ,GAAG,EAAhB,CANX;;AAOO,IAAI,SAAJ;;AACP,CAAC,UAAU,SAAV,EAAqB;AACtB;AACA;AACA;AACI,EAAA,SAAS,CAAC,eAAD,CAAT,GAA6B,eAA7B,CAJkB,CAKtB;;AACI,EAAA,SAAS,CAAC,iBAAD,CAAT,GAA+B,iBAA/B,CANkB,CAOtB;AACA;;AACI,EAAA,SAAS,CAAC,uBAAD,CAAT,GAAqC,uBAArC,CATkB,CAUtB;AACA;;AACI,EAAA,SAAS,CAAC,eAAD,CAAT,GAA6B,eAA7B,CAZkB,CAatB;;AACI,EAAA,SAAS,CAAC,cAAD,CAAT,GAA4B,cAA5B,CAdkB,CAetB;;AACI,EAAA,SAAS,CAAC,SAAD,CAAT,GAAuB,SAAvB,CAhBkB,CAiBtB;AACA;AACA;;AACI,EAAA,SAAS,CAAC,gBAAD,CAAT,GAA8B,gBAA9B,CApBkB,CAqBtB;AACA;AACA;;AACI,EAAA,SAAS,CAAC,eAAD,CAAT,GAA6B,eAA7B,CAxBkB,CAyBtB;AACA;AACA;AACA;;AACI,EAAA,SAAS,CAAC,aAAD,CAAT,GAA2B,aAA3B,CA7BkB,CA8BtB;AACA;AACA;;AACI,EAAA,SAAS,CAAC,kBAAD,CAAT,GAAgC,kBAAhC,CAjCkB,CAkCtB;AACA;AACA;;AACI,EAAA,SAAS,CAAC,kBAAD,CAAT,GAAgC,kBAAhC,CArCkB,CAsCtB;AACA;AACA;;AACI,EAAA,SAAS,CAAC,qBAAD,CAAT,GAAmC,qBAAnC,CAzCkB,CA0CtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,EAAA,SAAS,CAAC,gBAAD,CAAT,GAA8B,gBAA9B,CApDkB,CAqDtB;AACA;;AACI,EAAA,SAAS,CAAC,oBAAD,CAAT,GAAkC,oBAAlC,CAvDkB,CAwDtB;AACA;;AACI,EAAA,SAAS,CAAC,eAAD,CAAT,GAA6B,eAA7B,CA1DkB,CA2DtB;AACA;;AACI,EAAA,SAAS,CAAC,yBAAD,CAAT,GAAuC,yBAAvC,CA7DkB,CA8DtB;AACA;;AACI,EAAA,SAAS,CAAC,yBAAD,CAAT,GAAuC,yBAAvC,CAhEkB,CAiEtB;AACA;AACA;AACA;AACA;AACA;;AACI,EAAA,SAAS,CAAC,sBAAD,CAAT,GAAoC,sBAApC;AACH,CAxED,EAwEG,SAAS,KAAK,SAAS,GAAG,EAAjB,CAxEZ;;AA0EA,IAAM,GAAG,GAAG,kBAAZ;;IACa,M;AACT,kBAAY,OAAZ,EAAqB;AAAA;;AACjB,IAAA,MAAM,CAAC,cAAP,CAAsB,IAAtB,EAA4B,SAA5B,EAAuC;AACnC,MAAA,UAAU,EAAE,IADuB;AAEnC,MAAA,KAAK,EAAE,OAF4B;AAGnC,MAAA,QAAQ,EAAE;AAHyB,KAAvC;AAKH;;;;WACD,cAAK,QAAL,EAAe,IAAf,EAAqB;AACjB,UAAM,KAAK,GAAG,QAAQ,CAAC,WAAT,EAAd;;AACA,UAAI,SAAS,CAAC,KAAD,CAAT,IAAoB,IAAxB,EAA8B;AAC1B,aAAK,kBAAL,CAAwB,wBAAxB,EAAkD,UAAlD,EAA8D,QAA9D;AACH;;AACD,UAAI,SAAS,GAAG,SAAS,CAAC,KAAD,CAAzB,EAAkC;AAC9B;AACH;;AACD,MAAA,OAAO,CAAC,GAAR,CAAY,KAAZ,CAAkB,OAAlB,EAA2B,IAA3B;AACH;;;WACD,iBAAe;AAAA,wCAAN,IAAM;AAAN,QAAA,IAAM;AAAA;;AACX,WAAK,IAAL,CAAU,MAAM,CAAC,MAAP,CAAc,KAAxB,EAA+B,IAA/B;AACH;;;WACD,gBAAc;AAAA,yCAAN,IAAM;AAAN,QAAA,IAAM;AAAA;;AACV,WAAK,IAAL,CAAU,MAAM,CAAC,MAAP,CAAc,IAAxB,EAA8B,IAA9B;AACH;;;WACD,gBAAc;AAAA,yCAAN,IAAM;AAAN,QAAA,IAAM;AAAA;;AACV,WAAK,IAAL,CAAU,MAAM,CAAC,MAAP,CAAc,OAAxB,EAAiC,IAAjC;AACH;;;WACD,mBAAU,OAAV,EAAmB,IAAnB,EAAyB,MAAzB,EAAiC;AACrC;AACQ,UAAI,aAAJ,EAAmB;AACf,eAAO,KAAK,SAAL,CAAe,gBAAf,EAAiC,IAAjC,EAAuC,EAAvC,CAAP;AACH;;AACD,UAAI,CAAC,IAAL,EAAW;AACP,QAAA,IAAI,GAAG,MAAM,CAAC,MAAP,CAAc,aAArB;AACH;;AACD,UAAI,CAAC,MAAL,EAAa;AACT,QAAA,MAAM,GAAG,EAAT;AACH;;AACD,UAAM,cAAc,GAAG,EAAvB;AACA,MAAA,MAAM,CAAC,IAAP,CAAY,MAAZ,EAAoB,OAApB,CAA4B,UAAC,GAAD,EAAS;AACjC,YAAM,KAAK,GAAG,MAAM,CAAC,GAAD,CAApB;;AACA,YAAI;AACA,cAAI,KAAK,YAAY,UAArB,EAAiC;AAC7B,gBAAI,GAAG,GAAG,EAAV;;AACA,iBAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,EAAnC,EAAuC;AACnC,cAAA,GAAG,IAAI,GAAG,CAAC,KAAK,CAAC,CAAD,CAAL,IAAY,CAAb,CAAV;AACA,cAAA,GAAG,IAAI,GAAG,CAAC,KAAK,CAAC,CAAD,CAAL,GAAW,IAAZ,CAAV;AACH;;AACD,YAAA,cAAc,CAAC,IAAf,CAAoB,GAAG,GAAG,gBAAN,GAAyB,GAAzB,GAA+B,GAAnD;AACH,WAPD,MAQK;AACD,YAAA,cAAc,CAAC,IAAf,CAAoB,GAAG,GAAG,GAAN,GAAY,IAAI,CAAC,SAAL,CAAe,KAAf,CAAhC;AACH;AACJ,SAZD,CAaA,OAAO,KAAP,EAAc;AACV,UAAA,cAAc,CAAC,IAAf,CAAoB,GAAG,GAAG,GAAN,GAAY,IAAI,CAAC,SAAL,CAAe,MAAM,CAAC,GAAD,CAAN,CAAY,QAAZ,EAAf,CAAhC;AACH;AACJ,OAlBD;AAmBA,MAAA,cAAc,CAAC,IAAf,gBAA4B,IAA5B;AACA,MAAA,cAAc,CAAC,IAAf,mBAA+B,KAAK,OAApC;AACA,UAAM,MAAM,GAAG,OAAf;AACA,UAAI,GAAG,GAAG,EAAV;;AACA,cAAQ,IAAR;AACI,aAAK,SAAS,CAAC,aAAf;AAA8B;AAC1B,YAAA,GAAG,GAAG,eAAN;AACA,gBAAM,KAAK,GAAG,OAAd;;AACA,oBAAQ,KAAR;AACI,mBAAK,UAAL;AACA,mBAAK,WAAL;AACA,mBAAK,kBAAL;AACI,gBAAA,GAAG,IAAI,MAAM,KAAb;AACA;;AACJ,mBAAK,gBAAL;AACA,mBAAK,gBAAL;AACI,gBAAA,GAAG,IAAI,cAAP;AACA;;AACJ,mBAAK,wBAAL;AACI,gBAAA,GAAG,IAAI,iBAAP;AACA;AAZR;;AAcA;AACH;;AACD,aAAK,SAAS,CAAC,cAAf;AACA,aAAK,SAAS,CAAC,kBAAf;AACA,aAAK,SAAS,CAAC,WAAf;AACA,aAAK,SAAS,CAAC,aAAf;AACA,aAAK,SAAS,CAAC,uBAAf;AACA,aAAK,SAAS,CAAC,oBAAf;AACA,aAAK,SAAS,CAAC,uBAAf;AACI,UAAA,GAAG,GAAG,IAAN;AACA;AA5BR;;AA8BA,UAAI,GAAJ,EAAS;AACL,QAAA,OAAO,IAAI,iDAAiD,GAAjD,GAAuD,IAAlE;AACH;;AACD,UAAI,cAAc,CAAC,MAAnB,EAA2B;AACvB,QAAA,OAAO,IAAI,OAAO,cAAc,CAAC,IAAf,CAAoB,IAApB,CAAP,GAAmC,GAA9C;AACH,OAtE4B,CAuErC;;;AACQ,UAAM,KAAK,GAAG,IAAI,KAAJ,CAAU,OAAV,CAAd;AACA,MAAA,KAAK,CAAC,MAAN,GAAe,MAAf;AACA,MAAA,KAAK,CAAC,IAAN,GAAa,IAAb;AACA,MAAA,MAAM,CAAC,IAAP,CAAY,MAAZ,EAAoB,OAApB,CAA4B,UAAU,GAAV,EAAe;AACvC,QAAA,KAAK,CAAC,GAAD,CAAL,GAAa,MAAM,CAAC,GAAD,CAAnB;AACH,OAFD;AAGA,aAAO,KAAP;AACH;;;WACD,oBAAW,OAAX,EAAoB,IAApB,EAA0B,MAA1B,EAAkC;AAC9B,YAAM,KAAK,SAAL,CAAe,OAAf,EAAwB,IAAxB,EAA8B,MAA9B,CAAN;AACH;;;WACD,4BAAmB,OAAnB,EAA4B,IAA5B,EAAkC,KAAlC,EAAyC;AACrC,aAAO,KAAK,UAAL,CAAgB,OAAhB,EAAyB,MAAM,CAAC,MAAP,CAAc,gBAAvC,EAAyD;AAC5D,QAAA,QAAQ,EAAE,IADkD;AAE5D,QAAA,KAAK,EAAE;AAFqD,OAAzD,CAAP;AAIH;;;WACD,gBAAO,SAAP,EAAkB,OAAlB,EAA2B,IAA3B,EAAiC,MAAjC,EAAyC;AACrC,UAAI,CAAC,CAAC,SAAN,EAAiB;AACb;AACH;;AACD,WAAK,UAAL,CAAgB,OAAhB,EAAyB,IAAzB,EAA+B,MAA/B;AACH;;;WACD,wBAAe,SAAf,EAA0B,OAA1B,EAAmC,IAAnC,EAAyC,KAAzC,EAAgD;AAC5C,UAAI,CAAC,CAAC,SAAN,EAAiB;AACb;AACH;;AACD,WAAK,kBAAL,CAAwB,OAAxB,EAAiC,IAAjC,EAAuC,KAAvC;AACH;;;WACD,wBAAe,OAAf,EAAwB;AAIpB,UAAI,eAAJ,EAAqB;AACjB,aAAK,UAAL,CAAgB,6CAAhB,EAA+D,MAAM,CAAC,MAAP,CAAc,qBAA7E,EAAoG;AAChG,UAAA,SAAS,EAAE,4BADqF;AACvD,UAAA,IAAI,EAAE;AADiD,SAApG;AAGH;AACJ;;;WACD,yBAAgB,KAAhB,EAAuB,OAAvB,EAAgC;AAC5B,UAAI,OAAQ,KAAR,KAAmB,QAAvB,EAAiC;AAC7B;AACH;;AACD,UAAI,OAAO,IAAI,IAAf,EAAqB;AACjB,QAAA,OAAO,GAAG,gBAAV;AACH;;AACD,UAAI,KAAK,GAAG,CAAR,IAAa,KAAK,IAAI,gBAA1B,EAA4C;AACxC,aAAK,UAAL,CAAgB,OAAhB,EAAyB,MAAM,CAAC,MAAP,CAAc,aAAvC,EAAsD;AAClD,UAAA,SAAS,EAAE,kBADuC;AAElD,UAAA,KAAK,EAAE,mBAF2C;AAGlD,UAAA,KAAK,EAAE;AAH2C,SAAtD;AAKH;;AACD,UAAI,KAAK,GAAG,CAAZ,EAAe;AACX,aAAK,UAAL,CAAgB,OAAhB,EAAyB,MAAM,CAAC,MAAP,CAAc,aAAvC,EAAsD;AAClD,UAAA,SAAS,EAAE,kBADuC;AAElD,UAAA,KAAK,EAAE,aAF2C;AAGlD,UAAA,KAAK,EAAE;AAH2C,SAAtD;AAKH;AACJ;;;WACD,4BAAmB,KAAnB,EAA0B,aAA1B,EAAyC,OAAzC,EAAkD;AAC9C,UAAI,OAAJ,EAAa;AACT,QAAA,OAAO,GAAG,OAAO,OAAjB;AACH,OAFD,MAGK;AACD,QAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,KAAK,GAAG,aAAZ,EAA2B;AACvB,aAAK,UAAL,CAAgB,qBAAqB,OAArC,EAA8C,MAAM,CAAC,MAAP,CAAc,gBAA5D,EAA8E;AAC1E,UAAA,KAAK,EAAE,KADmE;AAE1E,UAAA,aAAa,EAAE;AAF2D,SAA9E;AAIH;;AACD,UAAI,KAAK,GAAG,aAAZ,EAA2B;AACvB,aAAK,UAAL,CAAgB,uBAAuB,OAAvC,EAAgD,MAAM,CAAC,MAAP,CAAc,mBAA9D,EAAmF;AAC/E,UAAA,KAAK,EAAE,KADwE;AAE/E,UAAA,aAAa,EAAE;AAFgE,SAAnF;AAIH;AACJ;;;WACD,kBAAS,MAAT,EAAiB,IAAjB,EAAuB;AACnB,UAAI,MAAM,KAAK,MAAX,IAAqB,MAAM,IAAI,IAAnC,EAAyC;AACrC,aAAK,UAAL,CAAgB,aAAhB,EAA+B,MAAM,CAAC,MAAP,CAAc,WAA7C,EAA0D;AAAE,UAAA,IAAI,EAAE,IAAI,CAAC;AAAb,SAA1D;AACH;AACJ;;;WACD,uBAAc,MAAd,EAAsB,IAAtB,EAA4B;AACxB,UAAI,MAAM,KAAK,IAAf,EAAqB;AACjB,aAAK,UAAL,CAAgB,uCAAuC,IAAI,CAAC,SAAL,CAAe,IAAI,CAAC,IAApB,CAAvC,GAAmE,4BAAnF,EAAiH,MAAM,CAAC,MAAP,CAAc,qBAA/H,EAAsJ;AAAE,UAAA,IAAI,EAAE,MAAM,CAAC,IAAf;AAAqB,UAAA,SAAS,EAAE;AAAhC,SAAtJ;AACH,OAFD,MAGK,IAAI,MAAM,KAAK,MAAX,IAAqB,MAAM,IAAI,IAAnC,EAAyC;AAC1C,aAAK,UAAL,CAAgB,aAAhB,EAA+B,MAAM,CAAC,MAAP,CAAc,WAA7C,EAA0D;AAAE,UAAA,IAAI,EAAE,IAAI,CAAC;AAAb,SAA1D;AACH;AACJ;;;WACD,wBAAsB;AAClB,UAAI,CAAC,aAAL,EAAoB;AAChB,QAAA,aAAa,GAAG,IAAI,MAAJ,CAAWA,SAAX,CAAhB;AACH;;AACD,aAAO,aAAP;AACH;;;WACD,uBAAqB,UAArB,EAAiC,SAAjC,EAA4C;AACxC,UAAI,CAAC,UAAD,IAAe,SAAnB,EAA8B;AAC1B,aAAK,YAAL,GAAoB,UAApB,CAA+B,uCAA/B,EAAwE,MAAM,CAAC,MAAP,CAAc,qBAAtF,EAA6G;AACzG,UAAA,SAAS,EAAE;AAD8F,SAA7G;AAGH;;AACD,UAAI,sBAAJ,EAA4B;AACxB,YAAI,CAAC,UAAL,EAAiB;AACb;AACH;;AACD,aAAK,YAAL,GAAoB,UAApB,CAA+B,4BAA/B,EAA6D,MAAM,CAAC,MAAP,CAAc,qBAA3E,EAAkG;AAC9F,UAAA,SAAS,EAAE;AADmF,SAAlG;AAGH;;AACD,MAAA,aAAa,GAAG,CAAC,CAAC,UAAlB;AACA,MAAA,sBAAsB,GAAG,CAAC,CAAC,SAA3B;AACH;;;WACD,qBAAmB,QAAnB,EAA6B;AACzB,UAAM,KAAK,GAAG,SAAS,CAAC,QAAQ,CAAC,WAAT,EAAD,CAAvB;;AACA,UAAI,KAAK,IAAI,IAAb,EAAmB;AACf,QAAA,MAAM,CAAC,YAAP,GAAsB,IAAtB,CAA2B,yBAAyB,QAApD;AACA;AACH;;AACD,MAAA,SAAS,GAAG,KAAZ;AACH;;;WACD,cAAY,OAAZ,EAAqB;AACjB,aAAO,IAAI,MAAJ,CAAW,OAAX,CAAP;AACH;;;;;;AAEL,MAAM,CAAC,MAAP,GAAgB,SAAhB;AACA,MAAM,CAAC,MAAP,GAAgB,QAAhB;AC5VO,IAAMA,SAAO,GAAG,aAAhB;ACGP,IAAM,MAAM,GAAG,IAAI,MAAJ,CAAWA,SAAX,CAAf,C,CACA;;AACA,SAAS,SAAT,CAAmB,KAAnB,EAA0B;AACtB,SAAO,CAAC,CAAE,KAAK,CAAC,WAAhB;AACH;;AACD,SAAS,QAAT,CAAkB,KAAlB,EAAyB;AACrB,MAAI,KAAK,CAAC,KAAV,EAAiB;AACb,WAAO,KAAP;AACH;;AACD,EAAA,KAAK,CAAC,KAAN,GAAc,YAAY;AACtB,QAAM,IAAI,GAAG,KAAK,CAAC,SAAN,CAAgB,KAAhB,CAAsB,IAAtB,CAA2B,SAA3B,CAAb;AACA,WAAO,QAAQ,CAAC,IAAI,UAAJ,CAAe,KAAK,CAAC,SAAN,CAAgB,KAAhB,CAAsB,KAAtB,CAA4B,KAA5B,EAAmC,IAAnC,CAAf,CAAD,CAAf;AACH,GAHD;;AAIA,SAAO,KAAP;AACH;;AAID,SAAS,SAAT,CAAmB,KAAnB,EAA0B;AACtB,SAAQ,OAAQ,KAAR,KAAmB,QAAnB,IAA+B,KAAK,IAAI,KAAxC,IAAkD,KAAK,GAAG,CAAT,KAAgB,CAAzE;AACH;;AACM,SAAS,OAAT,CAAiB,KAAjB,EAAwB;AAC3B,MAAI,KAAK,IAAI,IAAb,EAAmB;AACf,WAAO,KAAP;AACH;;AACD,MAAI,KAAK,CAAC,WAAN,KAAsB,UAA1B,EAAsC;AAClC,WAAO,IAAP;AACH;;AACD,MAAI,OAAQ,KAAR,KAAmB,QAAvB,EAAiC;AAC7B,WAAO,KAAP;AACH;;AACD,MAAI,CAAC,SAAS,CAAC,KAAK,CAAC,MAAP,CAAV,IAA4B,KAAK,CAAC,MAAN,GAAe,CAA/C,EAAkD;AAC9C,WAAO,KAAP;AACH;;AACD,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,EAAnC,EAAuC;AACnC,QAAM,CAAC,GAAG,KAAK,CAAC,CAAD,CAAf;;AACA,QAAI,CAAC,SAAS,CAAC,CAAD,CAAV,IAAiB,CAAC,GAAG,CAArB,IAA0B,CAAC,IAAI,GAAnC,EAAwC;AACpC,aAAO,KAAP;AACH;AACJ;;AACD,SAAO,IAAP;AACH;;AACM,SAAS,QAAT,CAAkB,KAAlB,EAAyB,OAAzB,EAAkC;AACrC,MAAI,CAAC,OAAL,EAAc;AACV,IAAA,OAAO,GAAG,EAAV;AACH;;AACD,MAAI,OAAQ,KAAR,KAAmB,QAAvB,EAAiC;AAC7B,IAAA,MAAM,CAAC,eAAP,CAAuB,KAAvB,EAA8B,wBAA9B;AACA,QAAM,MAAM,GAAG,EAAf;;AACA,WAAO,KAAP,EAAc;AACV,MAAA,MAAM,CAAC,OAAP,CAAe,KAAK,GAAG,IAAvB;AACA,MAAA,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC,KAAK,GAAG,GAAT,CAAP,CAAhB;AACH;;AACD,QAAI,MAAM,CAAC,MAAP,KAAkB,CAAtB,EAAyB;AACrB,MAAA,MAAM,CAAC,IAAP,CAAY,CAAZ;AACH;;AACD,WAAO,QAAQ,CAAC,IAAI,UAAJ,CAAe,MAAf,CAAD,CAAf;AACH;;AACD,MAAI,OAAO,CAAC,kBAAR,IAA8B,OAAQ,KAAR,KAAmB,QAAjD,IAA6D,KAAK,CAAC,SAAN,CAAgB,CAAhB,EAAmB,CAAnB,MAA0B,IAA3F,EAAiG;AAC7F,IAAA,KAAK,GAAG,OAAO,KAAf;AACH;;AACD,MAAI,SAAS,CAAC,KAAD,CAAb,EAAsB;AAClB,IAAA,KAAK,GAAG,KAAK,CAAC,WAAN,EAAR;AACH;;AACD,MAAI,WAAW,CAAC,KAAD,CAAf,EAAwB;AACpB,QAAI,GAAG,GAAG,KAAK,CAAC,SAAN,CAAgB,CAAhB,CAAV;;AACA,QAAI,GAAG,CAAC,MAAJ,GAAa,CAAjB,EAAoB;AAChB,UAAI,OAAO,CAAC,MAAR,KAAmB,MAAvB,EAA+B;AAC3B,QAAA,GAAG,GAAG,QAAQ,GAAG,CAAC,SAAJ,CAAc,CAAd,CAAd;AACH,OAFD,MAGK,IAAI,OAAO,CAAC,MAAR,KAAmB,OAAvB,EAAgC;AACjC,QAAA,GAAG,IAAI,GAAP;AACH,OAFI,MAGA;AACD,QAAA,MAAM,CAAC,kBAAP,CAA0B,wBAA1B,EAAoD,OAApD,EAA6D,KAA7D;AACH;AACJ;;AACD,QAAM,OAAM,GAAG,EAAf;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,GAAG,CAAC,MAAxB,EAAgC,CAAC,IAAI,CAArC,EAAwC;AACpC,MAAA,OAAM,CAAC,IAAP,CAAY,QAAQ,CAAC,GAAG,CAAC,SAAJ,CAAc,CAAd,EAAiB,CAAC,GAAG,CAArB,CAAD,EAA0B,EAA1B,CAApB;AACH;;AACD,WAAO,QAAQ,CAAC,IAAI,UAAJ,CAAe,OAAf,CAAD,CAAf;AACH;;AACD,MAAI,OAAO,CAAC,KAAD,CAAX,EAAoB;AAChB,WAAO,QAAQ,CAAC,IAAI,UAAJ,CAAe,KAAf,CAAD,CAAf;AACH;;AACD,SAAO,MAAM,CAAC,kBAAP,CAA0B,wBAA1B,EAAoD,OAApD,EAA6D,KAA7D,CAAP;AACH;;AAoCM,SAAS,WAAT,CAAqB,KAArB,EAA4B,MAA5B,EAAoC;AACvC,MAAI,OAAQ,KAAR,KAAmB,QAAnB,IAA+B,CAAC,KAAK,CAAC,KAAN,CAAY,kBAAZ,CAApC,EAAqE;AACjE,WAAO,KAAP;AACH;;AACD,MAAI,MAAM,IAAI,KAAK,CAAC,MAAN,KAAiB,IAAI,IAAI,MAAvC,EAA+C;AAC3C,WAAO,KAAP;AACH;;AACD,SAAO,IAAP;AACJ;;ACtIO,IAAM,OAAO,GAAG,YAAhB;ACOQ,IAAI,MAAJ,CAAW,OAAX;;AAIR,SAAS,MAAT,CAAgB,IAAhB,EAAsB;AACzB,SAAO,OAAQ,IAAI,CAAC,MAAL,GAAc,MAAd,CAAqB,QAAQ,CAAC,IAAD,CAA7B,EAAqC,MAArC,CAA4C,KAA5C,CAAf;AACJ;;ICTO,M;AACLC,kBAAW,UAAXA,EAA6B;AAAA;;AAC3BC,IAAAA,MAAM,CAANA,MAAAA,CAAAA,IAAAA,EAAAA,UAAAA;AACD;;;;WAEDC,kBAAiB;AACf,aAAOzC,MAAM,CAANA,IAAAA,CAAY0C,SAAS,CAAA,aAAA,EAA5B,IAA4B,CAArB1C,CAAP;AACD;;;WAEM2C,gBAAM,IAANA,EAA0B;AAC/B,aAAOC,WAAW,CAAA,aAAA,EAAA,IAAA,EAAlB,IAAkB,CAAlB;AACD;;;WAEMC,yBAAe,IAAfA,EAAmC;AACxC,aAAOC,oBAAoB,CAAA,aAAA,EAAA,IAAA,EAA3B,IAA2B,CAA3B;AACD;;;;KAfiB;AAmBpB;;;IACO,I;;;;;AAELP,gBAAW,UAAXA,EAA6B;AAAA;;AAAA;;AAC3B,8BAAA,UAAA;AAFFQ,UAAAA,IAAAA,GAAe,EAAfA;;AAGE,QAAIP,MAAM,CAANA,IAAAA,CAAAA,UAAAA,EAAAA,MAAAA,KAAJ,CAAA,EAA0C;AACxC,YAAM,IAAA,KAAA,CAAN,iCAAM,CAAN;AACD;;AACDA,IAAAA,MAAM,CAANA,IAAAA,CAAAA,UAAAA,EAAAA,GAAAA,CAA4BQ,UAAAA,GAAG,EAAI;AACjC,YAAA,IAAA,GAAA,GAAA;AADFR,KAAAA;AAL2B;AAQ5B;;;EAVI,M;;AAaMS,IAAAA,aAAiC,GAAG,IAAA,GAAA,EAApCA;AC5Bb;AACA;AACA;;AACO,IAAMC,eAAe,GAArB,EAAA;AAEP;AACA;AACA;;AAiBA,SAAA,eAAA,CAAA,KAAA,EAA2E;AACzE,SAAQC,KAAD,CAAA,GAACA,KAAR,SAAA;AACD;AAED;AACA;AACA;;;IACO,S;;;;;AACL;;AAGA;AACF;AACA;AACA;AACEZ,qBAAW,KAAXA,EAAsC;AAAA;;AAAA;;AACpC,gCAAA,EAAA;AADoC,WANtCc,GAMsC,GAAA,KAAA,CAAA;;AAEpC,QAAIC,eAAe,CAAnB,KAAmB,CAAnB,EAA4B;AAC1B,aAAA,GAAA,GAAWH,KAAK,CAAhB,GAAA;AADF,KAAA,MAEO;AACL,UAAI,OAAA,KAAA,KAAJ,QAAA,EAA+B;AAC7B;AACA,YAAMI,OAAO,GAAGC,IAAI,CAAJA,MAAAA,CAAhB,KAAgBA,CAAhB;;AACA,YAAID,OAAO,CAAPA,MAAAA,IAAJ,EAAA,EAA0B;AACxB,gBAAM,IAAN,KAAM,4BAAN;AACD;;AACD,eAAA,GAAA,GAAW,IAAA,EAAA,CAAX,OAAW,CAAX;AANF,OAAA,MAOO;AACL,eAAA,GAAA,GAAW,IAAA,EAAA,CAAX,KAAW,CAAX;AACD;;AAED,UAAI,OAAA,GAAA,CAAA,UAAA,KAAJ,EAAA,EAAgC;AAC9B,cAAM,IAAN,KAAM,4BAAN;AACD;AACF;;AAnBmC;AAoBrC;AAED;AACF;AACA;;AAGE;AACF;AACA;;;;;WACEG,gBAAM,SAANA,EAAsC;AACpC,aAAO,KAAA,GAAA,CAAA,EAAA,CAAYC,SAAS,CAA5B,GAAO,CAAP;AACD;AAED;AACF;AACA;;;;WACEC,oBAAmB;AACjB,aAAOJ,IAAI,CAAJA,MAAAA,CAAY,KAAnB,OAAmB,EAAZA,CAAP;AACD;;;WAEDK,kBAAiB;AACf,aAAO,KAAP,QAAO,EAAP;AACD;AAED;AACF;AACA;;;;WACEC,mBAAsB;AACpB,aAAO,KAAP,QAAO,EAAP;AACD;AAED;AACF;AACA;;;;WACEhE,oBAAmB;AACjB,UAAMiE,CAAC,GAAG,KAAA,GAAA,CAAA,WAAA,CAAV,MAAU,CAAV;;AACA,UAAIA,CAAC,CAADA,MAAAA,KAAJ,EAAA,EAAqB;AACnB,eAAA,CAAA;AACD;;AAED,UAAMC,OAAO,GAAGhE,MAAM,CAANA,KAAAA,CAAhB,EAAgBA,CAAhB;AACA+D,MAAAA,CAAC,CAADA,IAAAA,CAAAA,OAAAA,EAAgB,KAAKA,CAAC,CAAtBA,MAAAA;AACA,aAAA,OAAA;AACD;AAED;AACF;AACA;;;;WACEE,oBAAmB;AACjB,aAAO,KAAP,QAAO,EAAP;AACD;AAED;AACF;AACA;AACA;AACA;;AACE;;;;;qFACaC,iBAAc,aAAdA,EAAc,IAAdA,EAAc,SAAdA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAKLC,gBAAAA,MALKD,GAKIlE,MAAM,CAANA,MAAAA,CAAc,CAC3BoE,aAAa,CADc,QAC3BA,EAD2B,EAE3BpE,MAAM,CAANA,IAAAA,CAF2B,IAE3BA,CAF2B,EAG3BqE,SAAS,CAHX,QAGEA,EAH2B,CAAdrE,CALJkE;AAULI,gBAAAA,IAVKJ,GAUEK,MAAM,CAAC,IAAA,UAAA,CAAPA,MAAO,CAAD,CAANA,CAAAA,KAAAA,CAAb,CAAaA,CAVFL;AAAAA,iDAWJ,IAAA,SAAA,CAAclE,MAAM,CAANA,IAAAA,CAAAA,IAAAA,EAArB,KAAqBA,CAAd,CAXIkE;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAcb;AACF;AACA;;AACE;;;;WACOM,kCAAwB,KAAxBA,EAAwB,SAAxBA,EAGM;AACX,UAAIL,MAAM,GAAGnE,MAAM,CAANA,KAAAA,CAAb,CAAaA,CAAb;AACAyE,MAAAA,KAAK,CAALA,OAAAA,CAAc,UAAA,IAAA,EAAgB;AAC5B,YAAIC,IAAI,CAAJA,MAAAA,GAAJ,eAAA,EAAmC;AACjC,gBAAM,IAAN,SAAM,4BAAN;AACD;;AACDP,QAAAA,MAAM,GAAGnE,MAAM,CAANA,MAAAA,CAAc,CAAA,MAAA,EAASF,QAAQ,CAAxCqE,IAAwC,CAAjB,CAAdnE,CAATmE;AAJFM,OAAAA;AAMAN,MAAAA,MAAM,GAAGnE,MAAM,CAANA,MAAAA,CAAc,CAAA,MAAA,EAErBqE,SAAS,CAFY,QAErBA,EAFqB,EAGrBrE,MAAM,CAANA,IAAAA,CAHFmE,uBAGEnE,CAHqB,CAAdA,CAATmE;AAKA,UAAIG,IAAI,GAAGC,MAAM,CAAC,IAAA,UAAA,CAAPA,MAAO,CAAD,CAANA,CAAAA,KAAAA,CAAX,CAAWA,CAAX;AACA,UAAII,cAAc,GAAG,IAAA,EAAA,CAAA,IAAA,EAAA,EAAA,EAAA,OAAA,CAAA,SAAA,EAArB,EAAqB,CAArB;;AACA,UAAIC,WAAW,CAAf,cAAe,CAAf,EAAiC;AAC/B,cAAM,IAAN,KAAM,kDAAN;AACD;;AACD,aAAO,IAAA,SAAA,CAAP,cAAO,CAAP;AACD;AAED;AACF;AACA;AACA;;AACE;;;;;2FACaC,kBAAoB,KAApBA,EAAoB,SAApBA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,kDAIJ,KAAA,wBAAA,CAAA,KAAA,EAAP,SAAO,CAJIA;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAOb;AACF;AACA;AACA;AACA;AACA;AACA;;;;WACSC,gCAAsB,KAAtBA,EAAsB,SAAtBA,EAGgB;AACrB,UAAIC,KAAK,GAAT,GAAA;AACA,UAAA,OAAA;;AACA,aAAOA,KAAK,IAAZ,CAAA,EAAmB;AACjB,YAAI;AACF,cAAMC,cAAc,GAAGP,KAAK,CAALA,MAAAA,CAAazE,MAAM,CAANA,IAAAA,CAAY,CAAhD,KAAgD,CAAZA,CAAbyE,CAAvB;AACAQ,UAAAA,OAAO,GAAG,KAAA,wBAAA,CAAA,cAAA,EAAVA,SAAU,CAAVA;AAFF,SAAA,CAGE,OAAA,GAAA,EAAY;AACZ,cAAIC,GAAG,YAAP,SAAA,EAA8B;AAC5B,kBAAA,GAAA;AACD;;AACDH,UAAAA,KAAK;AACL;AACD;;AACD,eAAO,CAAA,OAAA,EAAP,KAAO,CAAP;AACD;;AACD,YAAM,IAAN,KAAM,iDAAN;AACD;AAED;AACF;AACA;AACA;;;;;yFACeI,kBAAkB,KAAlBA,EAAkB,SAAlBA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,kDAIJ,KAAA,sBAAA,CAAA,KAAA,EAAP,SAAO,CAJIA;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAOb;AACF;AACA;;;;WACSC,mBAAS,UAATA,EAAkD;AACvD,UAAMC,MAAM,GAAG,IAAA,SAAA,CAAf,UAAe,CAAf;AACA,aAAOT,WAAW,CAACS,MAAM,CAAlBT,OAAYS,EAAD,CAAXT,IAAP,CAAA;AACD;;;;EA3LI,M;;AAAMxB,SAAAA,CAiCJK,OAjCIL,GAiCiB,IAAA,SAAA,CAAA,kCAAA,CAjCjBA;AA8LbH,aAAa,CAAbA,GAAAA,CAAAA,SAAAA,EAA6B;AAC3BqC,EAAAA,IAAI,EADuB,QAAA;AAE3BC,EAAAA,MAAM,EAAE,CAAC,CAAA,KAAA,EAAD,MAAC,CAAD;AAFmB,CAA7BtC,E,CAAAA;;AAMA,IAAIuC,YAAY,GAAGC,IAAI,CAAvB,QAAA,C,CAAA;AAGA;AACA;;AACA,SAAA,WAAA,CAAA,CAAA,EAA6B;AAC3B,MAAIC,CAAC,GAAG,CACNF,YAAY,CADN,EACNA,EADM,EAENA,YAAY,CAFN,EAENA,EAFM,EAGNA,YAAY,CAHN,EAGNA,EAHM,EAINA,YAAY,CAJd,EAIEA,EAJM,CAAR;AAOA,MAAIG,CAAC,GAAGH,YAAY,CAApB,EAAQA,EAAR;AAAA,MACEI,GAAG,GAAGJ,YAAY,CADpB,EACQA,EADR;AAAA,MAEEK,GAAG,GAAGL,YAAY,CAFpB,EAEQA,EAFR;AAAA,MAGEM,GAAG,GAAGN,YAAY,CAHpB,EAGQA,EAHR;AAAA,MAIEO,IAAI,GAAGP,YAAY,CAJrB,EAISA,EAJT;AAAA,MAKEQ,IAAI,GAAGR,YAAY,CALrB,EAKSA,EALT;AAAA,MAMES,IAAI,GAAGT,YAAY,CANrB,EAMSA,EANT;AAQAA,EAAAA,YAAY,CAAZA,QAAAA,CAAsBE,CAAC,CAAvBF,CAAuB,CAAvBA,EAAAA,GAAAA;AACAA,EAAAA,YAAY,CAAZA,WAAAA,CAAyBE,CAAC,CAA1BF,CAA0B,CAA1BA,EAAAA,CAAAA;AACAA,EAAAA,YAAY,CAAZA,CAAAA,CAAAA,GAAAA,EAAoBE,CAAC,CAArBF,CAAqB,CAArBA;AACAA,EAAAA,YAAY,CAAZA,CAAAA,CAAAA,GAAAA,EAAAA,GAAAA,EAAyBA,YAAY,CAArCA,CAAAA;AACAA,EAAAA,YAAY,CAAZA,CAAAA,CAAAA,GAAAA,EAAAA,GAAAA,EAAyBE,CAAC,CAA1BF,CAA0B,CAA1BA;AACAA,EAAAA,YAAY,CAAZA,CAAAA,CAAAA,GAAAA,EAAoBE,CAAC,CAArBF,CAAqB,CAArBA,EAAAA,GAAAA;AAEAA,EAAAA,YAAY,CAAZA,CAAAA,CAAAA,IAAAA,EAAAA,GAAAA;AACAA,EAAAA,YAAY,CAAZA,CAAAA,CAAAA,IAAAA,EAAAA,IAAAA;AACAA,EAAAA,YAAY,CAAZA,CAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAAA,IAAAA;AACAA,EAAAA,YAAY,CAAZA,CAAAA,CAAAA,CAAAA,EAAAA,IAAAA,EAAAA,GAAAA;AACAA,EAAAA,YAAY,CAAZA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,GAAAA;AAEAA,EAAAA,YAAY,CAAZA,OAAAA,CAAAA,CAAAA,EAAAA,CAAAA;AACAA,EAAAA,YAAY,CAAZA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,GAAAA;AACAA,EAAAA,YAAY,CAAZA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,GAAAA;AACAA,EAAAA,YAAY,CAAZA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,GAAAA;AACAA,EAAAA,YAAY,CAAZA,CAAAA,CAAeE,CAAC,CAAhBF,CAAgB,CAAhBA,EAAAA,CAAAA,EAAAA,GAAAA;AAEAA,EAAAA,YAAY,CAAZA,CAAAA,CAAAA,GAAAA,EAAoBE,CAAC,CAArBF,CAAqB,CAArBA;AACAA,EAAAA,YAAY,CAAZA,CAAAA,CAAAA,GAAAA,EAAAA,GAAAA,EAAAA,GAAAA;AACA,MAAIU,QAAQ,CAAA,GAAA,EAAZ,GAAY,CAAZ,EAAwBV,YAAY,CAAZA,CAAAA,CAAeE,CAAC,CAAhBF,CAAgB,CAAhBA,EAAqBE,CAAC,CAAtBF,CAAsB,CAAtBA,EAAAA,CAAAA;AAExBA,EAAAA,YAAY,CAAZA,CAAAA,CAAAA,GAAAA,EAAoBE,CAAC,CAArBF,CAAqB,CAArBA;AACAA,EAAAA,YAAY,CAAZA,CAAAA,CAAAA,GAAAA,EAAAA,GAAAA,EAAAA,GAAAA;AACA,MAAIU,QAAQ,CAAA,GAAA,EAAZ,GAAY,CAAZ,EAAwB,OAAA,CAAA;AACxB,SAAA,CAAA;AACD;;AACD,IAAIC,GAAG,GAAGX,YAAY,CAAZA,EAAAA,CAAgB,CAA1B,CAA0B,CAAhBA,CAAV;AACA,IAAIY,CAAC,GAAGZ,YAAY,CAAZA,EAAAA,CAAgB,CAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAxB,MAAwB,CAAhBA,CAAR;;AAIA,SAAA,QAAA,CAAA,CAAA,EAAA,CAAA,EAAkC;AAChC,MAAIa,CAAC,GAAG,IAAA,UAAA,CAAR,EAAQ,CAAR;AAAA,MACEC,CAAC,GAAG,IAAA,UAAA,CADN,EACM,CADN;AAEAd,EAAAA,YAAY,CAAZA,SAAAA,CAAAA,CAAAA,EAAAA,CAAAA;AACAA,EAAAA,YAAY,CAAZA,SAAAA,CAAAA,CAAAA,EAAAA,CAAAA;AACA,SAAOA,YAAY,CAAZA,gBAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAP,CAAOA,CAAP;AACD;ACjSD;AACA;AACA;AACA;AACA;;;IACO,O;AACL;;AAGA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEjD,mBAAW,SAAXA,EAA6D;AAAA;;AAAA,SAV7DgE,QAU6D,GAAA,KAAA,CAAA;;AAC3D,QAAA,SAAA,EAAe;AACb,WAAA,QAAA,GAAgBd,IAAI,CAAJA,IAAAA,CAAAA,OAAAA,CAAAA,aAAAA,CAAgC3F,QAAQ,CAAxD,SAAwD,CAAxC2F,CAAhB;AADF,KAAA,MAEO;AACL,WAAA,QAAA,GAAgBA,IAAI,CAAJA,IAAAA,CAAhB,OAAgBA,EAAhB;AACD;AACF;AAED;AACF;AACA;;;;;SACM9B,eAAuB;AACzB,aAAO,IAAA,SAAA,CAAc,KAAA,QAAA,CAArB,SAAO,CAAP;AACD;AAED;AACF;AACA;;;;SACM6C,eAAoB;AACtB,aAAO1G,QAAQ,CAAC,KAAA,QAAA,CAAhB,SAAe,CAAf;AACD;;;;;;IC1CU2G,gCAAgC,GAAG,IAAA,SAAA,CAAA,6CAAA,C;ACFhD;AACA;AACA;AACA;AACA;AACA;AACA;;IACaC,gBAAgB,GAAG,OAAA,EAAA,GAAzB,C;AAEA,IAAMC,yBAAyB,GAAG,EAAlC;ACNP;AACA;AACA;;AACO,IAAMhD,SAAS,GAAG,SAAZA,SAAY,GAAoC;AAAA,MAAnCiD,QAAmC,uEAApC,WAAoC;AAC3D,SAAOC,YAAY,CAAZA,IAAAA,CAAAA,EAAAA,EAAP,QAAOA,CAAP;AADK,CAAA;AA4BP;AACA;AACA;;;AACO,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAEQ;AAAA,MADhCF,QACgC,uEAFR,QAEQ;AAChC,MAAMG,GAAG,GAAGF,YAAY,CAAZA,MAAAA,CAOV,CACEA,YAAY,CAAZA,GAAAA,CADF,QACEA,CADF,EAEEA,YAAY,CAAZA,GAAAA,CAFF,eAEEA,CAFF,EAGEA,YAAY,CAAZA,IAAAA,CAAkBA,YAAY,CAAZA,MAAAA,CAAoBA,YAAY,CAAhCA,GAAoBA,EAApBA,EAAwC,CAA1DA,CAAkBA,CAAlBA,EAVQA,OAURA,CAHF,CAPUA,EAAZ,QAAYA,CAAZ;;AAcA,MAAMG,OAAO,GAAGD,GAAG,CAAHA,MAAAA,CAAAA,IAAAA,CAAhB,GAAgBA,CAAhB;;AACA,MAAME,OAAO,GAAGF,GAAG,CAAHA,MAAAA,CAAAA,IAAAA,CAAhB,GAAgBA,CAAhB;;AAEA,MAAMG,OAAO,GAAb,GAAA;;AAEAA,EAAAA,OAAO,CAAPA,MAAAA,GAAiB,UAAA,CAAA,EAAA,MAAA,EAAoC;AACnD,QAAMC,IAAI,GAAGH,OAAO,CAAA,CAAA,EAApB,MAAoB,CAApB;;AACA,WAAOG,IAAI,CAAJA,OAAI,CAAJA,CAAP,QAAOA,EAAP;AAFFD,GAAAA;;AAKAA,EAAAA,OAAO,CAAPA,MAAAA,GAAiB,UAAA,GAAA,EAAA,CAAA,EAAA,MAAA,EAAiD;AAChE,QAAMC,IAAI,GAAG;AACXC,MAAAA,KAAK,EAAEpH,MAAM,CAANA,IAAAA,CAAAA,GAAAA,EAAAA,MAAAA;AADI,KAAb;AAGA,WAAOiH,OAAO,CAAA,IAAA,EAAA,CAAA,EAAd,MAAc,CAAd;AAJFC,GAAAA;;AAOAA,EAAAA,OAAO,CAAPA,KAAAA,GAAiBG,UAAAA,GAAD,EAAiB;AAC/B,WACER,YAAY,CAAZA,GAAAA,GAAAA,IAAAA,GACAA,YAAY,CAAZA,GAAAA,GADAA,IAAAA,GAEA7G,MAAM,CAANA,IAAAA,CAAAA,GAAAA,EAAAA,MAAAA,EAHF,MAAA;AADFkH,GAAAA;;AAQA,SAAA,OAAA;AA1CK,CAAA;AA6CP;AACA;AACA;;;AACO,IAAMI,UAAU,GAAG,SAAbA,UAAa,GAAqC;AAAA,MAApCV,QAAoC,uEAArC,YAAqC;AAC7D,SAAOC,YAAY,CAAZA,MAAAA,CAKL,CAAClD,SAAS,CAAV,QAAU,CAAV,EAAsBA,SAAS,CAL1BkD,YAK0B,CAA/B,CALKA,EAAP,QAAOA,CAAP;AADK,CAAA;AASP;AACA;AACA;;;AACO,IAAMU,MAAM,GAAG,SAATA,MAAS,GAAiC;AAAA,MAAhCX,QAAgC,uEAAjC,QAAiC;AACrD,SAAOC,YAAY,CAAZA,MAAAA,CAOL,CACEA,YAAY,CAAZA,IAAAA,CADF,eACEA,CADF,EAEEA,YAAY,CAAZA,IAAAA,CAFF,OAEEA,CAFF,EAGElD,SAAS,CAVNkD,WAUM,CAHX,CAPKA,EAAP,QAAOA,CAAP;AADK,CAAA;AAiBP;AACA;AACA;;;AACO,IAAMW,QAAQ,GAAG,SAAXA,QAAW,GAAmC;AAAA,MAAlCZ,QAAkC,uEAAnC,UAAmC;AACzD,SAAOC,YAAY,CAAZA,MAAAA,CAQL,CACElD,SAAS,CADX,YACW,CADX,EAEEA,SAAS,CAFX,iBAEW,CAFX,EAGEA,SAAS,CAHX,sBAGW,CAHX,EAIEkD,YAAY,CAAZA,EAAAA,CAZGA,YAYHA,CAJF,CARKA,EAAP,QAAOA,CAAP;AADK,CAAA;;AAmBA,SAAA,QAAA,CAAA,IAAA,EAAA,MAAA,EAAkD;AACvD,MAAIY,KAAK,GAAT,CAAA;AACAC,EAAAA,IAAI,CAAJA,MAAAA,CAAAA,MAAAA,CAAAA,OAAAA,CAA4BC,UAAAA,IAAD,EAAe;AACxC,QAAIA,IAAI,CAAJA,IAAAA,IAAJ,CAAA,EAAoB;AAClBF,MAAAA,KAAK,IAAIE,IAAI,CAAbF,IAAAA;AADF,KAAA,MAEO,IAAI,OAAOE,IAAI,CAAX,KAAA,KAAJ,UAAA,EAAsC;AAC3CF,MAAAA,KAAK,IAAIE,IAAI,CAAJA,KAAAA,CAAWpC,MAAM,CAACoC,IAAI,CAA/BF,QAA0B,CAAjBE,CAATF;AACD;AALHC,GAAAA;AAOA,SAAA,KAAA;AACD;;AClJM,SAAA,YAAA,CAAA,KAAA,EAAoD;AACzD,MAAIE,GAAG,GAAP,CAAA;AACA,MAAIC,IAAI,GAAR,CAAA;;AACA,WAAS;AACP,QAAIC,IAAI,GAAGC,KAAK,CAAhB,KAAWA,EAAX;AACAH,IAAAA,GAAG,IAAI,CAACE,IAAI,GAAL,IAAA,KAAkBD,IAAI,GAA7BD,CAAAA;AACAC,IAAAA,IAAI,IAAJA,CAAAA;;AACA,QAAI,CAACC,IAAI,GAAL,IAAA,MAAJ,CAAA,EAAyB;AACvB;AACD;AACF;;AACD,SAAA,GAAA;AACD;;AAEM,SAAA,YAAA,CAAA,KAAA,EAAA,GAAA,EAAyD;AAC9D,MAAIE,OAAO,GAAX,GAAA;;AACA,WAAS;AACP,QAAIF,IAAI,GAAGE,OAAO,GAAlB,IAAA;AACAA,IAAAA,OAAO,KAAPA,CAAAA;;AACA,QAAIA,OAAO,IAAX,CAAA,EAAkB;AAChBD,MAAAA,KAAK,CAALA,IAAAA,CAAAA,IAAAA;AACA;AAFF,KAAA,MAGO;AACLD,MAAAA,IAAI,IAAJA,IAAAA;AACAC,MAAAA,KAAK,CAALA,IAAAA,CAAAA,IAAAA;AACD;AACF;AACF;AChBD;AACA;AACA;;;AA2CA,IAAME,aAAa,GAAnB,EAAA;AAEA;AACA;AACA;;IACO,O;AAWL1F,mBAAW,IAAXA,EAA+B;AAAA;;AAAA;;AAAA,SAV/B2F,MAU+B,GAAA,KAAA,CAAA;AAAA,SAT/BC,WAS+B,GAAA,KAAA,CAAA;AAAA,SAR/BC,eAQ+B,GAAA,KAAA,CAAA;AAAA,SAP/BC,YAO+B,GAAA,KAAA,CAAA;AAAA,SALvBC,iBAKuB,GALqB,IAAA,GAAA,EAKrB;AAC7B,SAAA,MAAA,GAAcC,IAAI,CAAlB,MAAA;AACA,SAAA,WAAA,GAAmBA,IAAI,CAAJA,WAAAA,CAAAA,GAAAA,CAAqBC,UAAAA,OAAO;AAAA,aAAI,IAAA,SAAA,CAAnD,OAAmD,CAAJ;AAAA,KAA5BD,CAAnB;AACA,SAAA,eAAA,GAAuBA,IAAI,CAA3B,eAAA;AACA,SAAA,YAAA,GAAoBA,IAAI,CAAxB,YAAA;AACA,SAAA,YAAA,CAAA,OAAA,CAA0BE,UAAAA,EAAE;AAAA,aAC1B,MAAA,CAAA,iBAAA,CAAA,GAAA,CACEA,EAAE,CADJ,cAAA,EAEE,MAAKN,CAAL,WAAA,CAAiBM,EAAE,CAHvB,cAGI,CAFF,CAD0B;AAAA,KAA5B;AAMD;;;;WAEDC,yBAAe,KAAfA,EAAwC;AACtC,aAAOC,KAAK,GAAG,KAAA,MAAA,CAAf,qBAAA;AACD;;;WAEDC,2BAAiB,KAAjBA,EAA0C;AACxC,aACED,KAAK,GACH,KAAA,MAAA,CAAA,qBAAA,GACE,KAAA,MAAA,CAFJA,yBAAAA,IAGCA,KAAK,IAAI,KAAA,MAAA,CAATA,qBAAAA,IACCA,KAAK,GACH,KAAA,WAAA,CAAA,MAAA,GAA0B,KAAA,MAAA,CANhC,2BAAA;AAQD;;;WAEDE,qBAAW,KAAXA,EAAoC;AAClC,aAAO,KAAA,iBAAA,CAAA,GAAA,CAAP,KAAO,CAAP;AACD;;;WAEDC,sBAA0B;AACxB,gCAAW,KAAA,iBAAA,CAAX,MAAW,EAAX;AACD;;;WAEDC,yBAA6B;AAAA;;AAC3B,aAAO,KAAA,WAAA,CAAA,MAAA,CAAwB,UAAA,CAAA,EAAA,KAAA;AAAA,eAAc,CAAC,MAAKF,CAAL,WAAA,CAA9C,KAA8C,CAAf;AAAA,OAAxB,CAAP;AACD;;;WAEDnG,qBAAoB;AAClB,UAAMsG,OAAO,GAAG,KAAA,WAAA,CAAhB,MAAA;AAEA,UAAIC,QAAkB,GAAtB,EAAA;AACAC,MAAAA,YAAAA,CAAAA,QAAAA,EAAAA,OAAAA,CAAAA;AAEA,UAAMb,YAAY,GAAG,KAAA,YAAA,CAAA,GAAA,CAAsBc,UAAAA,WAAW,EAAI;AACxD,YAAM,QAAN,GAAA,WAAA,CAAM,QAAN;AAAA,YAAiBC,cAAjB,GAAA,WAAA,CAAiBA,cAAjB;AACA,YAAMjC,IAAI,GAAGkC,KAAK,CAALA,IAAAA,CAAW7F,IAAI,CAAJA,MAAAA,CAAY2F,WAAW,CAA/C,IAAwB3F,CAAX6F,CAAb;AAEA,YAAIC,eAAyB,GAA7B,EAAA;AACAJ,QAAAA,YAAAA,CAAAA,eAAAA,EAAuCK,QAAQ,CAA/CL,MAAAA,CAAAA;AAEA,YAAIM,SAAmB,GAAvB,EAAA;AACAN,QAAAA,YAAAA,CAAAA,SAAAA,EAAiC/B,IAAI,CAArC+B,MAAAA,CAAAA;AAEA,eAAO;AACLE,UAAAA,cADK,EACLA,cADK;AAELE,UAAAA,eAAe,EAAEtJ,MAAM,CAANA,IAAAA,CAFZ,eAEYA,CAFZ;AAGLyJ,UAAAA,UAAU,EAHL,QAAA;AAILC,UAAAA,UAAU,EAAE1J,MAAM,CAANA,IAAAA,CAJP,SAIOA,CAJP;AAKLmH,UAAAA,IAAAA,EAAAA;AALK,SAAP;AAVF,OAAqB,CAArB;AAmBA,UAAIwC,gBAA0B,GAA9B,EAAA;AACAT,MAAAA,YAAAA,CAAAA,gBAAAA,EAAwCb,YAAY,CAApDa,MAAAA,CAAAA;AACA,UAAIU,iBAAiB,GAAG5J,MAAM,CAANA,KAAAA,CAAxB,gBAAwBA,CAAxB;AACAA,MAAAA,MAAM,CAANA,IAAAA,CAAAA,gBAAAA,EAAAA,IAAAA,CAAAA,iBAAAA;AACA,UAAI6J,uBAAuB,GAAGF,gBAAgB,CAA9C,MAAA;AAEAtB,MAAAA,YAAY,CAAZA,OAAAA,CAAqBc,UAAAA,WAAW,EAAI;AAClC,YAAMW,iBAAiB,GAAGjD,YAAY,CAAZA,MAAAA,CAQxB,CACAA,YAAY,CAAZA,EAAAA,CADA,gBACAA,CADA,EAGAA,YAAY,CAAZA,IAAAA,CACEsC,WAAW,CAAXA,eAAAA,CADFtC,MAAAA,EAHA,iBAGAA,CAHA,EAOAA,YAAY,CAAZA,GAAAA,CACEA,YAAY,CAAZA,EAAAA,CADFA,UACEA,CADFA,EAEEsC,WAAW,CAAXA,UAAAA,CAFFtC,MAAAA,EAPA,YAOAA,CAPA,EAYAA,YAAY,CAAZA,IAAAA,CAAkBsC,WAAW,CAAXA,UAAAA,CAAlBtC,MAAAA,EAZA,YAYAA,CAZA,EAaAA,YAAY,CAAZA,GAAAA,CACEA,YAAY,CAAZA,EAAAA,CADFA,WACEA,CADFA,EAEEsC,WAAW,CAAXA,IAAAA,CAFFtC,MAAAA,EArBF,MAqBEA,CAbA,CARwBA,CAA1B;AA2BA,YAAMkD,MAAM,GAAGD,iBAAiB,CAAjBA,MAAAA,CAAAA,WAAAA,EAAAA,iBAAAA,EAAf,uBAAeA,CAAf;AAKAD,QAAAA,uBAAuB,IAAvBA,MAAAA;AAjCFxB,OAAAA;AAmCAuB,MAAAA,iBAAiB,GAAGA,iBAAiB,CAAjBA,KAAAA,CAAAA,CAAAA,EAApBA,uBAAoBA,CAApBA;AAEA,UAAMI,cAAc,GAAGnD,YAAY,CAAZA,MAAAA,CASrB,CACAA,YAAY,CAAZA,IAAAA,CAAAA,CAAAA,EADA,uBACAA,CADA,EAEAA,YAAY,CAAZA,IAAAA,CAAAA,CAAAA,EAFA,2BAEAA,CAFA,EAGAA,YAAY,CAAZA,IAAAA,CAAAA,CAAAA,EAHA,6BAGAA,CAHA,EAIAA,YAAY,CAAZA,IAAAA,CAAkBoC,QAAQ,CAA1BpC,MAAAA,EAJA,UAIAA,CAJA,EAKAA,YAAY,CAAZA,GAAAA,CAAiBoD,SAAAA,CAAjBpD,KAAiBoD,CAAjBpD,EAAAA,OAAAA,EALA,MAKAA,CALA,EAMAoD,SAAAA,CAfF,iBAeEA,CANA,CATqBpD,CAAvB;AAkBA,UAAMqD,WAAW,GAAG;AAClBC,QAAAA,qBAAqB,EAAEnK,MAAM,CAANA,IAAAA,CAAY,CAAC,KAAA,MAAA,CADlB,qBACiB,CAAZA,CADL;AAElBoK,QAAAA,yBAAyB,EAAEpK,MAAM,CAANA,IAAAA,CAAY,CACrC,KAAA,MAAA,CAHgB,yBAEqB,CAAZA,CAFT;AAKlBqK,QAAAA,2BAA2B,EAAErK,MAAM,CAANA,IAAAA,CAAY,CACvC,KAAA,MAAA,CANgB,2BAKuB,CAAZA,CALX;AAQlBiJ,QAAAA,QAAQ,EAAEjJ,MAAM,CAANA,IAAAA,CARQ,QAQRA,CARQ;AASlBsK,QAAAA,IAAI,EAAE,KAAA,WAAA,CAAA,GAAA,CAAqBtH,UAAAA,GAAG;AAAA,iBAAIlD,QAAQ,CAACkD,GAAG,CAT5B,OASyBA,EAAD,CAAZ;AAAA,SAAxB,CATY;AAUlBoF,QAAAA,eAAe,EAAE5E,IAAI,CAAJA,MAAAA,CAAY,KAAZA,eAAAA;AAVC,OAApB;AAaA,UAAI+G,QAAQ,GAAGvK,MAAM,CAANA,KAAAA,CAAf,IAAeA,CAAf;AACA,UAAM+J,MAAM,GAAGC,cAAc,CAAdA,MAAAA,CAAAA,WAAAA,EAAf,QAAeA,CAAf;AACAJ,MAAAA,iBAAiB,CAAjBA,IAAAA,CAAAA,QAAAA,EAAAA,MAAAA;AACA,aAAOW,QAAQ,CAARA,KAAAA,CAAAA,CAAAA,EAAkBR,MAAM,GAAGH,iBAAiB,CAAnD,MAAOW,CAAP;AACD;AAED;AACF;AACA;;;;WACSC,cAAI,MAAJA,EAA2D;AAChE;AACA,UAAIC,SAAS,sBAAb,MAAa,CAAb;;AAEA,UAAMN,qBAAqB,GAAGM,SAAS,CAAvC,KAA8BA,EAA9B;AACA,UAAML,yBAAyB,GAAGK,SAAS,CAA3C,KAAkCA,EAAlC;AACA,UAAMJ,2BAA2B,GAAGI,SAAS,CAA7C,KAAoCA,EAApC;AAEA,UAAMC,YAAY,GAAGxB,YAAAA,CAArB,SAAqBA,CAArB;AACA,UAAIf,WAAW,GAAf,EAAA;;AACA,WAAK,IAAIwC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAjB,YAAA,EAAkCA,CAAlC,EAAA,EAAuC;AACrC,YAAMnC,OAAO,GAAGiC,SAAS,CAATA,KAAAA,CAAAA,CAAAA,EAAhB,aAAgBA,CAAhB;AACAA,QAAAA,SAAS,GAAGA,SAAS,CAATA,KAAAA,CAAZA,aAAYA,CAAZA;AACAtC,QAAAA,WAAW,CAAXA,IAAAA,CAAiB3E,IAAI,CAAJA,MAAAA,CAAYxD,MAAM,CAANA,IAAAA,CAA7BmI,OAA6BnI,CAAZwD,CAAjB2E;AACD;;AAED,UAAMC,eAAe,GAAGqC,SAAS,CAATA,KAAAA,CAAAA,CAAAA,EAAxB,aAAwBA,CAAxB;AACAA,MAAAA,SAAS,GAAGA,SAAS,CAATA,KAAAA,CAAZA,aAAYA,CAAZA;AAEA,UAAMd,gBAAgB,GAAGT,YAAAA,CAAzB,SAAyBA,CAAzB;AACA,UAAIb,YAAmC,GAAvC,EAAA;;AACA,WAAK,IAAIsC,EAAC,GAAV,CAAA,EAAgBA,EAAC,GAAjB,gBAAA,EAAsCA,EAAtC,EAAA,EAA2C;AACzC,YAAMvB,cAAc,GAAGqB,SAAS,CAAhC,KAAuBA,EAAvB;;AACA,YAAMC,aAAY,GAAGxB,YAAAA,CAArB,SAAqBA,CAArB;;AACA,YAAMK,QAAQ,GAAGkB,SAAS,CAATA,KAAAA,CAAAA,CAAAA,EAAjB,aAAiBA,CAAjB;AACAA,QAAAA,SAAS,GAAGA,SAAS,CAATA,KAAAA,CAAZA,aAAYA,CAAZA;AACA,YAAMf,UAAU,GAAGR,YAAAA,CAAnB,SAAmBA,CAAnB;AACA,YAAM0B,SAAS,GAAGH,SAAS,CAATA,KAAAA,CAAAA,CAAAA,EAAlB,UAAkBA,CAAlB;AACA,YAAMtD,IAAI,GAAG3D,IAAI,CAAJA,MAAAA,CAAYxD,MAAM,CAANA,IAAAA,CAAzB,SAAyBA,CAAZwD,CAAb;AACAiH,QAAAA,SAAS,GAAGA,SAAS,CAATA,KAAAA,CAAZA,UAAYA,CAAZA;AACApC,QAAAA,YAAY,CAAZA,IAAAA,CAAkB;AAChBe,UAAAA,cADgB,EAChBA,cADgB;AAEhBG,UAAAA,QAFgB,EAEhBA,QAFgB;AAGhBpC,UAAAA,IAAAA,EAAAA;AAHgB,SAAlBkB;AAKD;;AAED,UAAMwC,WAAW,GAAG;AAClB3C,QAAAA,MAAM,EAAE;AACNiC,UAAAA,qBADM,EACNA,qBADM;AAENC,UAAAA,yBAFM,EAENA,yBAFM;AAGNC,UAAAA,2BAAAA,EAAAA;AAHM,SADU;AAMlBjC,QAAAA,eAAe,EAAE5E,IAAI,CAAJA,MAAAA,CAAYxD,MAAM,CAANA,IAAAA,CANX,eAMWA,CAAZwD,CANC;AAOlB2E,QAAAA,WAPkB,EAOlBA,WAPkB;AAQlBE,QAAAA,YAAAA,EAAAA;AARkB,OAApB;AAWA,aAAO,IAAA,OAAA,CAAP,WAAO,CAAP;AACD;;;;;;AC7QY,SAAA,MAAA,CAAA,SAAA,EAAA,OAAA,EAGM;AACnB,MAAI,CAAJ,SAAA,EAAgB;AACd,UAAM,IAAA,KAAA,CAAUyC,OAAO,IAAvB,kBAAM,CAAN;AACD;AACF;;ACgBD,IAAA,iBAAA;AAMA;AACA;AACA;;WARkBC,iB,EAAAA;AAAAA,EAAAA,iBAAAA,CAAAA,iBAAAA,CAAAA,sBAAAA,CAAAA,GAAAA,CAAAA,CAAAA,GAAAA,sBAAAA;AAAAA,EAAAA,iBAAAA,CAAAA,iBAAAA,CAAAA,WAAAA,CAAAA,GAAAA,CAAAA,CAAAA,GAAAA,WAAAA;AAAAA,EAAAA,iBAAAA,CAAAA,iBAAAA,CAAAA,WAAAA,CAAAA,GAAAA,CAAAA,CAAAA,GAAAA,WAAAA;AAAAA,C,EAAAA,iBAAAA,KAAAA,iBAAAA,GAAAA,EAAAA,C;;AASlB,IAAMC,iBAAiB,GAAGhL,MAAM,CAANA,KAAAA,CAAAA,yBAAAA,EAAAA,IAAAA,CAA1B,CAA0BA,CAA1B;AAEA;AACA;AACA;;AA0CA;AACA;AACA;;IACO,sB;AACL;AACF;AACA;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;AAGEuC,kCAAW,IAAXA,EAAoD;AAAA;;AAAA,SAZpD+H,IAYoD,GAAA,KAAA,CAAA;AAAA,SAPpDjG,SAOoD,GAAA,KAAA,CAAA;AAAA,SAFpD8C,IAEoD,GAFrCnH,MAAM,CAANA,KAAAA,CAAAA,CAAAA,CAEqC;AAClD,SAAA,SAAA,GAAiBiL,IAAI,CAArB,SAAA;AACA,SAAA,IAAA,GAAYA,IAAI,CAAhB,IAAA;;AACA,QAAIA,IAAI,CAAR,IAAA,EAAe;AACb,WAAA,IAAA,GAAYA,IAAI,CAAhB,IAAA;AACD;AACF;AAED;AACF;AACA;;;;;WACEpH,kBAAqC;AACnC,aAAO;AACLyG,QAAAA,IAAI,EAAE,KAAA,IAAA,CAAA,GAAA,CAAc;AAAA,cAAC,MAAD,QAAC,MAAD;AAAA,cAAC,QAAD,QAAC,QAAD;AAAA,cAAoBY,UAApB,QAAoBA,UAApB;AAAA,iBAAqC;AACvD7F,YAAAA,MAAM,EAAEA,MAAM,CADyC,MAC/CA,EAD+C;AAEvD8F,YAAAA,QAFuD,EAEvDA,QAFuD;AAGvDD,YAAAA,UAAAA,EAAAA;AAHuD,WAArC;AAAA,SAAd,CADD;AAML7G,QAAAA,SAAS,EAAE,KAAA,SAAA,CANN,MAMM,EANN;AAOL8C,QAAAA,IAAI,qBAAM,KAAJ,IAAF;AAPC,OAAP;AASD;;;;;AAGH;AACA;AACA;;AA+DA;AACA;AACA;;;IACO,W;AAiBL;AACF;AACA;;AA2CE;AACF;AACA;AACE5E,uBAAW,IAAXA,EAEE;AAAA;;AA9DF6I,SAAAA,UAAAA,GAAyC,EAAzCA;AA8DE,SA/CFE,QA+CE,GAAA,KAAA,CAAA;AA1CFjD,SAAAA,YAAAA,GAA8C,EAA9CA;AA0CE,SArCFD,eAqCE,GAAA,KAAA,CAAA;AAAA,SAhCFmD,oBAgCE,GAAA,KAAA,CAAA;AAAA,SA1BFC,SA0BE,GAAA,KAAA,CAAA;AAAA,SArBFC,QAqBE,GAAA,KAAA,CAAA;AAAA,SAhBFC,KAgBE,GAAA,KAAA,CAAA;;AACA,QAAI,CAAJ,IAAA,EAAW;AACT;AADF,KAAA,MAEO,IACLlJ,MAAM,CAANA,SAAAA,CAAAA,cAAAA,CAAAA,IAAAA,CAAAA,IAAAA,EADK,sBACLA,CADK,EAEL;AACA,UAAMmJ,OAAO,GAAb,IAAA;AACAnJ,MAAAA,MAAM,CAANA,MAAAA,CAAAA,IAAAA,EAAAA,OAAAA;AACA,WAAA,eAAA,GAAuBmJ,OAAO,CAA9B,SAAA;AACA,WAAA,oBAAA,GAA4BA,OAAO,CAAnC,oBAAA;AANK,KAAA,MAOA;AACL,UAAMC,OAAO,GAAb,IAAA;AACApJ,MAAAA,MAAM,CAANA,MAAAA,CAAAA,IAAAA,EAAAA,OAAAA;AACA,WAAA,eAAA,GAAuBoJ,OAAO,CAA9B,eAAA;AACD;AACF;AAED;AACF;AACA;;;;;;AArFE;AACF;AACA;AACA;;AAGE;AACF;AACA;AACMP,mBAA2B;AAC7B,UAAI,KAAA,UAAA,CAAA,MAAA,GAAJ,CAAA,EAAgC;AAC9B,eAAO,KAAA,UAAA,CAAA,CAAA,EAAP,SAAA;AACD;;AACD,aAAA,IAAA;AACD;;;WAwEDxH,kBAA0B;AACxB,aAAO;AACLuE,QAAAA,eAAe,EAAE,KAAA,eAAA,IADZ,IAAA;AAELkD,QAAAA,QAAQ,EAAE,KAAA,QAAA,GAAgB,KAAA,QAAA,CAAhB,MAAgB,EAAhB,GAFL,IAAA;AAGLE,QAAAA,SAAS,EAAE,KAAA,SAAA,GACP;AACEzG,UAAAA,KAAK,EAAE,KAAA,SAAA,CADT,KAAA;AAEE8G,UAAAA,gBAAgB,EAAE,KAAA,SAAA,CAAA,gBAAA,CAAA,MAAA;AAFpB,SADO,GAHN,IAAA;AASLxD,QAAAA,YAAY,EAAE,KAAA,YAAA,CAAA,GAAA,CAAsBc,UAAAA,WAAW;AAAA,iBAAIA,WAAW,CATzD,MAS8CA,EAAJ;AAAA,SAAjC,CATT;AAUL2C,QAAAA,OAAO,EAAE,KAAA,UAAA,CAAA,GAAA,CAAoB,iBAAiB;AAAA,cAAfnI,SAAe,SAAfA,SAAe;AAC5C,iBAAOA,SAAS,CAAhB,MAAOA,EAAP;AADO,SAAA;AAVJ,OAAP;AAcD;AAED;AACF;AACA;;;;WACEoI,eAIe;AAAA;;AAAA,yCAJZ,KAIY;AAJZ,QAAA,KAIY;AAAA;;AACb,UAAIC,KAAK,CAALA,MAAAA,KAAJ,CAAA,EAAwB;AACtB,cAAM,IAAA,KAAA,CAAN,iBAAM,CAAN;AACD;;AAEDA,MAAAA,KAAK,CAALA,OAAAA,CAAerE,UAAAA,IAAD,EAAe;AAC3B,YAAI,kBAAJ,IAAA,EAA4B;AAC1B,UAAA,MAAKU,CAAL,YAAA,GAAoB,MAAA,CAAA,YAAA,CAAA,MAAA,CAAyBV,IAAI,CAAjD,YAAoB,CAApB;AADF,SAAA,MAEO,IAAI,UAAA,IAAA,IAAkB,eAAlB,IAAA,IAAyC,UAA7C,IAAA,EAA6D;AAClE,UAAA,MAAA,CAAA,YAAA,CAAA,IAAA,CAAA,IAAA;AADK,SAAA,MAEA;AACL,UAAA,MAAKU,CAAL,YAAA,CAAA,IAAA,CAAuB,IAAA,sBAAA,CAAvB,IAAuB,CAAvB;AACD;AAPH2D,OAAAA;AASA,aAAA,IAAA;AACD;AAED;AACF;AACA;;;;WACEC,0BAA0B;AACxB,UACE,KAAA,QAAA,IACAC,IAAI,CAAJA,SAAAA,CAAe,KAAfA,MAAe,EAAfA,MAAkCA,IAAI,CAAJA,SAAAA,CAAe,KAFnD,KAEoCA,CAFpC,EAGE;AACA,eAAO,KAAP,QAAA;AACD;;AAED,UAAOV,SAAP,GAAA,IAAA,CAAOA,SAAP;;AACA,UAAIA,SAAS,IAAI,KAAA,YAAA,CAAA,CAAA,KAAwBA,SAAS,CAAlD,gBAAA,EAAqE;AACnE,aAAA,eAAA,GAAuBA,SAAS,CAAhC,KAAA;AACA,aAAA,YAAA,CAAA,OAAA,CAA0BA,SAAS,CAAnC,gBAAA;AACD;;AACD,UAAOpD,eAAP,GAAA,IAAA,CAAOA,eAAP;;AACA,UAAI,CAAJ,eAAA,EAAsB;AACpB,cAAM,IAAA,KAAA,CAAN,sCAAM,CAAN;AACD;;AAED,UAAI,KAAA,YAAA,CAAA,MAAA,GAAJ,CAAA,EAAkC;AAChC+D,QAAAA,OAAO,CAAPA,IAAAA,CAAAA,0BAAAA;AACD;;AAED,UAAA,QAAA;;AACA,UAAI,KAAJ,QAAA,EAAmB;AACjBb,QAAAA,QAAQ,GAAG,KAAXA,QAAAA;AADF,OAAA,MAEO,IAAI,KAAA,UAAA,CAAA,MAAA,GAAA,CAAA,IAA8B,KAAA,UAAA,CAAA,CAAA,EAAlC,SAAA,EAAgE;AACrE;AACAA,QAAAA,QAAQ,GAAG,KAAA,UAAA,CAAA,CAAA,EAAXA,SAAAA;AAFK,OAAA,MAGA;AACL,cAAM,IAAA,KAAA,CAAN,gCAAM,CAAN;AACD;;AAED,WAAK,IAAIX,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAG,KAAA,YAAA,CAApB,MAAA,EAA8CA,CAA9C,EAAA,EAAmD;AACjD,YAAI,KAAA,YAAA,CAAA,CAAA,EAAA,SAAA,KAAJ,SAAA,EAAkD;AAChD,gBAAM,IAAA,KAAA,yCAAN,CAAM,+BAAN;AAGD;AACF;;AAED,UAAM7B,UAAoB,GAA1B,EAAA;AACA,UAAMsD,YAA2B,GAAjC,EAAA;AACA,WAAA,YAAA,CAAA,OAAA,CAA0BjD,UAAAA,WAAW,EAAI;AACvCA,QAAAA,WAAW,CAAXA,IAAAA,CAAAA,OAAAA,CAAyBkD,UAAAA,WAAW,EAAI;AACtCD,UAAAA,YAAY,CAAZA,IAAAA,mBAAsBC,WAAtBD;AADFjD,SAAAA;AAIA,YAAM9E,SAAS,GAAG8E,WAAW,CAAXA,SAAAA,CAAlB,QAAkBA,EAAlB;;AACA,YAAI,CAACL,UAAU,CAAVA,QAAAA,CAAL,SAAKA,CAAL,EAAqC;AACnCA,UAAAA,UAAU,CAAVA,IAAAA,CAAAA,SAAAA;AACD;AAlDqB,OA0CxB,EA1CwB,CAAA;;AAsDxBA,MAAAA,UAAU,CAAVA,OAAAA,CAAmBzE,UAAAA,SAAS,EAAI;AAC9B+H,QAAAA,YAAY,CAAZA,IAAAA,CAAkB;AAChB/G,UAAAA,MAAM,EAAE,IAAA,SAAA,CADQ,SACR,CADQ;AAEhB8F,UAAAA,QAAQ,EAFQ,KAAA;AAGhBD,UAAAA,UAAU,EAAE;AAHI,SAAlBkB;AAvDsB,OAsDxBtD,EAtDwB,CAAA;;AA+DxB,UAAMwD,WAA0B,GAAhC,EAAA;AACAF,MAAAA,YAAY,CAAZA,OAAAA,CAAqBC,UAAAA,WAAW,EAAI;AAClC,YAAME,YAAY,GAAGF,WAAW,CAAXA,MAAAA,CAArB,QAAqBA,EAArB;AACA,YAAMG,WAAW,GAAG,WAAW,CAAX,SAAA,CAAsBC,UAAAA,CAAC,EAAI;AAC7C,iBAAOA,CAAC,CAADA,MAAAA,CAAAA,QAAAA,OAAP,YAAA;AADF,SAAoB,CAApB;;AAGA,YAAID,WAAW,GAAG,CAAlB,CAAA,EAAsB;AACpBF,UAAAA,WAAW,CAAXA,WAAW,CAAXA,CAAAA,UAAAA,GACEA,WAAW,CAAXA,WAAW,CAAXA,CAAAA,UAAAA,IAAuCD,WAAW,CADpDC,UAAAA;AAEAA,UAAAA,WAAW,CAAXA,WAAW,CAAXA,CAAAA,QAAAA,GACEA,WAAW,CAAXA,WAAW,CAAXA,CAAAA,QAAAA,IAAqCD,WAAW,CADlDC,QAAAA;AAHF,SAAA,MAKO;AACLA,UAAAA,WAAW,CAAXA,IAAAA,CAAAA,WAAAA;AACD;AA5EqB,OAgExBF,EAhEwB,CAAA;;AAgFxBE,MAAAA,WAAW,CAAXA,IAAAA,CAAiB,UAAA,CAAA,EAAA,CAAA,EAAgB;AAC/B,YAAIG,CAAC,CAADA,QAAAA,KAAeC,CAAC,CAApB,QAAA,EAA+B;AAC7B;AACA,iBAAOD,CAAC,CAADA,QAAAA,GAAa,CAAbA,CAAAA,GAAP,CAAA;AACD;;AACD,YAAIA,CAAC,CAADA,UAAAA,KAAiBC,CAAC,CAAtB,UAAA,EAAmC;AACjC;AACA,iBAAOD,CAAC,CAADA,UAAAA,GAAe,CAAfA,CAAAA,GAAP,CAAA;AAP6B,SAAA,CAAA;;;AAU/B,eAAOA,CAAC,CAADA,MAAAA,CAAAA,QAAAA,GAAAA,aAAAA,CAAkCC,CAAC,CAADA,MAAAA,CAAzC,QAAyCA,EAAlCD,CAAP;AA1FsB,OAgFxBH,EAhFwB,CAAA;;AA8FxB,UAAMK,aAAa,GAAG,WAAW,CAAX,SAAA,CAAsBF,UAAAA,CAAC,EAAI;AAC/C,eAAOA,CAAC,CAADA,MAAAA,CAAAA,MAAAA,CAAP,QAAOA,CAAP;AADF,OAAsB,CAAtB;;AAGA,UAAIE,aAAa,GAAG,CAApB,CAAA,EAAwB;AACtB,kCAAoBL,WAAW,CAAXA,MAAAA,CAAAA,aAAAA,EAApB,CAAoBA,CAApB;AAAA;AAAA,YAAM,SAAN;;AACAM,QAAAA,SAAS,CAATA,QAAAA,GAAAA,IAAAA;AACAA,QAAAA,SAAS,CAATA,UAAAA,GAAAA,IAAAA;AACAN,QAAAA,WAAW,CAAXA,OAAAA,CAAAA,SAAAA;AAJF,OAAA,MAKO;AACLA,QAAAA,WAAW,CAAXA,OAAAA,CAAoB;AAClBjH,UAAAA,MAAM,EADY,QAAA;AAElB8F,UAAAA,QAAQ,EAFU,IAAA;AAGlBD,UAAAA,UAAU,EAAE;AAHM,SAApBoB;AAvGsB,OAAA,CAAA;;;AAAA,iDA+GA,KAAxB,UA/GwB;AAAA;;AAAA;AAAA;AAAA,cA+GxB,SA/GwB;AAgHtB,cAAME,WAAW,GAAG,WAAW,CAAX,SAAA,CAAsBC,UAAAA,CAAC,EAAI;AAC7C,mBAAOA,CAAC,CAADA,MAAAA,CAAAA,MAAAA,CAAgBpB,SAAS,CAAhC,SAAOoB,CAAP;AADF,WAAoB,CAApB;;AAGA,cAAID,WAAW,GAAG,CAAlB,CAAA,EAAsB;AACpB,gBAAI,CAACF,WAAW,CAAXA,WAAW,CAAXA,CAAL,QAAA,EAAwC;AACtCA,cAAAA,WAAW,CAAXA,WAAW,CAAXA,CAAAA,QAAAA,GAAAA,IAAAA;AACAH,cAAAA,OAAO,CAAPA,IAAAA,CACE,6DAAA,gFAAA,GADFA,wFAAAA;AAKD;AARH,WAAA,MASO;AACL,kBAAM,IAAA,KAAA,2BAA6Bd,SAAS,CAATA,SAAAA,CAAnC,QAAmCA,EAA7B,EAAN;AACD;AA9HqB;;AA+GxB,4DAAyC;AAAA;AAgBxC;AA/HuB;AAAA;AAAA;AAAA;AAAA;;AAiIxB,UAAIlB,qBAAqB,GAAzB,CAAA;AACA,UAAIC,yBAAyB,GAA7B,CAAA;AACA,UAAIC,2BAA2B,GAnIP,CAmIxB,CAnIwB,CAAA;;AAsIxB,UAAMwC,UAAoB,GAA1B,EAAA;AACA,UAAMC,YAAsB,GAA5B,EAAA;AACAR,MAAAA,WAAW,CAAXA,OAAAA,CAAoB,iBAAoC;AAAA,YAAnC,MAAmC,SAAnC,MAAmC;AAAA,YAAnC,QAAmC,SAAnC,QAAmC;AAAA,YAAhBpB,UAAgB,SAAhBA,UAAgB;;AACtD,YAAA,QAAA,EAAc;AACZ2B,UAAAA,UAAU,CAAVA,IAAAA,CAAgBxH,MAAM,CAAtBwH,QAAgBxH,EAAhBwH;AACA1C,UAAAA,qBAAqB,IAArBA,CAAAA;;AACA,cAAI,CAAJ,UAAA,EAAiB;AACfC,YAAAA,yBAAyB,IAAzBA,CAAAA;AACD;AALH,SAAA,MAMO;AACL0C,UAAAA,YAAY,CAAZA,IAAAA,CAAkBzH,MAAM,CAAxByH,QAAkBzH,EAAlByH;;AACA,cAAI,CAAJ,UAAA,EAAiB;AACfzC,YAAAA,2BAA2B,IAA3BA,CAAAA;AACD;AACF;AAZHiC,OAAAA;AAeA,UAAMnE,WAAW,GAAG0E,UAAU,CAAVA,MAAAA,CAApB,YAAoBA,CAApB;AACA,UAAMxE,YAAmC,GAAG,KAAA,YAAA,CAAA,GAAA,CAC1Cc,UAAAA,WAAW,EAAI;AACb,YAAM,IAAN,GAAA,WAAA,CAAM,IAAN;AAAA,YAAa9E,SAAb,GAAA,WAAA,CAAaA,SAAb;AACA,eAAO;AACL+E,UAAAA,cAAc,EAAEjB,WAAW,CAAXA,OAAAA,CAAoB9D,SAAS,CADxC,QAC+BA,EAApB8D,CADX;AAELoB,UAAAA,QAAQ,EAAEJ,WAAW,CAAXA,IAAAA,CAAAA,GAAAA,CAAqB4D,UAAAA,IAAI;AAAA,mBACjC5E,WAAW,CAAXA,OAAAA,CAAoB4E,IAAI,CAAJA,MAAAA,CAHjB,QAGiBA,EAApB5E,CADiC;AAAA,WAAzBgB,CAFL;AAKLhC,UAAAA,IAAI,EAAE3D,IAAI,CAAJA,MAAAA,CAAAA,IAAAA;AALD,SAAP;AAHJ,OAA4C,CAA5C;AAaA6E,MAAAA,YAAY,CAAZA,OAAAA,CAAqBc,UAAAA,WAAW,EAAI;AAClC6D,QAAAA,MAAS,CAAC7D,WAAW,CAAXA,cAAAA,IAAV6D,CAAS,CAATA;AACA7D,QAAAA,WAAW,CAAXA,QAAAA,CAAAA,OAAAA,CAA6B8D,UAAAA,QAAQ;AAAA,iBAAID,MAAS,CAACC,QAAQ,IAA3D9D,CAAkD,CAAb;AAAA,SAArCA;AAFFd,OAAAA;AAKA,aAAO,IAAA,OAAA,CAAY;AACjBH,QAAAA,MAAM,EAAE;AACNiC,UAAAA,qBADM,EACNA,qBADM;AAENC,UAAAA,yBAFM,EAENA,yBAFM;AAGNC,UAAAA,2BAAAA,EAAAA;AAHM,SADS;AAMjBlC,QAAAA,WANiB,EAMjBA,WANiB;AAOjBC,QAAAA,eAPiB,EAOjBA,eAPiB;AAQjBC,QAAAA,YAAAA,EAAAA;AARiB,OAAZ,CAAP;AAUD;AAED;AACF;AACA;;;;WACE6E,oBAAoB;AAClB,UAAMpC,OAAO,GAAG,KAAhB,cAAgB,EAAhB;AACA,UAAM+B,UAAU,GAAG/B,OAAO,CAAPA,WAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAEjBA,OAAO,CAAPA,MAAAA,CAFF,qBAAmBA,CAAnB;;AAKA,UAAI,KAAA,UAAA,CAAA,MAAA,KAA2B+B,UAAU,CAAzC,MAAA,EAAkD;AAChD,YAAMM,KAAK,GAAG,KAAA,UAAA,CAAA,KAAA,CAAsB,UAAA,IAAA,EAAA,KAAA,EAAiB;AACnD,iBAAON,UAAU,CAAVA,KAAU,CAAVA,CAAAA,MAAAA,CAAyBO,IAAI,CAApC,SAAOP,CAAP;AADF,SAAc,CAAd;AAIA,YAAA,KAAA,EAAW,OAAA,OAAA;AACZ;;AAED,WAAA,UAAA,GAAkB,UAAU,CAAV,GAAA,CAAelJ,UAAAA,SAAS;AAAA,eAAK;AAC7C0H,UAAAA,SAAS,EADoC,IAAA;AAE7C1H,UAAAA,SAAAA,EAAAA;AAF6C,SAAL;AAAA,OAAxB,CAAlB;AAKA,aAAA,OAAA;AACD;AAED;AACF;AACA;;;;WACE0J,4BAA2B;AACzB,aAAO,KAAA,QAAA,GAAP,SAAO,EAAP;AACD;AAED;AACF;AACA;;;;;sFACQC,kBAAe,UAAfA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,uBACUC,UAAU,CAAVA,gBAAAA,CAA4B,KAAnC,cAAmC,EAA5BA,CADVD;;AAAAA;AAAAA,iEACJ,KADIA;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAIN;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACEE,sBAAyC;AAAA,yCAA/B,OAA+B;AAA/B,QAAA,OAA+B;AAAA;;AACvC,UAAI1B,OAAO,CAAPA,MAAAA,KAAJ,CAAA,EAA0B;AACxB,cAAM,IAAA,KAAA,CAAN,YAAM,CAAN;AACD;;AAED,UAAM2B,IAAI,GAAG,IAAb,GAAa,EAAb;AACA,WAAA,UAAA,GAAkB,OAAO,CAAP,MAAA,CACR9J,UAAAA,SAAS,EAAI;AACnB,YAAMX,GAAG,GAAGW,SAAS,CAArB,QAAYA,EAAZ;;AACA,YAAI8J,IAAI,CAAJA,GAAAA,CAAJ,GAAIA,CAAJ,EAAmB;AACjB,iBAAA,KAAA;AADF,SAAA,MAEO;AACLA,UAAAA,IAAI,CAAJA,GAAAA,CAAAA,GAAAA;AACA,iBAAA,IAAA;AACD;AARa,OAAA,EAAA,GAAA,CAUX9J,UAAAA,SAAS;AAAA,eAAK;AAAC0H,UAAAA,SAAS,EAAV,IAAA;AAAkB1H,UAAAA,SAAAA,EAAAA;AAAlB,SAAL;AAAA,OAVE,CAAlB;AAWD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE+J,gBAAgC;AAAA,yCAA5B,OAA4B;AAA5B,QAAA,OAA4B;AAAA;;AAC9B,UAAI5B,OAAO,CAAPA,MAAAA,KAAJ,CAAA,EAA0B;AACxB,cAAM,IAAA,KAAA,CAAN,YAAM,CAAN;AAF4B,OAAA,CAAA;;;AAM9B,UAAM2B,IAAI,GAAG,IAAb,GAAa,EAAb;AACA,UAAME,aAAa,GAAnB,EAAA;;AACA,mCAAA,OAAA,gCAA8B;AAAzB,YAAMC,MAAX,gBAAK;AACH,YAAM5K,GAAG,GAAG4K,MAAM,CAANA,SAAAA,CAAZ,QAAYA,EAAZ;;AACA,YAAIH,IAAI,CAAJA,GAAAA,CAAJ,GAAIA,CAAJ,EAAmB;AACjB;AADF,SAAA,MAEO;AACLA,UAAAA,IAAI,CAAJA,GAAAA,CAAAA,GAAAA;AACAE,UAAAA,aAAa,CAAbA,IAAAA,CAAAA,MAAAA;AACD;AACF;;AAED,WAAA,UAAA,GAAkB,aAAa,CAAb,GAAA,CAAkBC,UAAAA,MAAM;AAAA,eAAK;AAC7CvC,UAAAA,SAAS,EADoC,IAAA;AAE7C1H,UAAAA,SAAS,EAAEiK,MAAM,CAACjK;AAF2B,SAAL;AAAA,OAAxB,CAAlB;;AAKA,UAAMmH,OAAO,GAAG,KAAhB,QAAgB,EAAhB;;AACA,WAAA,YAAA,cAAA,OAAA,SAAA,aAAA;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;WACE+C,uBAAuC;AAAA,yCAA5B,OAA4B;AAA5B,QAAA,OAA4B;AAAA;;AACrC,UAAI/B,OAAO,CAAPA,MAAAA,KAAJ,CAAA,EAA0B;AACxB,cAAM,IAAA,KAAA,CAAN,YAAM,CAAN;AAFmC,OAAA,CAAA;;;AAMrC,UAAM2B,IAAI,GAAG,IAAb,GAAa,EAAb;AACA,UAAME,aAAa,GAAnB,EAAA;;AACA,oCAAA,OAAA,iCAA8B;AAAzB,YAAMC,MAAX,iBAAK;AACH,YAAM5K,GAAG,GAAG4K,MAAM,CAANA,SAAAA,CAAZ,QAAYA,EAAZ;;AACA,YAAIH,IAAI,CAAJA,GAAAA,CAAJ,GAAIA,CAAJ,EAAmB;AACjB;AADF,SAAA,MAEO;AACLA,UAAAA,IAAI,CAAJA,GAAAA,CAAAA,GAAAA;AACAE,UAAAA,aAAa,CAAbA,IAAAA,CAAAA,MAAAA;AACD;AACF;;AAED,UAAM7C,OAAO,GAAG,KAAhB,QAAgB,EAAhB;;AACA,WAAA,YAAA,cAAA,OAAA,SAAA,aAAA;AACD;AAED;AACF;AACA;;;;WACEgD,sBAAY,OAAZA,EAA0D;AAAA;;AACxD,UAAMvD,QAAQ,GAAGO,OAAO,CAAxB,SAAiBA,EAAjB;;AADwD,yCAA9C,OAA8C;AAA9C,QAAA,OAA8C;AAAA;;AAExDgB,MAAAA,OAAO,CAAPA,OAAAA,CAAgB8B,UAAAA,MAAM,EAAI;AACxB,YAAMvC,SAAS,GAAG5F,IAAI,CAAJA,IAAAA,CAAAA,QAAAA,CAAAA,QAAAA,EAA6BmI,MAAM,CAArD,SAAkBnI,CAAlB;;AACA,QAAA,MAAKsI,CAAL,aAAA,CAAmBH,MAAM,CAAzB,SAAA,EAAqC9N,QAAQ,CAA7C,SAA6C,CAA7C;AAFFgM,OAAAA;AAID;AAED;AACF;AACA;AACA;AACA;;;;WACEkC,sBAAY,MAAZA,EAAY,SAAZA,EAAmD;AACjD,WADiD,QACjD,GADiD,CAAA;;;AAEjD,WAAA,aAAA,CAAA,MAAA,EAAA,SAAA;AACD;AAED;AACF;AACA;;;;WACED,uBAAa,MAAbA,EAAa,SAAbA,EAAoD;AAClDf,MAAAA,MAAS,CAAC3B,SAAS,CAATA,MAAAA,KAAV2B,EAAS,CAATA;AAEA,UAAMrE,KAAK,GAAG,KAAA,UAAA,CAAA,SAAA,CAA0BsF,UAAAA,OAAO;AAAA,eAC7C5I,MAAM,CAANA,MAAAA,CAAc4I,OAAO,CADvB,SACE5I,CAD6C;AAAA,OAAjC,CAAd;;AAGA,UAAIsD,KAAK,GAAT,CAAA,EAAe;AACb,cAAM,IAAA,KAAA,2BAA6BtD,MAAM,CAAzC,QAAmCA,EAA7B,EAAN;AACD;;AAED,WAAA,UAAA,CAAA,KAAA,EAAA,SAAA,GAAmCrF,MAAM,CAANA,IAAAA,CAAnC,SAAmCA,CAAnC;AACD;AAED;AACF;AACA;;;;WACEkO,4BAA4B;AAC1B,aAAO,KAAA,iBAAA,CAAuB,KAAvB,gBAAuB,EAAvB,EAAP,IAAO,CAAP;AACD;AAED;AACF;AACA;;;;WACEC,2BAAiB,QAAjBA,EAAiB,oBAAjBA,EAA4E;AAAA,kDACrC,KAArC,UAD0E;AAAA;;AAAA;AAC1E,+DAAsD;AAAA;AAAA,cAA3C,SAA2C,gBAA3C,SAA2C;AAAA,cAA/BxK,UAA+B,gBAA/BA,SAA+B;;AACpD,cAAI0H,SAAS,KAAb,IAAA,EAAwB;AACtB,gBAAA,oBAAA,EAA0B;AACxB,qBAAA,KAAA;AACD;AAHH,WAAA,MAIO;AACL,gBACE,CAAC5F,IAAI,CAAJA,IAAAA,CAAAA,QAAAA,CAAAA,MAAAA,CAAAA,QAAAA,EAAAA,SAAAA,EAA+C9B,UAAS,CAD3D,QACkDA,EAA/C8B,CADH,EAEE;AACA,qBAAA,KAAA;AACD;AACF;AACF;AAbyE;AAAA;AAAA;AAAA;AAAA;;AAc1E,aAAA,IAAA;AACD;AAED;AACF;AACA;;;;WACE/C,mBAAS,MAATA,EAA4C;AAC1C,2BAAiDF,MAAM,CAANA,MAAAA,CAC/C;AAAC4L,QAAAA,oBAAoB,EAArB,IAAA;AAA6BF,QAAAA,gBAAgB,EAAE;AAA/C,OAD+C1L,EAAjD,MAAiDA,CAAjD;AAAA,UAAM,oBAAN,kBAAM,oBAAN;AAAA,UAA6B0L,gBAA7B,kBAA6BA,gBAA7B;;AAKA,UAAM3D,QAAQ,GAAG,KAAjB,gBAAiB,EAAjB;;AACA,UACE2D,gBAAgB,IAChB,CAAC,KAAA,iBAAA,CAAA,QAAA,EAFH,oBAEG,CAFH,EAGE;AACA,cAAM,IAAA,KAAA,CAAN,+BAAM,CAAN;AACD;;AAED,aAAO,KAAA,UAAA,CAAP,QAAO,CAAP;AACD;AAED;AACF;AACA;;;;WACEG,oBAAU,QAAVA,EAAqC;AACnC,UAAOjD,UAAP,GAAA,IAAA,CAAOA,UAAP;AACA,UAAMkD,cAAwB,GAA9B,EAAA;AACApF,MAAAA,YAAAA,CAAAA,cAAAA,EAAsCkC,UAAU,CAAhDlC,MAAAA,CAAAA;AACA,UAAMqF,iBAAiB,GACrBD,cAAc,CAAdA,MAAAA,GAAwBlD,UAAU,CAAVA,MAAAA,GAAxBkD,EAAAA,GAAiD/D,QAAQ,CAD3D,MAAA;AAEA,UAAMiE,eAAe,GAAGxO,MAAM,CAANA,KAAAA,CAAxB,iBAAwBA,CAAxB;AACAgN,MAAAA,MAAS,CAAC5B,UAAU,CAAVA,MAAAA,GAAV4B,GAAS,CAATA;AACAhN,MAAAA,MAAM,CAANA,IAAAA,CAAAA,cAAAA,EAAAA,IAAAA,CAAAA,eAAAA,EAAAA,CAAAA;AACAoL,MAAAA,UAAU,CAAVA,OAAAA,CAAmB,iBAAA,KAAA,EAAwB;AAAA,YAAtBC,SAAsB,SAAtBA,SAAsB;;AACzC,YAAIA,SAAS,KAAb,IAAA,EAAwB;AACtB2B,UAAAA,MAAS,CAAC3B,SAAS,CAATA,MAAAA,KAAV2B,EAAS,iCAATA;AACAhN,UAAAA,MAAM,CAANA,IAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,eAAAA,EAEEsO,cAAc,CAAdA,MAAAA,GAAwB3F,KAAK,GAF/B3I,EAAAA;AAID;AAPHoL,OAAAA;AASAb,MAAAA,QAAQ,CAARA,IAAAA,CAAAA,eAAAA,EAEE+D,cAAc,CAAdA,MAAAA,GAAwBlD,UAAU,CAAVA,MAAAA,GAF1Bb,EAAAA;AAIAyC,MAAAA,MAAS,CACPwB,eAAe,CAAfA,MAAAA,IADO,gBAAA,mCAEmBA,eAAe,CAACzE,MAFnC,gBAATiD,gBAAS,EAATA;AAIA,aAAA,eAAA;AACD;AAED;AACF;AACA;AACA;;;;SACM1C,eAAyB;AAC3B0C,MAAAA,MAAS,CAAC,KAAA,YAAA,CAAA,MAAA,KAAVA,CAAS,CAATA;AACA,aAAO,KAAA,YAAA,CAAA,CAAA,EAAA,IAAA,CAAA,GAAA,CAA8ByB,UAAAA,MAAM;AAAA,eAAIA,MAAM,CAArD,MAA2C;AAAA,OAApC,CAAP;AACD;AAED;AACF;AACA;AACA;;;;SACMpK,eAAuB;AACzB2I,MAAAA,MAAS,CAAC,KAAA,YAAA,CAAA,MAAA,KAAVA,CAAS,CAATA;AACA,aAAO,KAAA,YAAA,CAAA,CAAA,EAAP,SAAA;AACD;AAED;AACF;AACA;AACA;;;;SACM7F,eAAe;AACjB6F,MAAAA,MAAS,CAAC,KAAA,YAAA,CAAA,MAAA,KAAVA,CAAS,CAATA;AACA,aAAO,KAAA,YAAA,CAAA,CAAA,EAAP,IAAA;AACD;AAED;AACF;AACA;;;;WACSxC,cAAI,MAAJA,EAA+D;AACpE;AACA,UAAIC,SAAS,sBAAb,MAAa,CAAb;;AAEA,UAAM6D,cAAc,GAAGpF,YAAAA,CAAvB,SAAuBA,CAAvB;AACA,UAAIkC,UAAU,GAAd,EAAA;;AACA,WAAK,IAAIT,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAjB,cAAA,EAAoCA,CAApC,EAAA,EAAyC;AACvC,YAAMU,SAAS,GAAGZ,SAAS,CAATA,KAAAA,CAAAA,CAAAA,EAAlB,yBAAkBA,CAAlB;AACAA,QAAAA,SAAS,GAAGA,SAAS,CAATA,KAAAA,CAAZA,yBAAYA,CAAZA;AACAW,QAAAA,UAAU,CAAVA,IAAAA,CAAgB5H,IAAI,CAAJA,MAAAA,CAAYxD,MAAM,CAANA,IAAAA,CAA5BoL,SAA4BpL,CAAZwD,CAAhB4H;AACD;;AAED,aAAOsD,WAAW,CAAXA,QAAAA,CAAqBC,OAAO,CAAPA,IAAAA,CAArBD,SAAqBC,CAArBD,EAAP,UAAOA,CAAP;AACD;AAED;AACF;AACA;;;;WACSE,kBAAQ,OAARA,EAGQ;AAAA,UADbxD,UACa,uEAHA,EAGA;AACb,UAAMlB,WAAW,GAAG,IAApB,WAAoB,EAApB;AACAA,MAAAA,WAAW,CAAXA,eAAAA,GAA8BY,OAAO,CAArCZ,eAAAA;;AACA,UAAIY,OAAO,CAAPA,MAAAA,CAAAA,qBAAAA,GAAJ,CAAA,EAA8C;AAC5CZ,QAAAA,WAAW,CAAXA,QAAAA,GAAuBY,OAAO,CAAPA,WAAAA,CAAvBZ,CAAuBY,CAAvBZ;AACD;;AACDkB,MAAAA,UAAU,CAAVA,OAAAA,CAAmB,UAAA,SAAA,EAAA,KAAA,EAAsB;AACvC,YAAMyD,aAAa,GAAG;AACpBxD,UAAAA,SAAS,EACPA,SAAS,IAAI7H,IAAI,CAAJA,MAAAA,CAAb6H,iBAAa7H,CAAb6H,GAAAA,IAAAA,GAEI7H,IAAI,CAAJA,MAAAA,CAJc,SAIdA,CAJc;AAKpBG,UAAAA,SAAS,EAAEmH,OAAO,CAAPA,WAAAA,CAAAA,KAAAA;AALS,SAAtB;AAOAZ,QAAAA,WAAW,CAAXA,UAAAA,CAAAA,IAAAA,CAAAA,aAAAA;AARFkB,OAAAA;AAWAN,MAAAA,OAAO,CAAPA,YAAAA,CAAAA,OAAAA,CAA6B3B,UAAAA,WAAW,EAAI;AAC1C,YAAMmB,IAAI,GAAG,WAAW,CAAX,QAAA,CAAA,GAAA,CAAyB9B,UAAAA,OAAO,EAAI;AAC/C,cAAMnD,MAAM,GAAGyF,OAAO,CAAPA,WAAAA,CAAf,OAAeA,CAAf;AACA,iBAAO;AACLzF,YAAAA,MADK,EACLA,MADK;AAEL8F,YAAAA,QAAQ,EACNjB,WAAW,CAAXA,UAAAA,CAAAA,IAAAA,CACEuE,UAAAA,MAAM;AAAA,qBAAIA,MAAM,CAANA,SAAAA,CAAAA,QAAAA,OAAgCpJ,MAAM,CADlD6E,QAC4C7E,EAApC;AAAA,aADR6E,KAEKY,OAAO,CAAPA,eAAAA,CALF,OAKEA,CALF;AAMLI,YAAAA,UAAU,EAAEJ,OAAO,CAAPA,iBAAAA,CAAAA,OAAAA;AANP,WAAP;AAFF,SAAa,CAAb;AAYAZ,QAAAA,WAAW,CAAXA,YAAAA,CAAAA,IAAAA,CACE,IAAA,sBAAA,CAA2B;AACzBI,UAAAA,IADyB,EACzBA,IADyB;AAEzBjG,UAAAA,SAAS,EAAEyG,OAAO,CAAPA,WAAAA,CAAoB3B,WAAW,CAFjB,cAEd2B,CAFc;AAGzB3D,UAAAA,IAAI,EAAE3D,IAAI,CAAJA,MAAAA,CAAY2F,WAAW,CAAvB3F,IAAAA;AAHmB,SAA3B,CADF0G;AAbFY,OAAAA;AAsBAZ,MAAAA,WAAW,CAAXA,QAAAA,GAAAA,OAAAA;AACAA,MAAAA,WAAW,CAAXA,KAAAA,GAAoBA,WAAW,CAA/BA,MAAoBA,EAApBA;AAEA,aAAA,WAAA;AACD;;;;;;ICl1BU4E,mBAAmB,GAAG,IAAA,SAAA,CAA5B,6CAA4B,C;IAItBC,4BAA4B,GAAG,IAAA,SAAA,CAArC,6CAAqC,C;IAI/BC,0BAA0B,GAAG,IAAA,SAAA,CAAnC,6CAAmC,C;IAI7BC,gCAAgC,GAAG,IAAA,SAAA,CAAzC,6CAAyC,C;IAInCC,kBAAkB,GAAG,IAAA,SAAA,CAA3B,6CAA2B,C;IAIrBC,qBAAqB,GAAG,IAAA,SAAA,CAA9B,6CAA8B,C;IAIxBC,yBAAyB,GAAG,IAAA,SAAA,CAAlC,6CAAkC,C;IAI5BC,0BAA0B,GAAG,IAAA,SAAA,CAAnC,6CAAmC,C;IAI7BC,2BAA2B,GAAG,IAAA,SAAA,CAAA,6CAAA,C;AC5B3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;SACO,yB;;ECjBP;;;;wFDiBO,mBAAA,UAAA,EAAA,WAAA,EAAA,OAAA,EAAA,OAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMCC,YAAAA,WAND,GAMeC,OAAO,IAAI;AAC7BC,cAAAA,aAAa,EAAED,OAAO,CADO,aAAA;AAE7BE,cAAAA,mBAAmB,EAAEF,OAAO,CAAPA,mBAAAA,IAA+BA,OAAO,CAF9B,UAAA;AAG7BG,cAAAA,UAAU,EAAEH,OAAO,CAACG;AAHS,aAN1B;AAAA;AAAA,mBAYmBpC,UAAU,CAAVA,eAAAA,CAAAA,WAAAA,EAAAA,OAAAA,EAAxB,WAAwBA,CAZnB;;AAAA;AAYClC,YAAAA,SAZD;;AAAA,kBAmBHnB,WAAW,CAAXA,eAAAA,IAAAA,IAAAA,IACAA,WAAW,CAAXA,oBAAAA,IADAA,IAnBG;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAsBS,UAAU,CAAV,kBAAA,CACJ;AACEmB,cAAAA,SAAS,EADX,SAAA;AAEEwE,cAAAA,SAAS,EAAE3F,WAAW,CAFxB,eAAA;AAGEqB,cAAAA,oBAAoB,EAAErB,WAAW,CAACqB;AAHpC,aADI,EAMJiE,OAAO,IAAIA,OAAO,CAPtB,UACQ,CAtBT;;AAAA;AAAA,4CAmBHtF,KAnBG;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAgCSqD,UAAU,CAAVA,kBAAAA,CAAAA,SAAAA,EAEJiC,OAAO,IAAIA,OAAO,CAHtB,UACQjC,CAhCT;;AAAA;AAAA,4CAkBL,KAlBK;;AAAA;AAkBCqC,YAAAA,MAlBD;;AAAA,iBAsCDA,MAAM,CAAV,GAtCK;AAAA;AAAA;AAAA;;AAAA,kBAuCG,IAAA,KAAA,uBACWvE,SADX,sBACgCa,IAAI,CAAJA,SAAAA,CADtC,MACsCA,CADhC,OAvCH;;AAAA;AAAA,+CA4CL,SA5CK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AChBA,SAAA,KAAA,CAAA,EAAA,EAA0C;AAC/C,SAAO,IAAA,OAAA,CAAY4D,UAAAA,OAAO;AAAA,WAAIC,UAAU,CAAA,OAAA,EAAxC,EAAwC,CAAd;AAAA,GAAnB,CAAP;AACD;ACgBD;AACA;AACA;AACA;;;AACO,SAAA,UAAA,CAAA,IAAA,EAAA,MAAA,EAGG;AACR,MAAMC,WAAW,GACftI,IAAI,CAAJA,MAAAA,CAAAA,IAAAA,IAAAA,CAAAA,GAAwBA,IAAI,CAAJA,MAAAA,CAAxBA,IAAAA,GAA2CuC,QAAAA,CAAAA,IAAAA,EAD7C,MAC6CA,CAD7C;AAEA,MAAM9C,IAAI,GAAGnH,MAAM,CAANA,KAAAA,CAAb,WAAaA,CAAb;AACA,MAAMiQ,YAAY,GAAG,MAAM,CAAN,MAAA,CAAc;AAAC9G,IAAAA,WAAW,EAAEzB,IAAI,CAACiB;AAAnB,GAAd,EAArB,MAAqB,CAArB;AACAjB,EAAAA,IAAI,CAAJA,MAAAA,CAAAA,MAAAA,CAAAA,YAAAA,EAAAA,IAAAA;AACA,SAAA,IAAA;AACD;AAED;AACA;AACA;AACA;;;AACO,SAAA,UAAA,CAAA,IAAA,EAAA,MAAA,EAGO;AACZ,MAAA,IAAA;;AACA,MAAI;AACFP,IAAAA,IAAI,GAAGO,IAAI,CAAJA,MAAAA,CAAAA,MAAAA,CAAPP,MAAOO,CAAPP;AADF,GAAA,CAEE,OAAA,GAAA,EAAY;AACZ,UAAM,IAAA,KAAA,CAAU,0BAAhB,GAAM,CAAN;AACD;;AAED,MAAIA,IAAI,CAAJA,WAAAA,KAAqBO,IAAI,CAA7B,KAAA,EAAqC;AACnC,UAAM,IAAA,KAAA,2DAC+CP,IAAI,CAACgC,WADpD,iBACsEzB,IAAI,CADhF,KAAM,EAAN;AAGD;;AAED,SAAA,IAAA;AACD;ACvDD;AACA;AACA;AACA;AACA;;;AACO,IAAMwI,mBAAmB,GAAGrJ,YAAY,CAAZA,IAAAA,CAA5B,sBAA4BA,CAA5B;AAEP;AACA;AACA;;ACDA;AACA;AACA;AACA;AACA;;AACA,IAAMsJ,kBAAkB,GAAGtJ,YAAY,CAAZA,MAAAA,CAUzB,CACAA,YAAY,CAAZA,GAAAA,CADA,SACAA,CADA,EAEAA,YAAY,CAAZA,GAAAA,CAFA,OAEAA,CAFA,EAGAoD,SAAAA,CAHA,kBAGAA,CAHA,EAIAA,SAAAA,CAJA,OAIAA,CAJA,EAKApD,YAAY,CAAZA,MAAAA,CACE,CADFA,mBACE,CADFA,EAfF,eAeEA,CALA,CAVyBA,CAA3B;AAqBauJ,IAAAA,oBAAoB,GAAGD,kBAAkB,CAA/C,IAAMC;AAQb;AACA;AACA;;IACO,Y;AAKL;AACF;AACA;AACE7N,wBAAW,IAAXA,EAAoC;AAAA;;AAAA,SAPpC8N,gBAOoC,GAAA,KAAA,CAAA;AAAA,SANpCtL,KAMoC,GAAA,KAAA,CAAA;AAAA,SALpCuL,aAKoC,GAAA,KAAA,CAAA;AAClC,SAAA,gBAAA,GAAwB/H,IAAI,CAA5B,gBAAA;AACA,SAAA,KAAA,GAAaA,IAAI,CAAjB,KAAA;AACA,SAAA,aAAA,GAAqBA,IAAI,CAAzB,aAAA;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;;WACSgI,yBAAe,MAAfA,EAES;AACd,UAAMC,YAAY,GAAGL,kBAAkB,CAAlBA,MAAAA,CAA0BrQ,QAAQ,CAAlCqQ,MAAkC,CAAlCA,EAArB,CAAqBA,CAArB;AACA,aAAO,IAAA,YAAA,CAAiB;AACtBE,QAAAA,gBAAgB,EAAE,IAAA,SAAA,CAAcG,YAAY,CADtB,gBACJ,CADI;AAEtBzL,QAAAA,KAAK,EAAE,IAAA,SAAA,CAAcyL,YAAY,CAA1B,KAAA,EAFe,QAEf,EAFe;AAGtBF,QAAAA,aAAa,EAAEE,YAAY,CAACF;AAHN,OAAjB,CAAP;AAKD;;;;;;ACnEH,IAAMG,YAAY,GAAOC,SAAnBD,YAAmBC,CAAAA,MAAJ,EAA2C;AAC9D,MAAM/N,MAAM,GAAG+N,MAAM,CAANA,MAAAA,CAAAA,IAAAA,CAAf,MAAeA,CAAf;AACA,MAAMjO,MAAM,GAAGiO,MAAM,CAANA,MAAAA,CAAAA,IAAAA,CAAf,MAAeA,CAAf;AACA,SAAO;AAAC/N,IAAAA,MAAD,EAACA,MAAD;AAASF,IAAAA,MAAAA,EAAAA;AAAT,GAAP;AAHF,CAAA;;AAMA,IAAMkO,MAAM,GACT5G,SADG4G,MACH5G,CAAAA,MAAD;AAAA,SACCnD,UAAAA,QAAD,EAAuC;AACrC,QAAM8J,MAAM,GAAGE,IAAI,CAAA,MAAA,EAAnB,QAAmB,CAAnB;;AACA,wBAAyBH,YAAY,CAArC,MAAqC,CAArC;AAAA,QAAM,MAAN,iBAAM,MAAN;AAAA,QAAe9N,MAAf,iBAAeA,MAAf;;AAEA,QAAMkO,YAAY,GAAlB,MAAA;;AAEAA,IAAAA,YAAY,CAAZA,MAAAA,GAAsB,UAAA,MAAA,EAAA,MAAA,EAAoC;AACxD,UAAMC,GAAG,GAAGnO,MAAM,CAAA,MAAA,EAAlB,MAAkB,CAAlB;AACA,aAAOoO,UAAU,CAAC/Q,MAAM,CAANA,IAAAA,CAAlB,GAAkBA,CAAD,CAAjB;AAFF6Q,KAAAA;;AAKAA,IAAAA,YAAY,CAAZA,MAAAA,GAAsB,UAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAoD;AACxE,UAAMC,GAAG,GAAGE,UAAU,CAAA,MAAA,EAAtB,MAAsB,CAAtB;AACA,aAAOvO,MAAM,CAAA,GAAA,EAAA,MAAA,EAAb,MAAa,CAAb;AAFFoO,KAAAA;;AAKA,WAAA,YAAA;AAlBJ,GACE;AAAA,CADF;;AAqBO,IAAMI,GAAG,GAAGN,MAAM,CAAlB,CAAkB,CAAlB;ACpBP;AACA;AACA;;AA0NA;AACA;AACA;;IACO,iB;AACL;AACF;AACA;AACEpO,+BAAc;AAAA;AAAE;AAEhB;AACF;AACA;;;;;WACS2O,+BAAqB,WAArBA,EAEkB;AACvB,WAAA,cAAA,CAAoB/H,WAAW,CAA/B,SAAA;AAEA,UAAMgI,qBAAqB,GAAGtK,YAAY,CAAZA,GAAAA,CAA9B,aAA8BA,CAA9B;AACA,UAAMuK,SAAS,GAAGD,qBAAqB,CAArBA,MAAAA,CAA6BhI,WAAW,CAA1D,IAAkBgI,CAAlB;AAEA,UAAA,IAAA;;AACA,0CAA+B3O,MAAM,CAANA,OAAAA,CAA/B,0BAA+BA,CAA/B,uCAA2E;AAAtE;AAAA,YAAM,MAAN;AAAA,YAAL,MAAK;;AACH,YAAIkO,MAAM,CAANA,KAAAA,IAAJ,SAAA,EAA+B;AAC7BhJ,UAAAA,IAAI,GAAJA,MAAAA;AACA;AACD;AACF;;AAED,UAAI,CAAJ,IAAA,EAAW;AACT,cAAM,IAAA,KAAA,CAAN,qDAAM,CAAN;AACD;;AAED,aAAA,IAAA;AACD;AAED;AACF;AACA;;;;WACS2J,6BAAmB,WAAnBA,EAEgB;AACrB,WAAA,cAAA,CAAoBlI,WAAW,CAA/B,SAAA;AACA,WAAA,cAAA,CAAoBA,WAAW,CAA/B,IAAA,EAAA,CAAA;;AAEA,wBAAqCmI,UAAU,CAC7CC,0BAA0B,CADmB,MAAA,EAE7CpI,WAAW,CAFb,IAA+C,CAA/C;AAAA,UAAM,QAAN,eAAM,QAAN;AAAA,UAAM,KAAN,eAAM,KAAN;AAAA,UAAwB9E,SAAxB,eAAwBA,SAAxB;;AAKA,aAAO;AACLmN,QAAAA,UAAU,EAAErI,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EADP,MAAA;AAELsI,QAAAA,gBAAgB,EAAEtI,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EAFb,MAAA;AAGLuI,QAAAA,QAHK,EAGLA,QAHK;AAILC,QAAAA,KAJK,EAILA,KAJK;AAKLtN,QAAAA,SAAS,EAAE,IAAA,SAAA,CAAA,SAAA;AALN,OAAP;AAOD;AAED;AACF;AACA;;;;WACSuN,wBAAc,WAAdA,EAEuB;AAC5B,WAAA,cAAA,CAAoBzI,WAAW,CAA/B,SAAA;AACA,WAAA,cAAA,CAAoBA,WAAW,CAA/B,IAAA,EAAA,CAAA;;AAEA,yBAAmBmI,UAAU,CAC3BC,0BAA0B,CADC,QAAA,EAE3BpI,WAAW,CAFb,IAA6B,CAA7B;AAAA,UAAOuI,QAAP,gBAAOA,QAAP;;AAKA,aAAO;AACLF,QAAAA,UAAU,EAAErI,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EADP,MAAA;AAEL0I,QAAAA,QAAQ,EAAE1I,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EAFL,MAAA;AAGLuI,QAAAA,QAAAA,EAAAA;AAHK,OAAP;AAKD;AAED;AACF;AACA;;;;WACSI,gCAAsB,WAAtBA,EAE+B;AACpC,WAAA,cAAA,CAAoB3I,WAAW,CAA/B,SAAA;AACA,WAAA,cAAA,CAAoBA,WAAW,CAA/B,IAAA,EAAA,CAAA;;AAEA,yBAAoCmI,UAAU,CAC5CC,0BAA0B,CADkB,gBAAA,EAE5CpI,WAAW,CAFb,IAA8C,CAA9C;AAAA,UAAM,QAAN,gBAAM,QAAN;AAAA,UAAM,IAAN,gBAAM,IAAN;AAAA,UAAuB9E,SAAvB,gBAAuBA,SAAvB;;AAKA,aAAO;AACLmN,QAAAA,UAAU,EAAErI,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EADP,MAAA;AAEL4I,QAAAA,UAAU,EAAE5I,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EAFP,MAAA;AAGL0I,QAAAA,QAAQ,EAAE1I,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EAHL,MAAA;AAILuI,QAAAA,QAJK,EAILA,QAJK;AAKLhN,QAAAA,IALK,EAKLA,IALK;AAMLL,QAAAA,SAAS,EAAE,IAAA,SAAA,CAAA,SAAA;AANN,OAAP;AAQD;AAED;AACF;AACA;;;;WACS2N,wBAAc,WAAdA,EAAoE;AACzE,WAAA,cAAA,CAAoB7I,WAAW,CAA/B,SAAA;AACA,WAAA,cAAA,CAAoBA,WAAW,CAA/B,IAAA,EAAA,CAAA;;AAEA,yBAAgBmI,UAAU,CACxBC,0BAA0B,CADF,QAAA,EAExBpI,WAAW,CAFb,IAA0B,CAA1B;AAAA,UAAOwI,KAAP,gBAAOA,KAAP;;AAKA,aAAO;AACLM,QAAAA,aAAa,EAAE9I,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EADV,MAAA;AAELwI,QAAAA,KAAAA,EAAAA;AAFK,OAAP;AAID;AAED;AACF;AACA;;;;WACSO,gCAAsB,WAAtBA,EAEmB;AACxB,WAAA,cAAA,CAAoB/I,WAAW,CAA/B,SAAA;AACA,WAAA,cAAA,CAAoBA,WAAW,CAA/B,IAAA,EAAA,CAAA;;AAEA,yBAAuCmI,UAAU,CAC/CC,0BAA0B,CADqB,gBAAA,EAE/CpI,WAAW,CAFb,IAAiD,CAAjD;AAAA,UAAM,IAAN,gBAAM,IAAN;AAAA,UAAM,IAAN,gBAAM,IAAN;AAAA,UAAM,KAAN,gBAAM,KAAN;AAAA,UAA0B9E,SAA1B,gBAA0BA,SAA1B;;AAKA,aAAO;AACL4N,QAAAA,aAAa,EAAE9I,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EADV,MAAA;AAEL4I,QAAAA,UAAU,EAAE,IAAA,SAAA,CAFP,IAEO,CAFP;AAGLrN,QAAAA,IAHK,EAGLA,IAHK;AAILiN,QAAAA,KAJK,EAILA,KAJK;AAKLtN,QAAAA,SAAS,EAAE,IAAA,SAAA,CAAA,SAAA;AALN,OAAP;AAOD;AAED;AACF;AACA;;;;WACS8N,sBAAY,WAAZA,EAAgE;AACrE,WAAA,cAAA,CAAoBhJ,WAAW,CAA/B,SAAA;AACA,WAAA,cAAA,CAAoBA,WAAW,CAA/B,IAAA,EAAA,CAAA;;AAEA,yBAAoBmI,UAAU,CAC5BC,0BAA0B,CADE,MAAA,EAE5BpI,WAAW,CAFb,IAA8B,CAA9B;AAAA,UAAO9E,SAAP,gBAAOA,SAAP;;AAKA,aAAO;AACL4N,QAAAA,aAAa,EAAE9I,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EADV,MAAA;AAEL9E,QAAAA,SAAS,EAAE,IAAA,SAAA,CAAA,SAAA;AAFN,OAAP;AAID;AAED;AACF;AACA;;;;WACS+N,8BAAoB,WAApBA,EAEiB;AACtB,WAAA,cAAA,CAAoBjJ,WAAW,CAA/B,SAAA;AACA,WAAA,cAAA,CAAoBA,WAAW,CAA/B,IAAA,EAAA,CAAA;;AAEA,yBAAgCmI,UAAU,CACxCC,0BAA0B,CADc,cAAA,EAExCpI,WAAW,CAFb,IAA0C,CAA1C;AAAA,UAAM,IAAN,gBAAM,IAAN;AAAA,UAAM,IAAN,gBAAM,IAAN;AAAA,UAAmB9E,SAAnB,gBAAmBA,SAAnB;;AAKA,aAAO;AACL4N,QAAAA,aAAa,EAAE9I,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EADV,MAAA;AAEL4I,QAAAA,UAAU,EAAE,IAAA,SAAA,CAFP,IAEO,CAFP;AAGLrN,QAAAA,IAHK,EAGLA,IAHK;AAILL,QAAAA,SAAS,EAAE,IAAA,SAAA,CAAA,SAAA;AAJN,OAAP;AAMD;AAED;AACF;AACA;;;;WACSgO,8BAAoB,WAApBA,EAEwB;AAC7B,WAAA,cAAA,CAAoBlJ,WAAW,CAA/B,SAAA;AACA,WAAA,cAAA,CAAoBA,WAAW,CAA/B,IAAA,EAAA,CAAA;;AAEA,yBAAiDmI,UAAU,CACzDC,0BAA0B,CAD+B,cAAA,EAEzDpI,WAAW,CAFb,IAA2D,CAA3D;AAAA,UAAM,IAAN,gBAAM,IAAN;AAAA,UAAM,IAAN,gBAAM,IAAN;AAAA,UAAM,QAAN,gBAAM,QAAN;AAAA,UAAM,KAAN,gBAAM,KAAN;AAAA,UAAoC9E,SAApC,gBAAoCA,SAApC;;AAKA,aAAO;AACLmN,QAAAA,UAAU,EAAErI,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EADP,MAAA;AAELsI,QAAAA,gBAAgB,EAAEtI,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EAFb,MAAA;AAGL4I,QAAAA,UAAU,EAAE,IAAA,SAAA,CAHP,IAGO,CAHP;AAILrN,QAAAA,IAJK,EAILA,IAJK;AAKLgN,QAAAA,QALK,EAKLA,QALK;AAMLC,QAAAA,KANK,EAMLA,KANK;AAOLtN,QAAAA,SAAS,EAAE,IAAA,SAAA,CAAA,SAAA;AAPN,OAAP;AASD;AAED;AACF;AACA;;;;WACSiO,+BAAqB,WAArBA,EAEkB;AACvB,WAAA,cAAA,CAAoBnJ,WAAW,CAA/B,SAAA;AACA,WAAA,cAAA,CAAoBA,WAAW,CAA/B,IAAA,EAAA,CAAA;;AAEA,yBAAqBmI,UAAU,CAC7BC,0BAA0B,CADG,sBAAA,EAE7BpI,WAAW,CAFb,IAA+B,CAA/B;AAAA,UAAO7B,UAAP,gBAAOA,UAAP;;AAKA,aAAO;AACLiL,QAAAA,WAAW,EAAEpJ,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EADR,MAAA;AAELkH,QAAAA,gBAAgB,EAAE,IAAA,SAAA,CAAA,UAAA;AAFb,OAAP;AAID;AAED;AACF;AACA;;;;WACSmC,4BAAkB,WAAlBA,EAEe;AACpB,WAAA,cAAA,CAAoBrJ,WAAW,CAA/B,SAAA;AACA,WAAA,cAAA,CAAoBA,WAAW,CAA/B,IAAA,EAAA,CAAA;AAEAmI,MAAAA,UAAU,CACRC,0BAA0B,CADlB,mBAAA,EAERpI,WAAW,CAFbmI,IAAU,CAAVA;AAKA,aAAO;AACLiB,QAAAA,WAAW,EAAEpJ,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EADR,MAAA;AAELkH,QAAAA,gBAAgB,EAAElH,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EAAoB9D;AAFjC,OAAP;AAID;AAED;AACF;AACA;;;;WACSoN,6BAAmB,WAAnBA,EAEgB;AACrB,WAAA,cAAA,CAAoBtJ,WAAW,CAA/B,SAAA;AACA,WAAA,cAAA,CAAoBA,WAAW,CAA/B,IAAA,EAAA,CAAA;;AAEA,0BAAmBmI,UAAU,CAC3BC,0BAA0B,CADC,oBAAA,EAE3BpI,WAAW,CAFb,IAA6B,CAA7B;AAAA,UAAOuI,QAAP,iBAAOA,QAAP;;AAKA,aAAO;AACLa,QAAAA,WAAW,EAAEpJ,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EADR,MAAA;AAEL0I,QAAAA,QAAQ,EAAE1I,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EAFL,MAAA;AAGLkH,QAAAA,gBAAgB,EAAElH,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EAHb,MAAA;AAILuI,QAAAA,QAAAA,EAAAA;AAJK,OAAP;AAMD;AAED;AACF;AACA;;;;WACSgB,8BAAoB,WAApBA,EAEiB;AACtB,WAAA,cAAA,CAAoBvJ,WAAW,CAA/B,SAAA;AACA,WAAA,cAAA,CAAoBA,WAAW,CAA/B,IAAA,EAAA,CAAA;;AAEA,0BAAqBmI,UAAU,CAC7BC,0BAA0B,CADG,qBAAA,EAE7BpI,WAAW,CAFb,IAA+B,CAA/B;AAAA,UAAO7B,UAAP,iBAAOA,UAAP;;AAKA,aAAO;AACLiL,QAAAA,WAAW,EAAEpJ,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EADR,MAAA;AAELkH,QAAAA,gBAAgB,EAAElH,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EAFb,MAAA;AAGLwJ,QAAAA,mBAAmB,EAAE,IAAA,SAAA,CAAA,UAAA;AAHhB,OAAP;AAKD;AAED;AACF;AACA;;;;WACSC,wBAAc,SAAdA,EAAqC;AAC1C,UAAI,CAACvO,SAAS,CAATA,MAAAA,CAAiBwO,aAAa,CAAnC,SAAKxO,CAAL,EAAgD;AAC9C,cAAM,IAAA,KAAA,CAAN,qDAAM,CAAN;AACD;AACF;AAED;AACF;AACA;;;;WACSyO,wBAAc,IAAdA,EAAc,cAAdA,EAAyD;AAC9D,UAAIxI,IAAI,CAAJA,MAAAA,GAAJ,cAAA,EAAkC;AAChC,cAAM,IAAA,KAAA,sCAC0BA,IAAI,CAACP,MAD/B,sCAAN,cAAM,EAAN;AAGD;AACF;;;;;AAGH;AACA;AACA;;AAuEA;AACA;AACA;AACA;;;IACawH,0BAA0B,GAAG,MAAM,CAAN,MAAA,CAIvC;AACDwB,EAAAA,MAAM,EAAE;AACNpK,IAAAA,KAAK,EADC,CAAA;AAEN+H,IAAAA,MAAM,EAAE7J,YAAY,CAAZA,MAAAA,CAA0D,CAChEA,YAAY,CAAZA,GAAAA,CADgE,aAChEA,CADgE,EAEhEA,YAAY,CAAZA,IAAAA,CAFgE,UAEhEA,CAFgE,EAGhEA,YAAY,CAAZA,IAAAA,CAHgE,OAGhEA,CAHgE,EAIhEoD,SAAAA,CAJMpD,WAINoD,CAJgE,CAA1DpD;AAFF,GADP;AAUDmM,EAAAA,MAAM,EAAE;AACNrK,IAAAA,KAAK,EADC,CAAA;AAEN+H,IAAAA,MAAM,EAAE7J,YAAY,CAAZA,MAAAA,CAA0D,CAChEA,YAAY,CAAZA,GAAAA,CADgE,aAChEA,CADgE,EAEhEoD,SAAAA,CAFMpD,WAENoD,CAFgE,CAA1DpD;AAFF,GAVP;AAiBDoM,EAAAA,QAAQ,EAAE;AACRtK,IAAAA,KAAK,EADG,CAAA;AAER+H,IAAAA,MAAM,EAAE7J,YAAY,CAAZA,MAAAA,CAA4D,CAClEA,YAAY,CAAZA,GAAAA,CADkE,aAClEA,CADkE,EAElEoK,GAAG,CAFGpK,UAEH,CAF+D,CAA5DA;AAFA,GAjBT;AAwBDqM,EAAAA,cAAc,EAAE;AACdvK,IAAAA,KAAK,EADS,CAAA;AAEd+H,IAAAA,MAAM,EAAE7J,YAAY,CAAZA,MAAAA,CAAkE,CACxEA,YAAY,CAAZA,GAAAA,CADwE,aACxEA,CADwE,EAExEoD,SAAAA,CAFwE,MAExEA,CAFwE,EAGxEA,UAAAA,CAHwE,MAGxEA,CAHwE,EAIxEpD,YAAY,CAAZA,IAAAA,CAJwE,UAIxEA,CAJwE,EAKxEA,YAAY,CAAZA,IAAAA,CALwE,OAKxEA,CALwE,EAMxEoD,SAAAA,CANMpD,WAMNoD,CANwE,CAAlEpD;AAFM,GAxBf;AAmCDsM,EAAAA,mBAAmB,EAAE;AACnBxK,IAAAA,KAAK,EADc,CAAA;AAEnB+H,IAAAA,MAAM,EAAE7J,YAAY,CAAZA,MAAAA,CAEN,CAACA,YAAY,CAAZA,GAAAA,CAFKA,aAELA,CAAD,CAFMA;AAFW,GAnCpB;AAyCDuM,EAAAA,oBAAoB,EAAE;AACpBzK,IAAAA,KAAK,EADe,CAAA;AAEpB+H,IAAAA,MAAM,EAAE7J,YAAY,CAAZA,MAAAA,CAEN,CAACA,YAAY,CAAZA,GAAAA,CAAD,aAACA,CAAD,EAAkCA,YAAY,CAAZA,IAAAA,CAF5BA,UAE4BA,CAAlC,CAFMA;AAFY,GAzCrB;AA+CDwM,EAAAA,sBAAsB,EAAE;AACtB1K,IAAAA,KAAK,EADiB,CAAA;AAEtB+H,IAAAA,MAAM,EAAE7J,YAAY,CAAZA,MAAAA,CAEN,CAACA,YAAY,CAAZA,GAAAA,CAAD,aAACA,CAAD,EAAkCoD,SAAAA,CAF5BpD,YAE4BoD,CAAlC,CAFMpD;AAFc,GA/CvB;AAqDDyM,EAAAA,qBAAqB,EAAE;AACrB3K,IAAAA,KAAK,EADgB,CAAA;AAErB+H,IAAAA,MAAM,EAAE7J,YAAY,CAAZA,MAAAA,CAEN,CAACA,YAAY,CAAZA,GAAAA,CAAD,aAACA,CAAD,EAAkCoD,SAAAA,CAF5BpD,YAE4BoD,CAAlC,CAFMpD;AAFa,GArDtB;AA2DD0M,EAAAA,QAAQ,EAAE;AACR5K,IAAAA,KAAK,EADG,CAAA;AAER+H,IAAAA,MAAM,EAAE7J,YAAY,CAAZA,MAAAA,CAA4D,CAClEA,YAAY,CAAZA,GAAAA,CADkE,aAClEA,CADkE,EAElEA,YAAY,CAAZA,IAAAA,CAFMA,OAENA,CAFkE,CAA5DA;AAFA,GA3DT;AAkED2M,EAAAA,gBAAgB,EAAE;AAChB7K,IAAAA,KAAK,EADW,CAAA;AAEhB+H,IAAAA,MAAM,EAAE7J,YAAY,CAAZA,MAAAA,CACN,CACEA,YAAY,CAAZA,GAAAA,CADF,aACEA,CADF,EAEEoD,SAAAA,CAFF,MAEEA,CAFF,EAGEA,UAAAA,CAHF,MAGEA,CAHF,EAIEpD,YAAY,CAAZA,IAAAA,CAJF,OAIEA,CAJF,EAKEoD,SAAAA,CANIpD,WAMJoD,CALF,CADMpD;AAFQ,GAlEjB;AA8ED4M,EAAAA,cAAc,EAAE;AACd9K,IAAAA,KAAK,EADS,EAAA;AAEd+H,IAAAA,MAAM,EAAE7J,YAAY,CAAZA,MAAAA,CAAkE,CACxEA,YAAY,CAAZA,GAAAA,CADwE,aACxEA,CADwE,EAExEoD,SAAAA,CAFwE,MAExEA,CAFwE,EAGxEA,UAAAA,CAHwE,MAGxEA,CAHwE,EAIxEA,SAAAA,CAJMpD,WAINoD,CAJwE,CAAlEpD;AAFM,GA9Ef;AAuFD6M,EAAAA,gBAAgB,EAAE;AAChB/K,IAAAA,KAAK,EADW,EAAA;AAEhB+H,IAAAA,MAAM,EAAE7J,YAAY,CAAZA,MAAAA,CACN,CACEA,YAAY,CAAZA,GAAAA,CADF,aACEA,CADF,EAEEoK,GAAG,CAFL,UAEK,CAFL,EAGEhH,UAAAA,CAHF,MAGEA,CAHF,EAIEA,SAAAA,CALIpD,WAKJoD,CAJF,CADMpD;AAFQ,GAvFjB;AAkGD8M,EAAAA,mBAAmB,EAAE;AACnBhL,IAAAA,KAAK,EADc,EAAA;AAEnB+H,IAAAA,MAAM,EAAE7J,YAAY,CAAZA,MAAAA,CAEN,CAACA,YAAY,CAAZA,GAAAA,CAFKA,aAELA,CAAD,CAFMA;AAFW;AAlGpB,CAJuC,C;AA8G1C;AACA;AACA;;IACO,a;AACL;AACF;AACA;AACEtE,2BAAc;AAAA;AAAE;AAEhB;AACF;AACA;;AAKE;AACF;AACA;;;;;WACSqR,uBAAa,MAAbA,EAAmE;AACxE,UAAMlM,IAAI,GAAG6J,0BAA0B,CAAvC,MAAA;AACA,UAAMpK,IAAI,GAAG0M,UAAU,CAAA,IAAA,EAAO;AAC5BnC,QAAAA,QAAQ,EAAEoC,MAAM,CADY,QAAA;AAE5BnC,QAAAA,KAAK,EAAEmC,MAAM,CAFe,KAAA;AAG5BzP,QAAAA,SAAS,EAAEvE,QAAQ,CAACgU,MAAM,CAANA,SAAAA,CAAD,QAACA,EAAD;AAHS,OAAP,CAAvB;AAMA,aAAO,IAAA,sBAAA,CAA2B;AAChCxJ,QAAAA,IAAI,EAAE,CACJ;AAACjF,UAAAA,MAAM,EAAEyO,MAAM,CAAf,UAAA;AAA4B3I,UAAAA,QAAQ,EAApC,IAAA;AAA4CD,UAAAA,UAAU,EAAE;AAAxD,SADI,EAEJ;AAAC7F,UAAAA,MAAM,EAAEyO,MAAM,CAAf,gBAAA;AAAkC3I,UAAAA,QAAQ,EAA1C,IAAA;AAAkDD,UAAAA,UAAU,EAAE;AAA9D,SAFI,CAD0B;AAKhC7G,QAAAA,SAAS,EAAE,KALqB,SAAA;AAMhC8C,QAAAA,IAAAA,EAAAA;AANgC,OAA3B,CAAP;AAQD;AAED;AACF;AACA;;;;WACS4M,kBAAQ,MAARA,EAEmB;AACxB,UAAA,IAAA;AACA,UAAA,IAAA;;AACA,UAAI,gBAAJ,MAAA,EAA4B;AAC1B,YAAMrM,KAAI,GAAG6J,0BAA0B,CAAvC,gBAAA;AACApK,QAAAA,IAAI,GAAG0M,UAAU,CAAA,KAAA,EAAO;AACtBnC,UAAAA,QAAQ,EAAEsC,MAAM,CAACF,MAAM,CADD,QACN,CADM;AAEtBpP,UAAAA,IAAI,EAAEoP,MAAM,CAFU,IAAA;AAGtBzP,UAAAA,SAAS,EAAEvE,QAAQ,CAACgU,MAAM,CAANA,SAAAA,CAAD,QAACA,EAAD;AAHG,SAAP,CAAjB3M;AAKAmD,QAAAA,IAAI,GAAG,CACL;AAACjF,UAAAA,MAAM,EAAEyO,MAAM,CAAf,UAAA;AAA4B3I,UAAAA,QAAQ,EAApC,KAAA;AAA6CD,UAAAA,UAAU,EAAE;AAAzD,SADK,EAEL;AAAC7F,UAAAA,MAAM,EAAEyO,MAAM,CAAf,UAAA;AAA4B3I,UAAAA,QAAQ,EAApC,IAAA;AAA4CD,UAAAA,UAAU,EAAE;AAAxD,SAFK,EAGL;AAAC7F,UAAAA,MAAM,EAAEyO,MAAM,CAAf,QAAA;AAA0B3I,UAAAA,QAAQ,EAAlC,KAAA;AAA2CD,UAAAA,UAAU,EAAE;AAAvD,SAHK,CAAPZ;AAPF,OAAA,MAYO;AACL,YAAM5C,MAAI,GAAG6J,0BAA0B,CAAvC,QAAA;AACApK,QAAAA,IAAI,GAAG0M,UAAU,CAAA,MAAA,EAAO;AAACnC,UAAAA,QAAQ,EAAEsC,MAAM,CAACF,MAAM,CAAP,QAAA;AAAjB,SAAP,CAAjB3M;AACAmD,QAAAA,IAAI,GAAG,CACL;AAACjF,UAAAA,MAAM,EAAEyO,MAAM,CAAf,UAAA;AAA4B3I,UAAAA,QAAQ,EAApC,IAAA;AAA4CD,UAAAA,UAAU,EAAE;AAAxD,SADK,EAEL;AAAC7F,UAAAA,MAAM,EAAEyO,MAAM,CAAf,QAAA;AAA0B3I,UAAAA,QAAQ,EAAlC,KAAA;AAA2CD,UAAAA,UAAU,EAAE;AAAvD,SAFK,CAAPZ;AAID;;AAED,aAAO,IAAA,sBAAA,CAA2B;AAChCA,QAAAA,IADgC,EAChCA,IADgC;AAEhCjG,QAAAA,SAAS,EAAE,KAFqB,SAAA;AAGhC8C,QAAAA,IAAAA,EAAAA;AAHgC,OAA3B,CAAP;AAKD;AAED;AACF;AACA;;;;WACS8M,gBAAM,MAANA,EAEmB;AACxB,UAAA,IAAA;AACA,UAAA,IAAA;;AACA,UAAI,gBAAJ,MAAA,EAA4B;AAC1B,YAAMvM,MAAI,GAAG6J,0BAA0B,CAAvC,cAAA;AACApK,QAAAA,IAAI,GAAG0M,UAAU,CAAA,MAAA,EAAO;AACtBK,UAAAA,IAAI,EAAEpU,QAAQ,CAACgU,MAAM,CAANA,UAAAA,CADO,QACPA,EAAD,CADQ;AAEtBpP,UAAAA,IAAI,EAAEoP,MAAM,CAFU,IAAA;AAGtBzP,UAAAA,SAAS,EAAEvE,QAAQ,CAACgU,MAAM,CAANA,SAAAA,CAAD,QAACA,EAAD;AAHG,SAAP,CAAjB3M;AAKAmD,QAAAA,IAAI,GAAG,CACL;AAACjF,UAAAA,MAAM,EAAEyO,MAAM,CAAf,aAAA;AAA+B3I,UAAAA,QAAQ,EAAvC,KAAA;AAAgDD,UAAAA,UAAU,EAAE;AAA5D,SADK,EAEL;AAAC7F,UAAAA,MAAM,EAAEyO,MAAM,CAAf,UAAA;AAA4B3I,UAAAA,QAAQ,EAApC,IAAA;AAA4CD,UAAAA,UAAU,EAAE;AAAxD,SAFK,CAAPZ;AAPF,OAAA,MAWO;AACL,YAAM5C,MAAI,GAAG6J,0BAA0B,CAAvC,MAAA;AACApK,QAAAA,IAAI,GAAG0M,UAAU,CAAA,MAAA,EAAO;AACtBxP,UAAAA,SAAS,EAAEvE,QAAQ,CAACgU,MAAM,CAANA,SAAAA,CAAD,QAACA,EAAD;AADG,SAAP,CAAjB3M;AAGAmD,QAAAA,IAAI,GAAG,CAAC;AAACjF,UAAAA,MAAM,EAAEyO,MAAM,CAAf,aAAA;AAA+B3I,UAAAA,QAAQ,EAAvC,IAAA;AAA+CD,UAAAA,UAAU,EAAE;AAA3D,SAAD,CAAPZ;AACD;;AAED,aAAO,IAAA,sBAAA,CAA2B;AAChCA,QAAAA,IADgC,EAChCA,IADgC;AAEhCjG,QAAAA,SAAS,EAAE,KAFqB,SAAA;AAGhC8C,QAAAA,IAAAA,EAAAA;AAHgC,OAA3B,CAAP;AAKD;AAED;AACF;AACA;AACA;;;;WACSgN,+BAAqB,MAArBA,EAEmB;AACxB,UAAMzM,IAAI,GAAG6J,0BAA0B,CAAvC,cAAA;AACA,UAAMpK,IAAI,GAAG0M,UAAU,CAAA,IAAA,EAAO;AAC5BK,QAAAA,IAAI,EAAEpU,QAAQ,CAACgU,MAAM,CAANA,UAAAA,CADa,QACbA,EAAD,CADc;AAE5BpP,QAAAA,IAAI,EAAEoP,MAAM,CAFgB,IAAA;AAG5BpC,QAAAA,QAAQ,EAAEoC,MAAM,CAHY,QAAA;AAI5BnC,QAAAA,KAAK,EAAEmC,MAAM,CAJe,KAAA;AAK5BzP,QAAAA,SAAS,EAAEvE,QAAQ,CAACgU,MAAM,CAANA,SAAAA,CAAD,QAACA,EAAD;AALS,OAAP,CAAvB;AAOA,UAAIxJ,IAAI,GAAG,CACT;AAACjF,QAAAA,MAAM,EAAEyO,MAAM,CAAf,UAAA;AAA4B3I,QAAAA,QAAQ,EAApC,IAAA;AAA4CD,QAAAA,UAAU,EAAE;AAAxD,OADS,EAET;AAAC7F,QAAAA,MAAM,EAAEyO,MAAM,CAAf,gBAAA;AAAkC3I,QAAAA,QAAQ,EAA1C,KAAA;AAAmDD,QAAAA,UAAU,EAAE;AAA/D,OAFS,CAAX;;AAIA,UAAI4I,MAAM,CAANA,UAAAA,IAAqBA,MAAM,CAA/B,UAAA,EAA4C;AAC1CxJ,QAAAA,IAAI,CAAJA,IAAAA,CAAU;AAACjF,UAAAA,MAAM,EAAEyO,MAAM,CAAf,UAAA;AAA4B3I,UAAAA,QAAQ,EAApC,IAAA;AAA4CD,UAAAA,UAAU,EAAE;AAAxD,SAAVZ;AACD;;AAED,aAAO,IAAA,sBAAA,CAA2B;AAChCA,QAAAA,IADgC,EAChCA,IADgC;AAEhCjG,QAAAA,SAAS,EAAE,KAFqB,SAAA;AAGhC8C,QAAAA,IAAAA,EAAAA;AAHgC,OAA3B,CAAP;AAKD;AAED;AACF;AACA;;;;WACSiN,4BAAkB,MAAlBA,EAEQ;AACb,UAAMlK,WAAW,GAAG,IAApB,WAAoB,EAApB;;AACA,UAAI,gBAAA,MAAA,IAA0B,UAA9B,MAAA,EAAgD;AAC9CA,QAAAA,WAAW,CAAXA,GAAAA,CACE,aAAa,CAAb,qBAAA,CAAoC;AAClCsH,UAAAA,UAAU,EAAEsC,MAAM,CADgB,UAAA;AAElCrC,UAAAA,gBAAgB,EAAEqC,MAAM,CAFU,WAAA;AAGlC/B,UAAAA,UAAU,EAAE+B,MAAM,CAHgB,UAAA;AAIlCpP,UAAAA,IAAI,EAAEoP,MAAM,CAJsB,IAAA;AAKlCpC,UAAAA,QAAQ,EAAEoC,MAAM,CALkB,QAAA;AAMlCnC,UAAAA,KAAK,EAN6B,oBAAA;AAOlCtN,UAAAA,SAAS,EAAE,KAAKA;AAPkB,SAApC,CADF6F;AADF,OAAA,MAYO;AACLA,QAAAA,WAAW,CAAXA,GAAAA,CACE,aAAa,CAAb,aAAA,CAA4B;AAC1BsH,UAAAA,UAAU,EAAEsC,MAAM,CADQ,UAAA;AAE1BrC,UAAAA,gBAAgB,EAAEqC,MAAM,CAFE,WAAA;AAG1BpC,UAAAA,QAAQ,EAAEoC,MAAM,CAHU,QAAA;AAI1BnC,UAAAA,KAAK,EAJqB,oBAAA;AAK1BtN,UAAAA,SAAS,EAAE,KAAKA;AALU,SAA5B,CADF6F;AASD;;AAED,UAAMmK,UAAU,GAAG;AACjB9B,QAAAA,WAAW,EAAEuB,MAAM,CADF,WAAA;AAEjBzD,QAAAA,gBAAgB,EAAEyD,MAAM,CAACzD;AAFR,OAAnB;AAKAnG,MAAAA,WAAW,CAAXA,GAAAA,CAAgB,KAAA,eAAA,CAAhBA,UAAgB,CAAhBA;AACA,aAAA,WAAA;AACD;AAED;AACF;AACA;;;;WACSoK,yBAAe,MAAfA,EAEmB;AACxB,UAAM5M,IAAI,GAAG6J,0BAA0B,CAAvC,sBAAA;AACA,UAAMpK,IAAI,GAAG0M,UAAU,CAAA,IAAA,EAAO;AAC5BvM,QAAAA,UAAU,EAAExH,QAAQ,CAACgU,MAAM,CAANA,gBAAAA,CAAD,QAACA,EAAD;AADQ,OAAP,CAAvB;AAGA,UAAMS,eAAe,GAAG;AACtBjK,QAAAA,IAAI,EAAE,CACJ;AAACjF,UAAAA,MAAM,EAAEyO,MAAM,CAAf,WAAA;AAA6B3I,UAAAA,QAAQ,EAArC,KAAA;AAA8CD,UAAAA,UAAU,EAAE;AAA1D,SADI,EAEJ;AACE7F,UAAAA,MAAM,EADR,gCAAA;AAEE8F,UAAAA,QAAQ,EAFV,KAAA;AAGED,UAAAA,UAAU,EAAE;AAHd,SAFI,EAOJ;AAAC7F,UAAAA,MAAM,EAAP,kBAAA;AAA6B8F,UAAAA,QAAQ,EAArC,KAAA;AAA8CD,UAAAA,UAAU,EAAE;AAA1D,SAPI,CADgB;AAUtB7G,QAAAA,SAAS,EAAE,KAVW,SAAA;AAWtB8C,QAAAA,IAAAA,EAAAA;AAXsB,OAAxB;AAaA,aAAO,IAAA,sBAAA,CAAP,eAAO,CAAP;AACD;AAED;AACF;AACA;;;;WACSqN,sBAAY,MAAZA,EAAiE;AACtE,UAAM9M,IAAI,GAAG6J,0BAA0B,CAAvC,mBAAA;AACA,UAAMpK,IAAI,GAAG0M,UAAU,CAAvB,IAAuB,CAAvB;AACA,UAAMU,eAAe,GAAG;AACtBjK,QAAAA,IAAI,EAAE,CACJ;AAACjF,UAAAA,MAAM,EAAEyO,MAAM,CAAf,WAAA;AAA6B3I,UAAAA,QAAQ,EAArC,KAAA;AAA8CD,UAAAA,UAAU,EAAE;AAA1D,SADI,EAEJ;AACE7F,UAAAA,MAAM,EADR,gCAAA;AAEE8F,UAAAA,QAAQ,EAFV,KAAA;AAGED,UAAAA,UAAU,EAAE;AAHd,SAFI,EAOJ;AAAC7F,UAAAA,MAAM,EAAEyO,MAAM,CAAf,gBAAA;AAAkC3I,UAAAA,QAAQ,EAA1C,IAAA;AAAkDD,UAAAA,UAAU,EAAE;AAA9D,SAPI,CADgB;AAUtB7G,QAAAA,SAAS,EAAE,KAVW,SAAA;AAWtB8C,QAAAA,IAAAA,EAAAA;AAXsB,OAAxB;AAaA,aAAO,IAAA,sBAAA,CAAP,eAAO,CAAP;AACD;AAED;AACF;AACA;;;;WACSsN,uBAAa,MAAbA,EAAmE;AACxE,UAAM/M,IAAI,GAAG6J,0BAA0B,CAAvC,oBAAA;AACA,UAAMpK,IAAI,GAAG0M,UAAU,CAAA,IAAA,EAAO;AAACnC,QAAAA,QAAQ,EAAEoC,MAAM,CAACpC;AAAlB,OAAP,CAAvB;AAEA,aAAO,IAAA,sBAAA,CAA2B;AAChCpH,QAAAA,IAAI,EAAE,CACJ;AAACjF,UAAAA,MAAM,EAAEyO,MAAM,CAAf,WAAA;AAA6B3I,UAAAA,QAAQ,EAArC,KAAA;AAA8CD,UAAAA,UAAU,EAAE;AAA1D,SADI,EAEJ;AAAC7F,UAAAA,MAAM,EAAEyO,MAAM,CAAf,QAAA;AAA0B3I,UAAAA,QAAQ,EAAlC,KAAA;AAA2CD,UAAAA,UAAU,EAAE;AAAvD,SAFI,EAGJ;AACE7F,UAAAA,MAAM,EADR,gCAAA;AAEE8F,UAAAA,QAAQ,EAFV,KAAA;AAGED,UAAAA,UAAU,EAAE;AAHd,SAHI,EAQJ;AACE7F,UAAAA,MAAM,EADR,kBAAA;AAEE8F,UAAAA,QAAQ,EAFV,KAAA;AAGED,UAAAA,UAAU,EAAE;AAHd,SARI,EAaJ;AAAC7F,UAAAA,MAAM,EAAEyO,MAAM,CAAf,gBAAA;AAAkC3I,UAAAA,QAAQ,EAA1C,IAAA;AAAkDD,UAAAA,UAAU,EAAE;AAA9D,SAbI,CAD0B;AAgBhC7G,QAAAA,SAAS,EAAE,KAhBqB,SAAA;AAiBhC8C,QAAAA,IAAAA,EAAAA;AAjBgC,OAA3B,CAAP;AAmBD;AAED;AACF;AACA;AACA;;;;WACSuN,wBAAc,MAAdA,EAAqE;AAC1E,UAAMhN,IAAI,GAAG6J,0BAA0B,CAAvC,qBAAA;AACA,UAAMpK,IAAI,GAAG0M,UAAU,CAAA,IAAA,EAAO;AAC5BvM,QAAAA,UAAU,EAAExH,QAAQ,CAACgU,MAAM,CAANA,mBAAAA,CAAD,QAACA,EAAD;AADQ,OAAP,CAAvB;AAIA,aAAO,IAAA,sBAAA,CAA2B;AAChCxJ,QAAAA,IAAI,EAAE,CACJ;AAACjF,UAAAA,MAAM,EAAEyO,MAAM,CAAf,WAAA;AAA6B3I,UAAAA,QAAQ,EAArC,KAAA;AAA8CD,UAAAA,UAAU,EAAE;AAA1D,SADI,EAEJ;AAAC7F,UAAAA,MAAM,EAAEyO,MAAM,CAAf,gBAAA;AAAkC3I,UAAAA,QAAQ,EAA1C,IAAA;AAAkDD,UAAAA,UAAU,EAAE;AAA9D,SAFI,CAD0B;AAKhC7G,QAAAA,SAAS,EAAE,KALqB,SAAA;AAMhC8C,QAAAA,IAAAA,EAAAA;AANgC,OAA3B,CAAP;AAQD;AAED;AACF;AACA;;;;WACSwN,kBAAQ,MAARA,EAEmB;AACxB,UAAA,IAAA;AACA,UAAA,IAAA;;AACA,UAAI,gBAAJ,MAAA,EAA4B;AAC1B,YAAMjN,MAAI,GAAG6J,0BAA0B,CAAvC,gBAAA;AACApK,QAAAA,IAAI,GAAG0M,UAAU,CAAA,MAAA,EAAO;AACtBK,UAAAA,IAAI,EAAEpU,QAAQ,CAACgU,MAAM,CAANA,UAAAA,CADO,QACPA,EAAD,CADQ;AAEtBpP,UAAAA,IAAI,EAAEoP,MAAM,CAFU,IAAA;AAGtBnC,UAAAA,KAAK,EAAEmC,MAAM,CAHS,KAAA;AAItBzP,UAAAA,SAAS,EAAEvE,QAAQ,CAACgU,MAAM,CAANA,SAAAA,CAAD,QAACA,EAAD;AAJG,SAAP,CAAjB3M;AAMAmD,QAAAA,IAAI,GAAG,CACL;AAACjF,UAAAA,MAAM,EAAEyO,MAAM,CAAf,aAAA;AAA+B3I,UAAAA,QAAQ,EAAvC,KAAA;AAAgDD,UAAAA,UAAU,EAAE;AAA5D,SADK,EAEL;AAAC7F,UAAAA,MAAM,EAAEyO,MAAM,CAAf,UAAA;AAA4B3I,UAAAA,QAAQ,EAApC,IAAA;AAA4CD,UAAAA,UAAU,EAAE;AAAxD,SAFK,CAAPZ;AARF,OAAA,MAYO;AACL,YAAM5C,MAAI,GAAG6J,0BAA0B,CAAvC,QAAA;AACApK,QAAAA,IAAI,GAAG0M,UAAU,CAAA,MAAA,EAAO;AACtBlC,UAAAA,KAAK,EAAEmC,MAAM,CAACnC;AADQ,SAAP,CAAjBxK;AAGAmD,QAAAA,IAAI,GAAG,CAAC;AAACjF,UAAAA,MAAM,EAAEyO,MAAM,CAAf,aAAA;AAA+B3I,UAAAA,QAAQ,EAAvC,IAAA;AAA+CD,UAAAA,UAAU,EAAE;AAA3D,SAAD,CAAPZ;AACD;;AAED,aAAO,IAAA,sBAAA,CAA2B;AAChCA,QAAAA,IADgC,EAChCA,IADgC;AAEhCjG,QAAAA,SAAS,EAAE,KAFqB,SAAA;AAGhC8C,QAAAA,IAAAA,EAAAA;AAHgC,OAA3B,CAAP;AAKD;;;;;;AA/SU0L,aAAAA,CASJxO,SATIwO,GASmB,IAAA,SAAA,CAAA,kCAAA,CATnBA,C,CCptBb;AACA;AACA;AACA;;AACA,IAAM+B,UAAU,GAAGlO,gBAAgB,GAAnC,GAAA;AAEA;AACA;AACA;;IACO,M;AACL;AACF;AACA;AACEnE,oBAAc;AAAA;AAAE;AAEhB;AACF;AACA;;AAGE;AACF;AACA;AACA;AACA;AACA;;;;;WACSwS,6BAAmB,UAAnBA,EAAgD;AACrD,aACE,MAAI;AACHC,MAAAA,IAAI,CAAJA,IAAAA,CAAUtL,UAAU,GAAGmL,MAAM,CAA7BG,SAAAA,IAAAA,CAAAA,GAAAA;AAFH,OACE,CADF,CAAA;AAAA;AAMD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;2EACeC,kBAAI,UAAJA,EAAI,KAAJA,EAAI,OAAJA,EAAI,SAAJA,EAAI,IAAJA;AAAAA;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,uBAQmB1H,UAAU,CAAVA,iCAAAA,CAC1BpG,IAAI,CAFR,MAC8BoG,CARnB0H;;AAAAA;AAQHC,gBAAAA,aARGD;AAAAA;AAAAA,uBAaiB1H,UAAU,CAAVA,cAAAA,CACxB6H,OAAO,CADiB7H,SAAAA,EAA1B,WAA0BA,CAbjB0H;;AAAAA;AAaHE,gBAAAA,WAbGF;AAkBL/K,gBAAAA,WAlBK+K,GAkBT,IAlBSA;;AAAAA,sBAmBLE,WAAW,KAAf,IAnBSF;AAAAA;AAAAA;AAAAA;;AAAAA,qBAoBHE,WAAW,CAAf,UApBOF;AAAAA;AAAAA;AAAAA;;AAqBL9I,gBAAAA,OAAO,CAAPA,KAAAA,CAAAA,oDAAAA;AArBK8I,kDAsBL,KAtBKA;;AAAAA;AAyBP,oBAAIE,WAAW,CAAXA,IAAAA,CAAAA,MAAAA,KAA4BhO,IAAI,CAApC,MAAA,EAA6C;AAC3C+C,kBAAAA,WAAW,GAAGA,WAAW,IAAI,IAA7BA,WAA6B,EAA7BA;AACAA,kBAAAA,WAAW,CAAXA,GAAAA,CACE,aAAa,CAAb,QAAA,CAAuB;AACrB+H,oBAAAA,aAAa,EAAEmD,OAAO,CADD,SAAA;AAErBzD,oBAAAA,KAAK,EAAExK,IAAI,CAAC4C;AAFS,mBAAvB,CADFG;AAMD;;AAED,oBAAI,CAACiL,WAAW,CAAXA,KAAAA,CAAAA,MAAAA,CAAL,SAAKA,CAAL,EAA0C;AACxCjL,kBAAAA,WAAW,GAAGA,WAAW,IAAI,IAA7BA,WAA6B,EAA7BA;AACAA,kBAAAA,WAAW,CAAXA,GAAAA,CACE,aAAa,CAAb,MAAA,CAAqB;AACnB+H,oBAAAA,aAAa,EAAEmD,OAAO,CADH,SAAA;AAEnB/Q,oBAAAA,SAAAA,EAAAA;AAFmB,mBAArB,CADF6F;AAMD;;AAED,oBAAIiL,WAAW,CAAXA,QAAAA,GAAJ,aAAA,EAA0C;AACxCjL,kBAAAA,WAAW,GAAGA,WAAW,IAAI,IAA7BA,WAA6B,EAA7BA;AACAA,kBAAAA,WAAW,CAAXA,GAAAA,CACE,aAAa,CAAb,QAAA,CAAuB;AACrBsH,oBAAAA,UAAU,EAAE6D,KAAK,CADI,SAAA;AAErBxD,oBAAAA,QAAQ,EAAEuD,OAAO,CAFI,SAAA;AAGrB1D,oBAAAA,QAAQ,EAAEwD,aAAa,GAAGC,WAAW,CAACzD;AAHjB,mBAAvB,CADFxH;AAOD;;AAtDM+K;AAAAA;;AAAAA;AAwDP/K,gBAAAA,WAAW,GAAG,IAAA,WAAA,GAAA,GAAA,CACZ,aAAa,CAAb,aAAA,CAA4B;AAC1BsH,kBAAAA,UAAU,EAAE6D,KAAK,CADS,SAAA;AAE1B5D,kBAAAA,gBAAgB,EAAE2D,OAAO,CAFC,SAAA;AAG1B1D,kBAAAA,QAAQ,EAAEwD,aAAa,GAAbA,CAAAA,GAAAA,aAAAA,GAHgB,CAAA;AAI1BvD,kBAAAA,KAAK,EAAExK,IAAI,CAJe,MAAA;AAK1B9C,kBAAAA,SAAAA,EAAAA;AAL0B,iBAA5B,CADY,CAAd6F;;AAxDO+K;AAAAA,sBAqEL/K,WAAW,KAAf,IArES+K;AAAAA;AAAAA;AAAAA;;AAAAA;AAAAA,uBAsEDK,yBAAyB,CAAA,UAAA,EAAA,WAAA,EAG7B,CAAA,KAAA,EAH6B,OAG7B,CAH6B,EAI7B;AACEC,kBAAAA,UAAU,EAAE;AADd,iBAJ6B,CAtExBN;;AAAAA;AAiFLO,gBAAAA,UAjFKP,GAiFQpO,YAAY,CAAZA,MAAAA,CAQjB,CACAA,YAAY,CAAZA,GAAAA,CADA,aACAA,CADA,EAEAA,YAAY,CAAZA,GAAAA,CAFA,QAEAA,CAFA,EAGAA,YAAY,CAAZA,GAAAA,CAHA,aAGAA,CAHA,EAIAA,YAAY,CAAZA,GAAAA,CAJA,oBAIAA,CAJA,EAKAA,YAAY,CAAZA,GAAAA,CACEA,YAAY,CAAZA,EAAAA,CADFA,MACEA,CADFA,EAEEA,YAAY,CAAZA,MAAAA,CAAoBA,YAAY,CAAhCA,GAAoBA,EAApBA,EAAwC,CAF1CA,CAEEA,CAFFA,EAbF,OAaEA,CALA,CARiBA,CAjFRoO;AAqGLH,gBAAAA,SArGKG,GAqGOJ,MAAM,CAAxB,SArGWI;AAsGPQ,gBAAAA,MAtGOR,GAsGX,CAtGWA;AAuGPS,gBAAAA,KAvGOT,GAuGX,IAvGWA;AAwGPU,gBAAAA,YAxGOV,GAwGX,EAxGWA;;AAAAA;AAAAA,sBAyGJS,KAAK,CAALA,MAAAA,GAAP,CAzGWT;AAAAA;AAAAA;AAAAA;;AA0GHlN,gBAAAA,KA1GGkN,GA0GKS,KAAK,CAALA,KAAAA,CAAAA,CAAAA,EAAd,SAAcA,CA1GLT;AA2GH9N,gBAAAA,KA3GG8N,GA2GIjV,MAAM,CAANA,KAAAA,CAAa8U,SAAS,GAAnC,EAAa9U,CA3GJiV;AA4GTO,gBAAAA,UAAU,CAAVA,MAAAA,CACE;AACErM,kBAAAA,WAAW,EADb,CAAA;AACkB;AAChBsM,kBAAAA,MAFF,EAEEA,MAFF;AAGE1N,kBAAAA,KAAK,EAHP,KAAA;AAIE6N,kBAAAA,WAAW,EAJb,CAAA;AAKEC,kBAAAA,kBAAkB,EAAE;AALtB,iBADFL,EAAAA,KAAAA;AAWMtL,gBAAAA,YAvHG+K,GAuHW,IAAA,WAAA,GAAA,GAAA,CAAsB;AACxC3K,kBAAAA,IAAI,EAAE,CAAC;AAACjF,oBAAAA,MAAM,EAAE+P,OAAO,CAAhB,SAAA;AAA4BjK,oBAAAA,QAAQ,EAApC,IAAA;AAA4CD,oBAAAA,UAAU,EAAE;AAAxD,mBAAD,CADkC;AAExC7G,kBAAAA,SAFwC,EAExCA,SAFwC;AAGxC8C,kBAAAA,IAAAA,EAAAA;AAHwC,iBAAtB,CAvHX8N;AA4HTU,gBAAAA,YAAY,CAAZA,IAAAA,CACEL,yBAAyB,CAAA,UAAA,EAAA,YAAA,EAA0B,CAAA,KAAA,EAA1B,OAA0B,CAA1B,EAA4C;AACnEC,kBAAAA,UAAU,EAAE;AADuD,iBAA5C,CAD3BI,EA5HSV,CAyGc;;AAzGdA,qBAmIL1H,UAAU,CAAVA,YAAAA,CAAAA,QAAAA,CAAJ,YAAIA,CAnIK0H;AAAAA;AAAAA;AAAAA;;AAoIDa,gBAAAA,mBApICb,GAoIP,CApIOA;AAAAA;AAAAA,uBAqIDc,KAAK,CAAC,OAAZ,mBAAW,CArIJd;;AAAAA;AAwITQ,gBAAAA,MAAM,IAANA,SAAAA;AACAC,gBAAAA,KAAK,GAAGA,KAAK,CAALA,KAAAA,CAARA,SAAQA,CAARA;AAzIST;AAAAA;;AAAAA;AAAAA;AAAAA,uBA2ILe,OAAO,CAAPA,GAAAA,CArIY,YAqIZA,CA3IKf;;AAAAA;AA+IHO,gBAAAA,WA/IGP,GA+IUpO,YAAY,CAAZA,MAAAA,CAA2C,CAC5DA,YAAY,CAAZA,GAAAA,CADF,aACEA,CAD4D,CAA3CA,CA/IVoO;AAmJH9N,gBAAAA,MAnJG8N,GAmJIjV,MAAM,CAANA,KAAAA,CAAawV,WAAU,CAApC,IAAaxV,CAnJJiV;;AAoJTO,gBAAAA,WAAU,CAAVA,MAAAA,CACE;AACErM,kBAAAA,WAAW,EADb,CAAA,CAAA;;AAAA,iBADFqM,EAAAA,MAAAA;;AAOMtL,gBAAAA,aA3JG+K,GA2JW,IAAA,WAAA,GAAA,GAAA,CAAsB;AACxC3K,kBAAAA,IAAI,EAAE,CACJ;AAACjF,oBAAAA,MAAM,EAAE+P,OAAO,CAAhB,SAAA;AAA4BjK,oBAAAA,QAAQ,EAApC,IAAA;AAA4CD,oBAAAA,UAAU,EAAE;AAAxD,mBADI,EAEJ;AAAC7F,oBAAAA,MAAM,EAAP,kBAAA;AAA6B8F,oBAAAA,QAAQ,EAArC,KAAA;AAA8CD,oBAAAA,UAAU,EAAE;AAA1D,mBAFI,CADkC;AAKxC7G,kBAAAA,SALwC,EAKxCA,SALwC;AAMxC8C,kBAAAA,IAAAA,EAAAA;AANwC,iBAAtB,CA3JX8N;AAAAA;AAAAA,uBAmKHK,yBAAyB,CAAA,UAAA,EAAA,aAAA,EAG7B,CAAA,KAAA,EAH6B,OAG7B,CAH6B,EAI7B;AACEC,kBAAAA,UAAU,EAAE;AADd,iBAJ6B,CAnKtBN;;AAAAA;AAAAA,kDA8KX,IA9KWA;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;;;;;;AApCFJ,MAAAA,CASJC,SATID,GASgBD,UAThBC;ICjBAoB,qBAAqB,GAAG,IAAA,SAAA,CAA9B,6CAA8B,C;AAIrC;AACA;AACA;;IACO,S;;;;;;;;AACL;AACF;AACA;AACA;AACA;AACA;AACSlB,iCAAmB,UAAnBA,EAAgD;AACrD,aAAOF,MAAM,CAANA,mBAAAA,CAAP,UAAOA,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACSI,cAAI,UAAJA,EAAI,KAAJA,EAAI,OAAJA,EAAI,GAAJA,EAAI,eAAJA,EAMa;AAClB,aAAOJ,MAAM,CAANA,IAAAA,CAAAA,UAAAA,EAAAA,KAAAA,EAAAA,OAAAA,EAAAA,eAAAA,EAAP,GAAOA,CAAP;AACD;;;;;AC/BH;AACA;AACA;;;IACO,wB;AACL;AACF;AACA;AACEtS,sCAAc;AAAA;AAAE;AAEhB;AACF;AACA;;;;;WACS2O,+BAAqB,WAArBA,EAEyB;AAC9B,WAAA,cAAA,CAAoB/H,WAAW,CAA/B,SAAA;AAEA,UAAMgI,qBAAqB,GAAGtK,YAAY,CAAZA,EAAAA,CAA9B,aAA8BA,CAA9B;AACA,UAAMuK,SAAS,GAAGD,qBAAqB,CAArBA,MAAAA,CAA6BhI,WAAW,CAA1D,IAAkBgI,CAAlB;AAEA,UAAA,IAAA;;AACA,2CAA+B3O,MAAM,CAANA,OAAAA,CAA/B,kCAA+BA,CAA/B,wCAEG;AAFE;AAAA,YAAM,MAAN;AAAA,YAAL,MAAK;;AAGH,YAAIkO,MAAM,CAANA,KAAAA,IAAJ,SAAA,EAA+B;AAC7BhJ,UAAAA,IAAI,GAAJA,MAAAA;AACA;AACD;AACF;;AAED,UAAI,CAAJ,IAAA,EAAW;AACT,cAAM,IAAA,KAAA,CAAN,4DAAM,CAAN;AAGD;;AAED,aAAA,IAAA;AACD;AAED;AACF;AACA;;;;WACSwO,4BAAkB,WAAlBA,EAEe;AACpB,WAAA,cAAA,CAAoB/M,WAAW,CAA/B,SAAA;;AACA,0BAA+BmI,UAAU,CACvC8E,kCAAkC,CADK,YAAA,EAEvCjN,WAAW,CAFb,IAAyC,CAAzC;AAAA,UAAM,KAAN,iBAAM,KAAN;AAAA,UAAcgN,aAAd,iBAAcA,aAAd;;AAIA,aAAO;AAACE,QAAAA,KAAD,EAACA,KAAD;AAAQF,QAAAA,aAAAA,EAAAA;AAAR,OAAP;AACD;AAED;AACF;AACA;;;;WACSG,gCAAsB,WAAtBA,EAEmB;AACxB,WAAA,cAAA,CAAoBnN,WAAW,CAA/B,SAAA;;AACA,0BAAgBmI,UAAU,CACxB8E,kCAAkC,CADV,gBAAA,EAExBjN,WAAW,CAFb,IAA0B,CAA1B;AAAA,UAAOpB,KAAP,iBAAOA,KAAP;;AAIA,aAAO;AAACA,QAAAA,KAAAA,EAAAA;AAAD,OAAP;AACD;AAED;AACF;AACA;;;;WACSwO,mCAAyB,WAAzBA,EAEsB;AAC3B,WAAA,cAAA,CAAoBpN,WAAW,CAA/B,SAAA;;AACA,0BAAgBmI,UAAU,CACxB8E,kCAAkC,CADV,mBAAA,EAExBjN,WAAW,CAFb,IAA0B,CAA1B;AAAA,UAAOkN,KAAP,iBAAOA,KAAP;;AAIA,aAAO;AAACA,QAAAA,KAAAA,EAAAA;AAAD,OAAP;AACD;AAED;AACF;AACA;;;;WACSG,mCAAyB,WAAzBA,EAEsB;AAC3B,WAAA,cAAA,CAAoBrN,WAAW,CAA/B,SAAA;;AACA,0BAAwBmI,UAAU,CAChC8E,kCAAkC,CADF,mBAAA,EAEhCjN,WAAW,CAFb,IAAkC,CAAlC;AAAA,UAAOsN,aAAP,iBAAOA,aAAP;;AAIA,aAAO;AAACA,QAAAA,aAAAA,EAAAA;AAAD,OAAP;AACD;AAED;AACF;AACA;;;;WACS7D,wBAAc,SAAdA,EAAqC;AAC1C,UAAI,CAACvO,SAAS,CAATA,MAAAA,CAAiBqS,oBAAoB,CAA1C,SAAKrS,CAAL,EAAuD;AACrD,cAAM,IAAA,KAAA,CAAN,4DAAM,CAAN;AAGD;AACF;;;;;AAGH;AACA;AACA;;AAsDA;AACA;AACA;AACA;;;IACa+R,kCAAkC,GAAG,MAAM,CAAN,MAAA,CAI/C;AACDO,EAAAA,YAAY,EAAE;AACZhO,IAAAA,KAAK,EADO,CAAA;AAEZ+H,IAAAA,MAAM,EAAE7J,YAAY,CAAZA,MAAAA,CAEN,CACAA,YAAY,CAAZA,EAAAA,CADA,aACAA,CADA,EAEAA,YAAY,CAAZA,GAAAA,CAFA,OAEAA,CAFA,EAGAA,YAAY,CAAZA,GAAAA,CALMA,eAKNA,CAHA,CAFMA;AAFI,GADb;AAWD+P,EAAAA,gBAAgB,EAAE;AAChBjO,IAAAA,KAAK,EADW,CAAA;AAEhB+H,IAAAA,MAAM,EAAE7J,YAAY,CAAZA,MAAAA,CAEN,CAACA,YAAY,CAAZA,EAAAA,CAAD,aAACA,CAAD,EAAiCA,YAAY,CAAZA,GAAAA,CAF3BA,OAE2BA,CAAjC,CAFMA;AAFQ,GAXjB;AAiBDgQ,EAAAA,mBAAmB,EAAE;AACnBlO,IAAAA,KAAK,EADc,CAAA;AAEnB+H,IAAAA,MAAM,EAAE7J,YAAY,CAAZA,MAAAA,CAEN,CAACA,YAAY,CAAZA,EAAAA,CAAD,aAACA,CAAD,EAAiCA,YAAY,CAAZA,GAAAA,CAF3BA,OAE2BA,CAAjC,CAFMA;AAFW,GAjBpB;AAuBDiQ,EAAAA,mBAAmB,EAAE;AACnBnO,IAAAA,KAAK,EADc,CAAA;AAEnB+H,IAAAA,MAAM,EAAE7J,YAAY,CAAZA,MAAAA,CAEN,CAACA,YAAY,CAAZA,EAAAA,CAAD,aAACA,CAAD,EAAiCoK,GAAG,CAF9BpK,eAE8B,CAApC,CAFMA;AAFW;AAvBpB,CAJ+C,C;AAmClD;AACA;AACA;;IACO,oB;AACL;AACF;AACA;AACEtE,kCAAc;AAAA;AAAE;AAEhB;AACF;AACA;;;;;WAKSwU,sBAAY,MAAZA,EAAiE;AACtE,UAAMrP,IAAI,GAAG0O,kCAAkC,CAA/C,YAAA;AACA,UAAMjP,IAAI,GAAG0M,UAAU,CAAA,IAAA,EAAvB,MAAuB,CAAvB;AACA,aAAO,IAAA,sBAAA,CAA2B;AAChCvJ,QAAAA,IAAI,EAD4B,EAAA;AAEhCjG,QAAAA,SAAS,EAAE,KAFqB,SAAA;AAGhC8C,QAAAA,IAAAA,EAAAA;AAHgC,OAA3B,CAAP;AAKD;;;WAEM6P,0BAAgB,MAAhBA,EAEmB;AACxB,UAAMtP,IAAI,GAAG0O,kCAAkC,CAA/C,gBAAA;AACA,UAAMjP,IAAI,GAAG0M,UAAU,CAAA,IAAA,EAAvB,MAAuB,CAAvB;AACA,aAAO,IAAA,sBAAA,CAA2B;AAChCvJ,QAAAA,IAAI,EAD4B,EAAA;AAEhCjG,QAAAA,SAAS,EAAE,KAFqB,SAAA;AAGhC8C,QAAAA,IAAAA,EAAAA;AAHgC,OAA3B,CAAP;AAKD;;;WAEM8P,6BAAmB,MAAnBA,EAEmB;AACxB,UAAMvP,IAAI,GAAG0O,kCAAkC,CAA/C,mBAAA;AACA,UAAMjP,IAAI,GAAG0M,UAAU,CAAA,IAAA,EAAvB,MAAuB,CAAvB;AACA,aAAO,IAAA,sBAAA,CAA2B;AAChCvJ,QAAAA,IAAI,EAD4B,EAAA;AAEhCjG,QAAAA,SAAS,EAAE,KAFqB,SAAA;AAGhC8C,QAAAA,IAAAA,EAAAA;AAHgC,OAA3B,CAAP;AAKD;;;WAEM+P,6BAAmB,MAAnBA,EAEmB;AACxB,UAAMxP,IAAI,GAAG0O,kCAAkC,CAA/C,mBAAA;AACA,UAAMjP,IAAI,GAAG0M,UAAU,CAAA,IAAA,EAAO;AAC5B4C,QAAAA,aAAa,EAAEzC,MAAM,CAACF,MAAM,CAAP,aAAA;AADO,OAAP,CAAvB;AAGA,aAAO,IAAA,sBAAA,CAA2B;AAChCxJ,QAAAA,IAAI,EAD4B,EAAA;AAEhCjG,QAAAA,SAAS,EAAE,KAFqB,SAAA;AAGhC8C,QAAAA,IAAAA,EAAAA;AAHgC,OAA3B,CAAP;AAKD;;;;;;AA3DUuP,oBAAAA,CASJrS,SATIqS,GASmB,IAAA,SAAA,CAAA,6CAAA,CATnBA;ACzNb,IAAI,WAAW,GAAG,MAAM,CAAC,SAAP,CAAiB,QAAnC;;AACA,IAAI,OAAO,GAAG,MAAM,CAAC,IAAP,IAAe,UAAS,GAAT,EAAc;AACzC,MAAI,IAAI,GAAG,EAAX;;AACA,OAAK,IAAI,IAAT,IAAiB,GAAjB,EAAsB;AACrB,IAAA,IAAI,CAAC,IAAL,CAAU,IAAV;AACA;;AACD,SAAO,IAAP;AACA,CANF;;AAQA,SAAS,SAAT,CAAmB,GAAnB,EAAwB,WAAxB,EAAqC;AACpC,MAAI,CAAJ,EAAO,GAAP,EAAY,GAAZ,EAAiB,IAAjB,EAAuB,GAAvB,EAA4B,OAA5B,EAAqC,KAArC;;AACA,MAAI,GAAG,KAAK,IAAZ,EAAkB;AACjB,WAAO,MAAP;AACA;;AACD,MAAI,GAAG,KAAK,KAAZ,EAAmB;AAClB,WAAO,OAAP;AACA;;AACD,UAAQ,OAAO,GAAf;AACC,SAAK,QAAL;AACC,UAAI,GAAG,KAAK,IAAZ,EAAkB;AACjB,eAAO,IAAP;AACA,OAFD,MAEO,IAAI,GAAG,CAAC,MAAJ,IAAc,OAAO,GAAG,CAAC,MAAX,KAAsB,UAAxC,EAAoD;AAC1D,eAAO,SAAS,CAAC,GAAG,CAAC,MAAJ,EAAD,EAAe,WAAf,CAAhB;AACA,OAFM,MAEA;AACN,QAAA,KAAK,GAAG,WAAW,CAAC,IAAZ,CAAiB,GAAjB,CAAR;;AACA,YAAI,KAAK,KAAK,gBAAd,EAAgC;AAC/B,UAAA,GAAG,GAAG,GAAN;AACA,UAAA,GAAG,GAAG,GAAG,CAAC,MAAJ,GAAa,CAAnB;;AACA,eAAI,CAAC,GAAG,CAAR,EAAW,CAAC,GAAG,GAAf,EAAoB,CAAC,EAArB,EAAyB;AACxB,YAAA,GAAG,IAAI,SAAS,CAAC,GAAG,CAAC,CAAD,CAAJ,EAAS,IAAT,CAAT,GAA0B,GAAjC;AACA;;AACD,cAAI,GAAG,GAAG,CAAC,CAAX,EAAc;AACb,YAAA,GAAG,IAAI,SAAS,CAAC,GAAG,CAAC,CAAD,CAAJ,EAAS,IAAT,CAAhB;AACA;;AACD,iBAAO,GAAG,GAAG,GAAb;AACA,SAVD,MAUO,IAAI,KAAK,KAAK,iBAAd,EAAiC;AAC5C;AACK,UAAA,IAAI,GAAG,OAAO,CAAC,GAAD,CAAP,CAAa,IAAb,EAAP;AACA,UAAA,GAAG,GAAG,IAAI,CAAC,MAAX;AACA,UAAA,GAAG,GAAG,EAAN;AACA,UAAA,CAAC,GAAG,CAAJ;;AACA,iBAAO,CAAC,GAAG,GAAX,EAAgB;AACf,YAAA,GAAG,GAAG,IAAI,CAAC,CAAD,CAAV;AACA,YAAA,OAAO,GAAG,SAAS,CAAC,GAAG,CAAC,GAAD,CAAJ,EAAW,KAAX,CAAnB;;AACA,gBAAI,OAAO,KAAK,SAAhB,EAA2B;AAC1B,kBAAI,GAAJ,EAAS;AACR,gBAAA,GAAG,IAAI,GAAP;AACA;;AACD,cAAA,GAAG,IAAI,IAAI,CAAC,SAAL,CAAe,GAAf,IAAsB,GAAtB,GAA4B,OAAnC;AACA;;AACD,YAAA,CAAC;AACD;;AACD,iBAAO,MAAM,GAAN,GAAY,GAAnB;AACA,SAlBM,MAkBA;AACN,iBAAO,IAAI,CAAC,SAAL,CAAe,GAAf,CAAP;AACA;AACD;;AACF,SAAK,UAAL;AACA,SAAK,WAAL;AACC,aAAO,WAAW,GAAG,IAAH,GAAU,SAA5B;;AACD,SAAK,QAAL;AACC,aAAO,IAAI,CAAC,SAAL,CAAe,GAAf,CAAP;;AACD;AACC,aAAO,QAAQ,CAAC,GAAD,CAAR,GAAgB,GAAhB,GAAsB,IAA7B;AA9CF;AAgDA;;IAED,mBAAc,GAAG,SAAjB,mBAAiB,CAAS,GAAT,EAAc;AAC9B,MAAI,SAAS,GAAG,SAAS,CAAC,GAAD,EAAM,KAAN,CAAzB;;AACA,MAAI,SAAS,KAAK,SAAlB,EAA6B;AAC5B,WAAO,KAAI,SAAX;AACA;AACD,C;;;ACxED,IAAMS,sBAAsB,GAA5B,EAAA,C,CAAA;;AAGA,SAAA,aAAA,CAAA,CAAA,EAAkC;AAChC,MAAIC,aAAa,GAAjB,CAAA;;AACA,SAAOC,CAAC,GAAR,CAAA,EAAc;AACZA,IAAAA,CAAC,IAADA,CAAAA;AACAD,IAAAA,aAAa;AACd;;AACD,SAAA,aAAA;AACD,C,CAAA;;;AAGD,SAAA,cAAA,CAAA,CAAA,EAAmC;AACjC,MAAIC,CAAC,KAAL,CAAA,EAAa,OAAA,CAAA;AACbA,EAAAA,CAAC;AACDA,EAAAA,CAAC,IAAIA,CAAC,IAANA,CAAAA;AACAA,EAAAA,CAAC,IAAIA,CAAC,IAANA,CAAAA;AACAA,EAAAA,CAAC,IAAIA,CAAC,IAANA,CAAAA;AACAA,EAAAA,CAAC,IAAIA,CAAC,IAANA,CAAAA;AACAA,EAAAA,CAAC,IAAIA,CAAC,IAANA,EAAAA;AACAA,EAAAA,CAAC,IAAIA,CAAC,IAANA,EAAAA;AACA,SAAOA,CAAC,GAAR,CAAA;AACD;AAED;AACA;AACA;AACA;AACA;;;IACO,a;AACL;;AAEA;;AAEA;;AAEA;;AAEA;AAGA9U,yBAAW,aAAXA,EAAW,wBAAXA,EAAW,MAAXA,EAAW,gBAAXA,EAAW,eAAXA,EAME;AAAA;;AAAA,SAhBK+U,aAgBL,GAAA,KAAA,CAAA;AAAA,SAdKC,wBAcL,GAAA,KAAA,CAAA;AAAA,SAZKC,MAYL,GAAA,KAAA,CAAA;AAAA,SAVKC,gBAUL,GAAA,KAAA,CAAA;AAAA,SARKC,eAQL,GAAA,KAAA,CAAA;AACA,SAAA,aAAA,GAAA,aAAA;AACA,SAAA,wBAAA,GAAA,wBAAA;AACA,SAAA,MAAA,GAAA,MAAA;AACA,SAAA,gBAAA,GAAA,gBAAA;AACA,SAAA,eAAA,GAAA,eAAA;AACD;;;;WAEDC,kBAAQ,IAARA,EAA+B;AAC7B,aAAO,KAAA,oBAAA,CAAA,IAAA,EAAP,CAAO,CAAP;AACD;;;WAEDC,8BAAoB,IAApBA,EAAqD;AACnD,UAAIC,IAAI,GAAG,KAAX,eAAA,EAAiC;AAC/B,YAAMC,KAAK,GACTV,aAAa,CAACW,cAAc,CAACF,IAAI,GAAJA,sBAAAA,GAA7BT,CAA4B,CAAf,CAAbA,GACAA,aAAa,CADbA,sBACa,CADbA,GADF,CAAA;AAKA,YAAMY,QAAQ,GAAG,KAAA,eAAA,CAAjB,KAAiB,CAAjB;AACA,YAAMC,SAAS,GAAGJ,IAAI,IAAIG,QAAQ,GAAlC,sBAAsB,CAAtB;AACA,eAAO,CAAA,KAAA,EAAP,SAAO,CAAP;AARF,OAAA,MASO;AACL,YAAME,eAAe,GAAGL,IAAI,GAAG,KAA/B,eAAA;AACA,YAAMM,gBAAgB,GAAGnD,IAAI,CAAJA,KAAAA,CAAWkD,eAAe,GAAG,KAAtD,aAAyBlD,CAAzB;;AACA,YAAM8C,MAAK,GAAG,KAAA,gBAAA,GAAd,gBAAA;;AACA,YAAMG,UAAS,GAAGC,eAAe,GAAG,KAApC,aAAA;;AACA,eAAO,CAAA,MAAA,EAAP,UAAO,CAAP;AACD;AACF;;;WAEDE,6BAAmB,KAAnBA,EAA2C;AACzC,UAAIN,KAAK,IAAI,KAAb,gBAAA,EAAoC;AAClC,eAAO,CAAC9C,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAAA,KAAAA,IAAD,CAAA,IAAP,sBAAA;AADF,OAAA,MAEO;AACL,eACE,CAAC8C,KAAK,GAAG,KAAT,gBAAA,IAAkC,KAAlC,aAAA,GACA,KAFF,eAAA;AAID;AACF;;;WAEDO,4BAAkB,KAAlBA,EAA0C;AACxC,aAAO,KAAA,mBAAA,CAAA,KAAA,IAAkC,KAAA,eAAA,CAAlC,KAAkC,CAAlC,GAAP,CAAA;AACD;;;WAEDC,yBAAe,KAAfA,EAA+B;AAC7B,UAAIR,KAAK,GAAG,KAAZ,gBAAA,EAAmC;AACjC,eAAO9C,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAY8C,KAAK,GAAGV,aAAa,CAAxC,sBAAwC,CAAjCpC,CAAP;AADF,OAAA,MAEO;AACL,eAAO,KAAP,aAAA;AACD;AACF;;;;;;ICpGI,oB;;;;;AAGLzS,gCAAW,OAAXA,EAAW,IAAXA,EAA8C;AAAA;;AAAA;;AAC5C,gCAAA,OAAA;AAD4C,WAF9CgW,IAE8C,GAAA,KAAA,CAAA;AAG5C,WAAA,IAAA,GAAA,IAAA;AAH4C;AAI7C;;;iCAPI,K;;ACGP,IAAA,SAAA,GAAeC,UAAU,CAAzB,KAAA,C,CCHA;AACA;;AAEA;AACA;AACA;;AACO,IAAMC,oBAAoB,GAA1B,GAAA;AAEP;AACA;AACA;;AACO,IAAMC,sBAAsB,GAA5B,EAAA;AAEP;AACA;AACA;;AACO,IAAMC,oBAAoB,GAC/BF,oBAAoB,GADf,sBAAA;AAGP;AACA;AACA;;AACO,IAAMG,WAAW,GAAG,OAApB,oBAAA;;ICtBA,0C;;;;;AAGLrW,sDAAW,SAAXA,EAA+B;AAAA;;AAAA;;AAC7B,oDAAA,SAAA;AAD6B,WAF/B8I,SAE+B,GAAA,KAAA,CAAA;AAE7B,WAAA,SAAA,GAAA,SAAA;AAF6B;AAG9B;;;iCANI,K;;AASP7I,MAAM,CAANA,cAAAA,CACEqW,0CAA0C,CAD5CrW,SAAAA,EAAAA,MAAAA,EAGE;AACEW,EAAAA,KAAK,EAAE;AADT,CAHFX;;IAQO,8B;;;;;AAGLD,0CAAW,SAAXA,EAAW,cAAXA,EAAuD;AAAA;;AAAA;;AACrD,gCACG,2CAAmCuW,cAAc,CAAdA,OAAAA,CAApC,CAAoCA,CAAnC,wBAAD,qDAAC,aADH,SACG,6CADH;AADqD,WAFvDzN,SAEuD,GAAA,KAAA,CAAA;AAQrD,WAAA,SAAA,GAAA,SAAA;AARqD;AAStD;;;iCAZI,K;;AAeP7I,MAAM,CAANA,cAAAA,CAAsBuW,8BAA8B,CAApDvW,SAAAA,EAAAA,MAAAA,EAAwE;AACtEW,EAAAA,KAAK,EAAE;AAD+D,CAAxEX;;AChCO,SAAA,gBAAA,CAAA,QAAA,EAA4C;AACjD,MAAIwW,GAAG,GAAG,IAAA,GAAA,CAAV,QAAU,CAAV;AACA,MAAMC,QAAQ,GAAGD,GAAG,CAAHA,QAAAA,KAAjB,QAAA;AAEAA,EAAAA,GAAG,CAAHA,QAAAA,GAAeC,QAAQ,GAAA,MAAA,GAAvBD,KAAAA;AACAA,EAAAA,GAAG,CAAHA,IAAAA,GALiD,EAKjDA,CALiD,CAAA;AAQjD;AACA;AACA;AACA;AACA;;AACA,MAAIA,GAAG,CAAHA,IAAAA,KAAJ,EAAA,EAAqB;AACnBA,IAAAA,GAAG,CAAHA,IAAAA,GAAWE,MAAM,CAACC,MAAM,CAACH,GAAG,CAAVG,IAAM,CAANA,GAAlBH,CAAiB,CAAjBA;AACD;;AACD,SAAOA,GAAG,CAAV,QAAOA,EAAP;AACD;;ACgCD,IAAMI,mBAAmB,GAAGC,MAAM,CAChCC,QAAQ,CADwB,SACxB,CADwB,EAEhCC,MAFgC,EAAA,EAGhCpW,UAAAA,KAAK;AAAA,SAAI,IAAA,SAAA,CAHX,KAGW,CAAJ;AAAA,CAH2B,CAAlC;AAMA,IAAMqW,oBAAoB,GAAGC,KAAK,CAAC,CAACF,MAAD,EAAA,EAAWG,OAAO,CAArD,QAAqD,CAAlB,CAAD,CAAlC;AAEA,IAAMC,wBAAwB,GAAGN,MAAM,CACrCC,QAAQ,CAD6B,MAC7B,CAD6B,EAAA,oBAAA,EAGrCnW,UAAAA,KAAK;AAAA,SAAInD,MAAM,CAANA,IAAAA,CAAYmD,KAAK,CAAjBnD,CAAiB,CAAjBA,EAHX,QAGWA,CAAJ;AAAA,CAHgC,CAAvC;AAMA;AACA;AACA;AACA;;AACa4Z,IAAAA,0BAA0B,GAAG,KAAnC,IAAMA;AAEb;AACA;AACA;AACA;AACA;AACA;;AAiOA;AACA;AACA;;AACA,SAAA,eAAA,CAAA,MAAA,EAAqD;AACnD,SAAOC,KAAK,CAAC,CACXC,IAAI,CAAC;AACHC,IAAAA,OAAO,EAAEL,OAAO,CADb,KACa,CADb;AAEHM,IAAAA,EAAE,EAAET,MAFD,EAAA;AAGHU,IAAAA,MAAAA,EAAAA;AAHG,GAAD,CADO,EAMXH,IAAI,CAAC;AACHC,IAAAA,OAAO,EAAEL,OAAO,CADb,KACa,CADb;AAEHM,IAAAA,EAAE,EAAET,MAFD,EAAA;AAGHW,IAAAA,KAAK,EAAEJ,IAAI,CAAC;AACVK,MAAAA,IAAI,EAAEC,OADI,EAAA;AAEVtP,MAAAA,OAAO,EAAEyO,MAFC,EAAA;AAGVpS,MAAAA,IAAI,EAAEkT,QAAQ,CAACC,GAAD,EAAA;AAHJ,KAAD;AAHR,GAAD,CANO,CAAD,CAAZ;AAgBD;;AAED,IAAMC,gBAAgB,GAAGC,eAAe,CAACJ,OAAzC,EAAwC,CAAxC;AAEA;AACA;AACA;;AACA,SAAA,aAAA,CAAA,MAAA,EAAmD;AACjD,SAAOf,MAAM,CAACmB,eAAe,CAAhB,MAAgB,CAAhB,EAAA,gBAAA,EAA4CrX,UAAAA,KAAK,EAAI;AAChE,QAAI,WAAJ,KAAA,EAAsB;AACpB,aAAA,KAAA;AADF,KAAA,MAEO;AACL,6CAAO,KAAP;AAEE8W,QAAAA,MAAM,EAAEQ,MAAM,CAACtX,KAAK,CAAN,MAAA,EAAA,MAAA;AAFhB;AAID;AARH,GAAa,CAAb;AAUD;AAED;AACA;AACA;;;AACA,SAAA,uBAAA,CAAA,KAAA,EAA4D;AAC1D,SAAOuX,aAAa,CAClBZ,IAAI,CAAC;AACHa,IAAAA,OAAO,EAAEb,IAAI,CAAC;AACZjC,MAAAA,IAAI,EAAE+C,MAAM;AADA,KAAD,CADV;AAIHzX,IAAAA,KAAAA,EAAAA;AAJG,GAAD,CADc,CAApB;AAQD;AAED;AACA;AACA;;;AACA,SAAA,4BAAA,CAAA,KAAA,EAAiE;AAC/D,SAAO2W,IAAI,CAAC;AACVa,IAAAA,OAAO,EAAEb,IAAI,CAAC;AACZjC,MAAAA,IAAI,EAAE+C,MAAM;AADA,KAAD,CADH;AAIVzX,IAAAA,KAAAA,EAAAA;AAJU,GAAD,CAAX;AAMD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAmHA,IAAM0X,0BAA0B,GAAGf,IAAI,CAAC;AACtCgB,EAAAA,UAAU,EAAEF,MAD0B,EAAA;AAEtCG,EAAAA,cAAc,EAAEH,MAFsB,EAAA;AAGtCI,EAAAA,OAAO,EAAEJ,MAH6B,EAAA;AAItCK,EAAAA,KAAK,EAAEL,MAJ+B,EAAA;AAKtCM,EAAAA,QAAQ,EAAEN,MAAM;AALsB,CAAD,CAAvC;AAQA;AACA;AACA;;AAYA;AACA;AACA;;AACA,IAAMO,wBAAwB,GAAGT,aAAa,CAC5ChF,KAAK,CACH0F,QAAQ,CACNtB,IAAI,CAAC;AACHhC,EAAAA,KAAK,EAAE8C,MADJ,EAAA;AAEHS,EAAAA,aAAa,EAAET,MAFZ,EAAA;AAGHU,EAAAA,MAAM,EAAEV,MAHL,EAAA;AAIHW,EAAAA,WAAW,EAAEX,MAAM;AAJhB,CAAD,CADE,CADL,CADuC,CAA9C;AAaA;AACA;AACA;;AAUA,IAAMY,kBAAkB,GAAG1B,IAAI,CAAC;AAC9BhC,EAAAA,KAAK,EAAE8C,MADuB,EAAA;AAE9B3C,EAAAA,SAAS,EAAE2C,MAFmB,EAAA;AAG9Ba,EAAAA,YAAY,EAAEb,MAHgB,EAAA;AAI9Bc,EAAAA,YAAY,EAAEd,MAJgB,EAAA;AAK9Be,EAAAA,WAAW,EAAEtB,QAAQ,CAACO,MALQ,EAKT,CALS;AAM9BgB,EAAAA,gBAAgB,EAAEvB,QAAQ,CAACO,MAAD,EAAA;AANI,CAAD,CAA/B;AASA,IAAMiB,sBAAsB,GAAG/B,IAAI,CAAC;AAClCxC,EAAAA,aAAa,EAAEsD,MADmB,EAAA;AAElCrD,EAAAA,wBAAwB,EAAEqD,MAFQ,EAAA;AAGlCpD,EAAAA,MAAM,EAAEsE,OAH0B,EAAA;AAIlCrE,EAAAA,gBAAgB,EAAEmD,MAJgB,EAAA;AAKlClD,EAAAA,eAAe,EAAEkD,MAAM;AALW,CAAD,CAAnC;AAQA;AACA;AACA;AACA;;AAKA,IAAMmB,uBAAuB,GAAGC,MAAM,CAACzC,MAAD,EAAA,EAAW7D,KAAK,CAACkF,MAAvD,EAAsD,CAAhB,CAAtC;AAEA;AACA;AACA;;AACA,IAAMqB,sBAAsB,GAAGb,QAAQ,CAACvB,KAAK,CAAC,CAACC,IAAI,CAAL,EAAK,CAAL,EAAWP,MAAzD,EAA8C,CAAD,CAAN,CAAvC;AAEA;AACA;AACA;;AACA,IAAM2C,qBAAqB,GAAGpC,IAAI,CAAC;AACjC5U,EAAAA,GAAG,EAAE+W;AAD4B,CAAD,CAAlC;AAIA;AACA;AACA;;AACA,IAAME,uBAAuB,GAAGzC,OAAO,CAAvC,mBAAuC,CAAvC;AAEA;AACA;AACA;;AAOA,IAAM0C,aAAa,GAAGtC,IAAI,CAAC;AACzB,iBAAeP,MADU,EAAA;AAEzB,iBAAec,QAAQ,CAACO,MAAD,EAAA;AAFE,CAAD,CAA1B;AAyBA,IAAMyB,kCAAkC,GAAGC,uBAAuB,CAChExC,IAAI,CAAC;AACH5U,EAAAA,GAAG,EAAEkW,QAAQ,CAACvB,KAAK,CAAC,CAACC,IAAI,CAAL,EAAK,CAAL,EAAWP,MAD5B,EACiB,CAAD,CAAN,CADV;AAEHhB,EAAAA,IAAI,EAAE6C,QAAQ,CAAC1F,KAAK,CAAC6D,MAFlB,EAEiB,CAAN,CAFX;AAGHhQ,EAAAA,QAAQ,EAAE8Q,QAAQ,CAChBe,QAAQ,CACN1F,KAAK,CACH0F,QAAQ,CACNtB,IAAI,CAAC;AACHyC,IAAAA,UAAU,EAAET,OADT,EAAA;AAEHU,IAAAA,KAAK,EAAEjD,MAFJ,EAAA;AAGH7H,IAAAA,QAAQ,EAAEkJ,MAHP,EAAA;AAIHzT,IAAAA,IAAI,EAAEuO,KAAK,CAAC6D,MAJT,EAIQ,CAJR;AAKHkD,IAAAA,SAAS,EAAEpC,QAAQ,CAACO,MAAD,EAAA;AALhB,GAAD,CADE,CADL,CADC,CADQ,CAHf;AAkBH8B,EAAAA,aAAa,EAAErC,QAAQ,CAACO,MAAD,EAAA;AAlBpB,CAAD,CAD4D,CAAlE;AAuTA;AACA;AACA;;AACA,IAAM+B,6BAA6B,GAAGL,uBAAuB,CAC3DxC,IAAI,CAAC;AACH8C,EAAAA,UAAU,EAAEZ,MAAM,CAACzC,MAAD,EAAA,EAAW7D,KAAK,CAACkF,MADhC,EAC+B,CAAhB,CADf;AAEHiC,EAAAA,KAAK,EAAE/C,IAAI,CAAC;AACVgD,IAAAA,SAAS,EAAElC,MADD,EAAA;AAEVmC,IAAAA,QAAQ,EAAEnC,MAAM;AAFN,GAAD;AAFR,CAAD,CADuD,CAA7D;AAUA;AACA;AACA;;AAYA,SAAA,eAAA,CAAA,GAAA,EAAA,QAAA,EAAA,WAAA,EAAA,WAAA,EAAA,eAAA,EAAA,uBAAA,EAOa;AACX,MAAMoC,KAAK,GAAGC,WAAW,GAAA,WAAA,GAAzB,SAAA;AAMA,MAAA,mBAAA;;AAEA,MAAA,eAAA,EAAqB;AACnBC,IAAAA,mBAAmB;AAAA,2EAAG,kBAAA,IAAA,EAAA,IAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACY,IAAA,OAAA,CAC9B,UAAA,OAAA,EAAA,MAAA,EAAqB;AACnB,sBAAI;AACFE,oBAAAA,eAAe,CAAA,IAAA,EAAA,IAAA,EAAa,UAAA,YAAA,EAAA,YAAA;AAAA,6BAC1BtN,OAAO,CAAC,CAAA,YAAA,EADVsN,YACU,CAAD,CADmB;AAAA,qBAAb,CAAfA;AADF,mBAAA,CAIE,OAAA,KAAA,EAAc;AACdC,oBAAAA,MAAM,CAANA,KAAM,CAANA;AACD;AARL,iBAAgC,CADZ;;AAAA;AACdF,gBAAAA,iBADc;AAAA;AAAA,uBAYPH,KAAK,MAALA,4BAAb,iBAAaA,EAZO;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA;AAAA;AAAA;AAAA,OAAnBE;AAcD;;AAED,MAAMI,aAAa,GAAG,IAAA,SAAA;AAAA,yEAAc,kBAAA,OAAA,EAAA,QAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC5BC,cAAAA,KAD4B,GAClC,SADkC;AAE5B/N,cAAAA,OAF4B,GAElB;AACdgO,gBAAAA,MAAM,EADQ,MAAA;AAEdC,gBAAAA,IAAI,EAFU,OAAA;AAGdF,gBAAAA,KAHc,EAGdA,KAHc;AAIdG,gBAAAA,OAAO,EAAE,MAAM,CAAN,MAAA,CACP;AACE,kCAAgB;AADlB,iBADO,EAIPC,WAAW,IAJJ,EAAA;AAJK,eAFkB;AAAA;AAe5BC,cAAAA,yBAf4B,GAehC,CAfgC;AAiB5BC,cAAAA,QAjB4B,GAiBhC,GAjBgC;;AAAA;AAAA,mBAmB9B,mBAnB8B;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAoBhBX,mBAAmB,CAAA,GAAA,EAA/BY,OAA+B,CApBH;;AAAA;AAoB5BA,cAAAA,GApB4B;AAAA;AAAA;;AAAA;AAAA;AAAA,qBAsBhBd,KAAK,CAAA,GAAA,EAAjBc,OAAiB,CAtBW;;AAAA;AAsB5BA,cAAAA,GAtB4B;;AAAA;AAAA,oBAyB1BA,GAAG,CAAHA,MAAAA,KAAe;AAAI;AAzBO;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,oBA4B1BC,uBAAuB,KAA3B,IA5B8B;AAAA;AAAA;AAAA;;AAAA;;AAAA;AA+B9BH,cAAAA,yBAAyB,IAAzBA,CAAAA;;AA/B8B,oBAgC1BA,yBAAyB,KAA7B,CAhC8B;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAmC9BzR,cAAAA,OAAO,CAAPA,GAAAA,iCAC2B2R,GAAG,CAAClO,MAD/BzD,cACyC2R,GAAG,CAACE,UAD7C7R,+BAAAA,QAAAA;AAnC8B;AAAA,qBAsCxB4J,KAAK,CAAX,QAAW,CAtCmB;;AAAA;AAuC9B8H,cAAAA,QAAQ,IAARA,CAAAA;;AAvC8B;AAAA;AAAA;;AAAA;AAAA;AAAA,qBA0CbC,GAAG,CAAtB,IAAmBA,EA1Ca;;AAAA;AA0C1BG,cAAAA,IA1C0B;;AA2ChC,kBAAIH,GAAG,CAAP,EAAA,EAAY;AACVI,gBAAAA,QAAQ,CAAA,IAAA,EAARA,IAAQ,CAARA;AADF,eAAA,MAEO;AACLA,gBAAAA,QAAQ,CAAC,IAAA,KAAA,WAAaJ,GAAG,CAAClO,MAAjB,cAA2BkO,GAAG,CAACE,UAA/B,eAATE,IAAS,EAAD,CAARA;AACD;;AA/C+B;AAAA;;AAAA;AAAA;AAAA;AAiDhC,kBAAIhZ,wBAAJ,KAAA,EAA0BgZ,QAAAA,cAAAA;;AAjDM;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAd;;AAAA;AAAA;AAAA;AAAA,OAAtB,EAAsB,CAAtB;AAuDA,SAAA,aAAA;AACD;;AAED,SAAA,gBAAA,CAAA,MAAA,EAAyD;AACvD,SAAO,UAAA,MAAA,EAAA,IAAA,EAAkB;AACvB,WAAO,IAAA,OAAA,CAAY,UAAA,OAAA,EAAA,MAAA,EAAqB;AACtCC,MAAAA,MAAM,CAANA,OAAAA,CAAAA,MAAAA,EAAAA,IAAAA,EAA6B,UAAA,GAAA,EAAA,QAAA,EAA6B;AACxD,YAAA,GAAA,EAAS;AACPd,UAAAA,MAAM,CAANA,GAAM,CAANA;AACA;AACD;;AACDvN,QAAAA,OAAO,CAAPA,QAAO,CAAPA;AALFqO,OAAAA;AADF,KAAO,CAAP;AADF,GAAA;AAWD;;AAED,SAAA,qBAAA,CAAA,MAAA,EAAmE;AACjE,SAAQC,UAAAA,QAAD,EAA2B;AAChC,WAAO,IAAA,OAAA,CAAY,UAAA,OAAA,EAAA,MAAA,EAAqB;AACtC;AACA,UAAIA,QAAQ,CAARA,MAAAA,KAAJ,CAAA,EAA2BtO,OAAO,CAAPA,EAAO,CAAPA;AAE3B,UAAMuO,KAAK,GAAG,QAAQ,CAAR,GAAA,CAAcvK,UAAAA,MAAD,EAAuB;AAChD,eAAOqK,MAAM,CAANA,OAAAA,CAAerK,MAAM,CAArBqK,UAAAA,EAAkCrK,MAAM,CAA/C,IAAOqK,CAAP;AADF,OAAc,CAAd;AAIAA,MAAAA,MAAM,CAANA,OAAAA,CAAAA,KAAAA,EAAsB,UAAA,GAAA,EAAA,QAAA,EAA6B;AACjD,YAAA,GAAA,EAAS;AACPd,UAAAA,MAAM,CAANA,GAAM,CAANA;AACA;AACD;;AACDvN,QAAAA,OAAO,CAAPA,QAAO,CAAPA;AALFqO,OAAAA;AARF,KAAO,CAAP;AADF,GAAA;AAkBD;AAED;AACA;AACA;;;AACA,IAAMG,6BAA6B,GAAG5D,aAAa,CAAnD,0BAAmD,CAAnD;AAEA;AACA;AACA;;AACA,IAAM6D,qBAAqB,GAAG7D,aAAa,CAA3C,kBAA2C,CAA3C;AAEA;AACA;AACA;;AACA,IAAM8D,yBAAyB,GAAG9D,aAAa,CAA/C,sBAA+C,CAA/C;AAEA;AACA;AACA;;AACA,IAAM+D,0BAA0B,GAAG/D,aAAa,CAAhD,uBAAgD,CAAhD;AAEA;AACA;AACA;;AACA,IAAMgE,aAAa,GAAGhE,aAAa,CAACE,MAApC,EAAmC,CAAnC;AAEA;AACA;AACA;;AAYA;AACA;AACA;;AACA,IAAM+D,kBAAkB,GAAGrC,uBAAuB,CAChDxC,IAAI,CAAC;AACH8E,EAAAA,KAAK,EAAEhE,MADJ,EAAA;AAEHiE,EAAAA,WAAW,EAAEjE,MAFV,EAAA;AAGHkE,EAAAA,cAAc,EAAElE,MAHb,EAAA;AAIHmE,EAAAA,sBAAsB,EAAErJ,KAAK,CAAA,mBAAA;AAJ1B,CAAD,CAD4C,CAAlD;AASA;AACA;AACA;AACA;;AAYA;AACA;AACA;;AACA,IAAMsJ,iBAAiB,GAAGlF,IAAI,CAAC;AAC7BwB,EAAAA,MAAM,EAAE/B,MADqB,EAAA;AAE7B0F,EAAAA,QAAQ,EAAE7D,QAAQ,CAACR,MAFU,EAEX,CAFW;AAG7BsE,EAAAA,QAAQ,EAAEtE,MAHmB,EAAA;AAI7BuE,EAAAA,cAAc,EAAE9E,QAAQ,CAACd,MAAD,EAAA;AAJK,CAAD,CAA9B;AAOA;AACA;AACA;;AAcA;AACA;AACA;;AACA,IAAM6F,6BAA6B,GAAG9C,uBAAuB,CAC3D5G,KAAK,CACHoE,IAAI,CAAC;AACH7U,EAAAA,OAAO,EADJ,mBAAA;AAEHqW,EAAAA,MAAM,EAAE/B,MAFL,EAAA;AAGH0F,EAAAA,QAAQ,EAAE7D,QAAQ,CAACR,MAHhB,EAGe,CAHf;AAIHsE,EAAAA,QAAQ,EAAEtE,MAJP,EAAA;AAKHuE,EAAAA,cAAc,EAAE9E,QAAQ,CAACd,MAAD,EAAA;AALrB,CAAD,CADD,CADsD,CAA7D;AAYA;AACA;AACA;;AACA,IAAM8F,uBAAuB,GAAG/C,uBAAuB,CACrD5G,KAAK,CACHoE,IAAI,CAAC;AACHzU,EAAAA,MAAM,EADH,mBAAA;AAEHmD,EAAAA,OAAO,EAAEsR,IAAI,CAAC;AACZyC,IAAAA,UAAU,EAAET,OADA,EAAA;AAEZU,IAAAA,KAAK,EAFO,mBAAA;AAGZ9K,IAAAA,QAAQ,EAAEkJ,MAHE,EAAA;AAIZzT,IAAAA,IAAI,EAJQ,wBAAA;AAKZsV,IAAAA,SAAS,EAAE7B,MAAM;AALL,GAAD;AAFV,CAAD,CADD,CADgD,CAAvD;AAeA,IAAM0E,uBAAuB,GAAGxF,IAAI,CAAC;AACnC1E,EAAAA,OAAO,EAAEmE,MAD0B,EAAA;AAEnCgG,EAAAA,MAAM,EAAEnF,OAF2B,EAAA;AAGnCzI,EAAAA,KAAK,EAAEiJ,MAAM;AAHsB,CAAD,CAApC;AAMA;AACA;AACA;;AACA,IAAM4E,6BAA6B,GAAGlD,uBAAuB,CAC3D5G,KAAK,CACHoE,IAAI,CAAC;AACHzU,EAAAA,MAAM,EADH,mBAAA;AAEHmD,EAAAA,OAAO,EAAEsR,IAAI,CAAC;AACZyC,IAAAA,UAAU,EAAET,OADA,EAAA;AAEZU,IAAAA,KAAK,EAFO,mBAAA;AAGZ9K,IAAAA,QAAQ,EAAEkJ,MAHE,EAAA;AAIZzT,IAAAA,IAAI,EAJQ,uBAAA;AAKZsV,IAAAA,SAAS,EAAE7B,MAAM;AALL,GAAD;AAFV,CAAD,CADD,CADsD,CAA7D;AAeA;AACA;AACA;;AAMA;AACA;AACA;;AACA,IAAM6E,2BAA2B,GAAGnD,uBAAuB,CACzD5G,KAAK,CACHoE,IAAI,CAAC;AACHpI,EAAAA,QAAQ,EAAEkJ,MADP,EAAA;AAEH3V,EAAAA,OAAO,EAAEmU;AAFN,CAAD,CADD,CADoD,CAA3D;AASA;AACA;AACA;;AACA,IAAMsG,iBAAiB,GAAG5F,IAAI,CAAC;AAC7ByC,EAAAA,UAAU,EAAET,OADiB,EAAA;AAE7BU,EAAAA,KAAK,EAFwB,mBAAA;AAG7B9K,EAAAA,QAAQ,EAAEkJ,MAHmB,EAAA;AAI7BzT,EAAAA,IAAI,EAJyB,wBAAA;AAK7BsV,EAAAA,SAAS,EAAE7B,MAAM;AALY,CAAD,CAA9B;AAQA;AACA;AACA;;AACA,IAAM+E,sBAAsB,GAAG7F,IAAI,CAAC;AAClCzU,EAAAA,MAAM,EAD4B,mBAAA;AAElCmD,EAAAA,OAAO,EAAEkX;AAFyB,CAAD,CAAnC;AAKA,IAAME,sBAAsB,GAAGvG,MAAM,CACnCQ,KAAK,CAAC,CAACP,QAAQ,CAAT,MAAS,CAAT,EAD6B,uBAC7B,CAAD,CAD8B,EAEnCO,KAAK,CAAC,CAAA,oBAAA,EAF6B,uBAE7B,CAAD,CAF8B,EAGnC1W,UAAAA,KAAK,EAAI;AACP,MAAIkG,KAAK,CAALA,OAAAA,CAAJ,KAAIA,CAAJ,EAA0B;AACxB,WAAOoR,MAAM,CAAA,KAAA,EAAb,wBAAa,CAAb;AADF,GAAA,MAEO;AACL,WAAA,KAAA;AACD;AARL,CAAqC,CAArC;AAYA;AACA;AACA;;AACA,IAAMoF,uBAAuB,GAAG/F,IAAI,CAAC;AACnCyC,EAAAA,UAAU,EAAET,OADuB,EAAA;AAEnCU,EAAAA,KAAK,EAF8B,mBAAA;AAGnC9K,EAAAA,QAAQ,EAAEkJ,MAHyB,EAAA;AAInCzT,EAAAA,IAAI,EAJ+B,sBAAA;AAKnCsV,EAAAA,SAAS,EAAE7B,MAAM;AALkB,CAAD,CAApC;AAQA,IAAMkF,4BAA4B,GAAGhG,IAAI,CAAC;AACxCzU,EAAAA,MAAM,EADkC,mBAAA;AAExCmD,EAAAA,OAAO,EAAEqX;AAF+B,CAAD,CAAzC;AAKA;AACA;AACA;;AACA,IAAME,qBAAqB,GAAGjG,IAAI,CAAC;AACjCkG,EAAAA,KAAK,EAAEnG,KAAK,CAAC,CACXH,OAAO,CADI,QACJ,CADI,EAEXA,OAAO,CAFI,UAEJ,CAFI,EAGXA,OAAO,CAHI,YAGJ,CAHI,EAIXA,OAAO,CALwB,cAKxB,CAJI,CAAD,CADqB;AAOjCuG,EAAAA,MAAM,EAAErF,MAPyB,EAAA;AAQjCsF,EAAAA,QAAQ,EAAEtF,MAAM;AARiB,CAAD,CAAlC;AAWA;AACA;AACA;;AAEA,IAAMuF,0CAA0C,GAAGzF,aAAa,CAC9DhF,KAAK,CACHoE,IAAI,CAAC;AACHzO,EAAAA,SAAS,EAAEkO,MADR,EAAA;AAEH1B,EAAAA,IAAI,EAAE+C,MAFH,EAAA;AAGH1V,EAAAA,GAAG,EAHA,sBAAA;AAIHkb,EAAAA,IAAI,EAAEhF,QAAQ,CAAC7B,MAJZ,EAIW,CAJX;AAKH8G,EAAAA,SAAS,EAAEhG,QAAQ,CAACe,QAAQ,CAACR,MAAV,EAAS,CAAT;AALhB,CAAD,CADD,CADyD,CAAhE;AAYA;AACA;AACA;;AACA,IAAM0F,gCAAgC,GAAG5F,aAAa,CACpDhF,KAAK,CACHoE,IAAI,CAAC;AACHzO,EAAAA,SAAS,EAAEkO,MADR,EAAA;AAEH1B,EAAAA,IAAI,EAAE+C,MAFH,EAAA;AAGH1V,EAAAA,GAAG,EAHA,sBAAA;AAIHkb,EAAAA,IAAI,EAAEhF,QAAQ,CAAC7B,MAJZ,EAIW,CAJX;AAKH8G,EAAAA,SAAS,EAAEhG,QAAQ,CAACe,QAAQ,CAACR,MAAV,EAAS,CAAT;AALhB,CAAD,CADD,CAD+C,CAAtD;AAYA;AACA;AACA;;AACA,IAAM2F,yBAAyB,GAAGzG,IAAI,CAAC;AACrC0G,EAAAA,YAAY,EAAE5F,MADuB,EAAA;AAErCX,EAAAA,MAAM,EAAEwG,4BAA4B,CAAA,iBAAA;AAFC,CAAD,CAAtC;AAKA;AACA;AACA;;AACA,IAAMC,wBAAwB,GAAG5G,IAAI,CAAC;AACpCzU,EAAAA,MAAM,EAD8B,mBAAA;AAEpCmD,EAAAA,OAAO,EAAEkX;AAF2B,CAAD,CAArC;AAKA;AACA;AACA;;AACA,IAAMiB,gCAAgC,GAAG7G,IAAI,CAAC;AAC5C0G,EAAAA,YAAY,EAAE5F,MAD8B,EAAA;AAE5CX,EAAAA,MAAM,EAAEwG,4BAA4B,CAAA,wBAAA;AAFQ,CAAD,CAA7C;AAKA;AACA;AACA;;AACA,IAAMG,cAAc,GAAG9G,IAAI,CAAC;AAC1B+G,EAAAA,MAAM,EAAEjG,MADkB,EAAA;AAE1B/C,EAAAA,IAAI,EAAE+C,MAFoB,EAAA;AAG1BkG,EAAAA,IAAI,EAAElG,MAAM;AAHc,CAAD,CAA3B;AAMA;AACA;AACA;;AACA,IAAMmG,sBAAsB,GAAGjH,IAAI,CAAC;AAClC0G,EAAAA,YAAY,EAAE5F,MADoB,EAAA;AAElCX,EAAAA,MAAM,EAAE2G;AAF0B,CAAD,CAAnC;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA8CA;AACA;AACA;;AACA,IAAMI,gBAAgB,GAAGnH,KAAK,CAAC,CAC7BC,IAAI,CAAC;AACHpS,EAAAA,IAAI,EAAEmS,KAAK,CAAC,CACVH,OAAO,CADG,oBACH,CADG,EAEVA,OAAO,CAFG,WAEH,CAFG,EAGVA,OAAO,CAHG,wBAGH,CAHG,EAIVA,OAAO,CALN,MAKM,CAJG,CAAD,CADR;AAOH7B,EAAAA,IAAI,EAAE+C,MAPH,EAAA;AAQHqG,EAAAA,SAAS,EAAErG,MAAM;AARd,CAAD,CADyB,EAW7Bd,IAAI,CAAC;AACHpS,EAAAA,IAAI,EAAEgS,OAAO,CADV,aACU,CADV;AAEHmH,EAAAA,MAAM,EAAEjG,MAFL,EAAA;AAGH/C,EAAAA,IAAI,EAAE+C,MAHH,EAAA;AAIHqG,EAAAA,SAAS,EAAErG,MAAM;AAJd,CAAD,CAXyB,EAiB7Bd,IAAI,CAAC;AACHpS,EAAAA,IAAI,EAAEgS,OAAO,CADV,QACU,CADV;AAEH7B,EAAAA,IAAI,EAAE+C,MAFH,EAAA;AAGHqG,EAAAA,SAAS,EAAErG,MAHR,EAAA;AAIHsG,EAAAA,KAAK,EAAEpH,IAAI,CAAC;AACVqH,IAAAA,qBAAqB,EAAEvG,MADb,EAAA;AAEVwG,IAAAA,yBAAyB,EAAExG,MAFjB,EAAA;AAGVyG,IAAAA,qBAAqB,EAAEzG,MAHb,EAAA;AAIV0G,IAAAA,uBAAuB,EAAE1G,MAAM;AAJrB,GAAD;AAJR,CAAD,CAjByB,EA4B7Bd,IAAI,CAAC;AACHpS,EAAAA,IAAI,EAAEgS,OAAO,CADV,MACU,CADV;AAEH7B,EAAAA,IAAI,EAAE+C,MAFH,EAAA;AAGHqG,EAAAA,SAAS,EAAErG,MAHR,EAAA;AAIH1V,EAAAA,GAAG,EAAEqU,MAAM;AAJR,CAAD,CA5ByB,CAAD,CAA9B;AAoCA;AACA;AACA;;AACA,IAAMgI,4BAA4B,GAAGzH,IAAI,CAAC;AACxC0G,EAAAA,YAAY,EAAE5F,MAD0B,EAAA;AAExCX,EAAAA,MAAM,EAAE+G;AAFgC,CAAD,CAAzC;AAKA;AACA;AACA;;AACA,IAAMQ,2BAA2B,GAAG1H,IAAI,CAAC;AACvC0G,EAAAA,YAAY,EAAE5F,MADyB,EAAA;AAEvCX,EAAAA,MAAM,EAAEwG,4BAA4B,CAClC5G,KAAK,CAAC,CAAA,qBAAA,EAD4B,uBAC5B,CAAD,CAD6B;AAFG,CAAD,CAAxC;AAOA;AACA;AACA;;AACA,IAAM4H,sBAAsB,GAAG3H,IAAI,CAAC;AAClC0G,EAAAA,YAAY,EAAE5F,MADoB,EAAA;AAElCX,EAAAA,MAAM,EAAEW,MAAM;AAFoB,CAAD,CAAnC;AAKA,IAAM8G,iBAAiB,GAAG5H,IAAI,CAAC;AAC7BzU,EAAAA,MAAM,EAAEkU,MADqB,EAAA;AAE7BoI,EAAAA,MAAM,EAAEvG,QAAQ,CAAC7B,MAFY,EAEb,CAFa;AAG7BqI,EAAAA,GAAG,EAAExG,QAAQ,CAAC7B,MAHe,EAGhB,CAHgB;AAI7BsI,EAAAA,GAAG,EAAEzG,QAAQ,CAAC7B,MAJe,EAIhB,CAJgB;AAK7BjX,EAAAA,OAAO,EAAE8Y,QAAQ,CAAC7B,MAAD,EAAA;AALY,CAAD,CAA9B;AAQA,IAAMuI,qBAAqB,GAAGhI,IAAI,CAAC;AACjCiI,EAAAA,UAAU,EAAExI,MADqB,EAAA;AAEjCyI,EAAAA,UAAU,EAAEzI,MAFqB,EAAA;AAGjC0I,EAAAA,cAAc,EAAErH,MAHiB,EAAA;AAIjCsH,EAAAA,gBAAgB,EAAEpG,OAJe,EAAA;AAKjCqG,EAAAA,YAAY,EAAEzM,KAAK,CAAC+D,KAAK,CAAC,CAACmB,MAAD,EAAA,EAAWA,MAAX,EAAA,EAAqBA,MALd,EAKP,CAAD,CAAN,CALc;AAMjCwH,EAAAA,UAAU,EAAExH,MANqB,EAAA;AAOjCyH,EAAAA,QAAQ,EAAEzH,MAPuB,EAAA;AAQjC0H,EAAAA,QAAQ,EAAElH,QAAQ,CAACR,MAAD,EAAA;AARe,CAAD,CAAlC;AAWA;AACA;AACA;;AACA,IAAM2H,eAAe,GAAG7H,aAAa,CACnCZ,IAAI,CAAC;AACH0I,EAAAA,OAAO,EAAE9M,KAAK,CADX,qBACW,CADX;AAEH+M,EAAAA,UAAU,EAAE/M,KAAK,CAAA,qBAAA;AAFd,CAAD,CAD+B,CAArC;AAOA,IAAMgN,kBAAkB,GAAG7I,KAAK,CAAC,CAC/BH,OAAO,CADwB,WACxB,CADwB,EAE/BA,OAAO,CAFwB,WAExB,CAFwB,EAG/BA,OAAO,CAHT,WAGS,CAHwB,CAAD,CAAhC;AAMA,IAAMiJ,uBAAuB,GAAG7I,IAAI,CAAC;AACnCjC,EAAAA,IAAI,EAAE+C,MAD6B,EAAA;AAEnCgI,EAAAA,aAAa,EAAExH,QAAQ,CAACR,MAFW,EAEZ,CAFY;AAGnC1V,EAAAA,GAAG,EAHgC,sBAAA;AAInC2d,EAAAA,kBAAkB,EAAExI,QAAQ,CAAA,kBAAA;AAJO,CAAD,CAApC;AAOA;AACA;AACA;;AACA,IAAMyI,6BAA6B,GAAGxG,uBAAuB,CAC3D5G,KAAK,CAAC0F,QAAQ,CADhB,uBACgB,CAAT,CADsD,CAA7D;AAIA;AACA;AACA;;AACA,IAAM2H,0CAA0C,GAAGrI,aAAa,CAACE,MAAjE,EAAgE,CAAhE;AAEA,IAAMoI,0BAA0B,GAAGlJ,IAAI,CAAC;AACtC1O,EAAAA,UAAU,EAAEsK,KAAK,CAAC6D,MADoB,EACrB,CADqB;AAEtCzO,EAAAA,OAAO,EAAEgP,IAAI,CAAC;AACZ3R,IAAAA,WAAW,EAAEuN,KAAK,CAAC6D,MADP,EACM,CADN;AAEZrR,IAAAA,MAAM,EAAE4R,IAAI,CAAC;AACX3P,MAAAA,qBAAqB,EAAEyQ,MADZ,EAAA;AAEXxQ,MAAAA,yBAAyB,EAAEwQ,MAFhB,EAAA;AAGXvQ,MAAAA,2BAA2B,EAAEuQ,MAAM;AAHxB,KAAD,CAFA;AAOZvS,IAAAA,YAAY,EAAEqN,KAAK,CACjBoE,IAAI,CAAC;AACHvQ,MAAAA,QAAQ,EAAEmM,KAAK,CAACkF,MADb,EACY,CADZ;AAEHzT,MAAAA,IAAI,EAAEoS,MAFH,EAAA;AAGHnQ,MAAAA,cAAc,EAAEwR,MAAM;AAHnB,KAAD,CADa,CAPP;AAcZxS,IAAAA,eAAe,EAAEmR,MAAM;AAdX,GAAD;AAFyB,CAAD,CAAvC;AAoBA,IAAM0J,uBAAuB,GAAGnJ,IAAI,CAAC;AACnCyF,EAAAA,MAAM,EAAEnF,OAD2B,EAAA;AAEnChF,EAAAA,OAAO,EAAEmE,MAF0B,EAAA;AAGnClV,EAAAA,SAAS,EAAE+U;AAHwB,CAAD,CAApC;AAMA,IAAM8J,oBAAoB,GAAGpJ,IAAI,CAAC;AAChCvQ,EAAAA,QAAQ,EAAEmM,KAAK,CADiB,mBACjB,CADiB;AAEhCvO,EAAAA,IAAI,EAAEoS,MAF0B,EAAA;AAGhClV,EAAAA,SAAS,EAAE+U;AAHqB,CAAD,CAAjC;AAMA,IAAM+J,iBAAiB,GAAGtJ,KAAK,CAAC,CAAA,oBAAA,EAAhC,uBAAgC,CAAD,CAA/B;AAKA,IAAMuJ,wBAAwB,GAAGvJ,KAAK,CAAC,CACrCC,IAAI,CAAC;AACHyF,EAAAA,MAAM,EAAEnF,OADL,EAAA;AAEHhF,EAAAA,OAAO,EAAEmE,MAFN,EAAA;AAGHlV,EAAAA,SAAS,EAAEkV,MAAM;AAHd,CAAD,CADiC,EAMrCO,IAAI,CAAC;AACHvQ,EAAAA,QAAQ,EAAEmM,KAAK,CAAC6D,MADb,EACY,CADZ;AAEHpS,EAAAA,IAAI,EAAEoS,MAFH,EAAA;AAGHlV,EAAAA,SAAS,EAAEkV,MAAM;AAHd,CAAD,CANiC,CAAD,CAAtC;AAaA,IAAM8J,sBAAsB,GAAGhK,MAAM,CAAA,iBAAA,EAAA,wBAAA,EAGnClW,UAAAA,KAAK,EAAI;AACP,MAAI,cAAJ,KAAA,EAAyB;AACvB,WAAOsX,MAAM,CAAA,KAAA,EAAb,oBAAa,CAAb;AADF,GAAA,MAEO;AACL,WAAOA,MAAM,CAAA,KAAA,EAAb,uBAAa,CAAb;AACD;AARL,CAAqC,CAArC;AAYA;AACA;AACA;;AACA,IAAM6I,gCAAgC,GAAGxJ,IAAI,CAAC;AAC5C1O,EAAAA,UAAU,EAAEsK,KAAK,CAAC6D,MAD0B,EAC3B,CAD2B;AAE5CzO,EAAAA,OAAO,EAAEgP,IAAI,CAAC;AACZ3R,IAAAA,WAAW,EAAEuN,KAAK,CAChBoE,IAAI,CAAC;AACHzU,MAAAA,MAAM,EADH,mBAAA;AAEHuI,MAAAA,MAAM,EAAEkO,OAFL,EAAA;AAGHyH,MAAAA,QAAQ,EAAEzH,OAAO;AAHd,KAAD,CADY,CADN;AAQZzT,IAAAA,YAAY,EAAEqN,KAAK,CARP,sBAQO,CARP;AASZtN,IAAAA,eAAe,EAAEmR,MAAM;AATX,GAAD;AAF+B,CAAD,CAA7C;AAeA,IAAMiK,kBAAkB,GAAG1J,IAAI,CAAC;AAC9B2J,EAAAA,YAAY,EAAE7I,MADgB,EAAA;AAE9B8I,EAAAA,IAAI,EAAEnK,MAFwB,EAAA;AAG9BiD,EAAAA,KAAK,EAAEnC,QAAQ,CAACd,MAHc,EAGf,CAHe;AAI9BoK,EAAAA,aAAa,EAAE3E;AAJe,CAAD,CAA/B;AAOA;AACA;AACA;;AACA,IAAM4E,8BAA8B,GAAG9J,IAAI,CAAC;AAC1C5U,EAAAA,GAAG,EADuC,sBAAA;AAE1C2e,EAAAA,GAAG,EAAEjJ,MAFqC,EAAA;AAG1CkJ,EAAAA,iBAAiB,EAAEzJ,QAAQ,CACzBe,QAAQ,CACN1F,KAAK,CACHoE,IAAI,CAAC;AACHnR,IAAAA,KAAK,EAAEiS,MADJ,EAAA;AAEHvS,IAAAA,YAAY,EAAEqN,KAAK,CACjBoE,IAAI,CAAC;AACHvQ,MAAAA,QAAQ,EAAEmM,KAAK,CAACkF,MADb,EACY,CADZ;AAEHzT,MAAAA,IAAI,EAAEoS,MAFH,EAAA;AAGHnQ,MAAAA,cAAc,EAAEwR,MAAM;AAHnB,KAAD,CADa;AAFhB,GAAD,CADD,CADC,CADiB,CAHe;AAmB1CmJ,EAAAA,WAAW,EAAErO,KAAK,CAACkF,MAnBuB,EAmBxB,CAnBwB;AAoB1CoJ,EAAAA,YAAY,EAAEtO,KAAK,CAACkF,MApBsB,EAoBvB,CApBuB;AAqB1CqJ,EAAAA,WAAW,EAAE5J,QAAQ,CAACe,QAAQ,CAAC1F,KAAK,CAAC6D,MArBK,EAqBN,CAAN,CAAT,CArBqB;AAsB1C2K,EAAAA,gBAAgB,EAAE7J,QAAQ,CAACe,QAAQ,CAAC1F,KAAK,CAtBC,kBAsBD,CAAN,CAAT,CAtBgB;AAuB1CyO,EAAAA,iBAAiB,EAAE9J,QAAQ,CAACe,QAAQ,CAAC1F,KAAK,CAAf,kBAAe,CAAN,CAAT;AAvBe,CAAD,CAA3C;AA0BA;AACA;AACA;;AACA,IAAM0O,oCAAoC,GAAGtK,IAAI,CAAC;AAChD5U,EAAAA,GAAG,EAD6C,sBAAA;AAEhD2e,EAAAA,GAAG,EAAEjJ,MAF2C,EAAA;AAGhDkJ,EAAAA,iBAAiB,EAAEzJ,QAAQ,CACzBe,QAAQ,CACN1F,KAAK,CACHoE,IAAI,CAAC;AACHnR,IAAAA,KAAK,EAAEiS,MADJ,EAAA;AAEHvS,IAAAA,YAAY,EAAEqN,KAAK,CAAA,sBAAA;AAFhB,GAAD,CADD,CADC,CADiB,CAHqB;AAahDqO,EAAAA,WAAW,EAAErO,KAAK,CAACkF,MAb6B,EAa9B,CAb8B;AAchDoJ,EAAAA,YAAY,EAAEtO,KAAK,CAACkF,MAd4B,EAc7B,CAd6B;AAehDqJ,EAAAA,WAAW,EAAE5J,QAAQ,CAACe,QAAQ,CAAC1F,KAAK,CAAC6D,MAfW,EAeZ,CAAN,CAAT,CAf2B;AAgBhD2K,EAAAA,gBAAgB,EAAE7J,QAAQ,CAACe,QAAQ,CAAC1F,KAAK,CAhBO,kBAgBP,CAAN,CAAT,CAhBsB;AAiBhDyO,EAAAA,iBAAiB,EAAE9J,QAAQ,CAACe,QAAQ,CAAC1F,KAAK,CAAf,kBAAe,CAAN,CAAT;AAjBqB,CAAD,CAAjD;AAoBA;AACA;AACA;;AACA,IAAM2O,iBAAiB,GAAG3J,aAAa,CACrCU,QAAQ,CACNtB,IAAI,CAAC;AACHjK,EAAAA,SAAS,EAAE0J,MADR,EAAA;AAEH+K,EAAAA,iBAAiB,EAAE/K,MAFhB,EAAA;AAGHgL,EAAAA,UAAU,EAAE3J,MAHT,EAAA;AAIHjF,EAAAA,YAAY,EAAED,KAAK,CACjBoE,IAAI,CAAC;AACH5P,IAAAA,WAAW,EADR,0BAAA;AAEH6C,IAAAA,IAAI,EAAEqO,QAAQ,CAAA,8BAAA;AAFX,GAAD,CADa,CAJhB;AAUHoJ,EAAAA,OAAO,EAAEnK,QAAQ,CACf3E,KAAK,CACHoE,IAAI,CAAC;AACHzU,IAAAA,MAAM,EAAEkU,MADL,EAAA;AAEH7H,IAAAA,QAAQ,EAAEkJ,MAFP,EAAA;AAGHW,IAAAA,WAAW,EAAEH,QAAQ,CAACR,MAHnB,EAGkB,CAHlB;AAIH6J,IAAAA,UAAU,EAAErJ,QAAQ,CAAC7B,MAAD,EAAA;AAJjB,GAAD,CADD,CADU,CAVd;AAoBH8G,EAAAA,SAAS,EAAEjF,QAAQ,CAACR,MApBjB,EAoBgB,CApBhB;AAqBHe,EAAAA,WAAW,EAAEP,QAAQ,CAACR,MAAD,EAAA;AArBlB,CAAD,CADE,CAD6B,CAAvC;AA4BA;AACA;AACA;AACA;AACA;;AACA,IAAM8J,0BAA0B,GAAGhK,aAAa,CAC9CU,QAAQ,CACNtB,IAAI,CAAC;AACHjK,EAAAA,SAAS,EAAE0J,MADR,EAAA;AAEH+K,EAAAA,iBAAiB,EAAE/K,MAFhB,EAAA;AAGHgL,EAAAA,UAAU,EAAE3J,MAHT,EAAA;AAIHjF,EAAAA,YAAY,EAAED,KAAK,CACjBoE,IAAI,CAAC;AACH5P,IAAAA,WAAW,EADR,0BAAA;AAEH6C,IAAAA,IAAI,EAAEqO,QAAQ,CAAA,8BAAA;AAFX,GAAD,CADa,CAJhB;AAUHoJ,EAAAA,OAAO,EAAEnK,QAAQ,CACf3E,KAAK,CACHoE,IAAI,CAAC;AACHzU,IAAAA,MAAM,EAAEkU,MADL,EAAA;AAEH7H,IAAAA,QAAQ,EAAEkJ,MAFP,EAAA;AAGHW,IAAAA,WAAW,EAAEH,QAAQ,CAACR,MAHnB,EAGkB,CAHlB;AAIH6J,IAAAA,UAAU,EAAErJ,QAAQ,CAAC7B,MAAD,EAAA;AAJjB,GAAD,CADD,CADU,CAVd;AAoBH8G,EAAAA,SAAS,EAAEjF,QAAQ,CAACR,MAAD,EAAA;AApBhB,CAAD,CADE,CADsC,CAAhD;AA2BA;AACA;AACA;;AACA,IAAM+J,2BAA2B,GAAGjK,aAAa,CAC/CU,QAAQ,CACNtB,IAAI,CAAC;AACHjK,EAAAA,SAAS,EAAE0J,MADR,EAAA;AAEH+K,EAAAA,iBAAiB,EAAE/K,MAFhB,EAAA;AAGHgL,EAAAA,UAAU,EAAE3J,MAHT,EAAA;AAIHxP,EAAAA,UAAU,EAAEsK,KAAK,CAAC6D,MAJf,EAIc,CAJd;AAKH8G,EAAAA,SAAS,EAAEjF,QAAQ,CAACR,MAAD,EAAA;AALhB,CAAD,CADE,CADuC,CAAjD;AAYA;AACA;AACA;;AACA,IAAMgK,uBAAuB,GAAGlK,aAAa,CAC3CU,QAAQ,CACNtB,IAAI,CAAC;AACHjC,EAAAA,IAAI,EAAE+C,MADH,EAAA;AAEH7N,EAAAA,IAAI,EAFD,8BAAA;AAGHsT,EAAAA,SAAS,EAAEhG,QAAQ,CAACe,QAAQ,CAACR,MAH1B,EAGyB,CAAT,CAHhB;AAIH1Q,EAAAA,WAAW,EAAE8Y;AAJV,CAAD,CADE,CADmC,CAA7C;AAWA;AACA;AACA;;AACA,IAAM6B,6BAA6B,GAAGnK,aAAa,CACjDU,QAAQ,CACNtB,IAAI,CAAC;AACHjC,EAAAA,IAAI,EAAE+C,MADH,EAAA;AAEH1Q,EAAAA,WAAW,EAFR,gCAAA;AAGH6C,EAAAA,IAAI,EAAEqO,QAAQ,CAHX,oCAGW,CAHX;AAIHiF,EAAAA,SAAS,EAAEhG,QAAQ,CAACe,QAAQ,CAACR,MAAV,EAAS,CAAT;AAJhB,CAAD,CADE,CADyC,CAAnD;AAWA;AACA;AACA;AACA;AACA;;AACA,IAAMkK,qCAAqC,GAAGxI,uBAAuB,CACnExC,IAAI,CAAC;AACHjK,EAAAA,SAAS,EAAE0J,MADR,EAAA;AAEHjJ,EAAAA,aAAa,EAAEwJ,IAAI,CAAC;AAClBiL,IAAAA,oBAAoB,EAAEnK,MAAM;AADV,GAAD;AAFhB,CAAD,CAD+D,CAArE;AASA;AACA;AACA;;AACA,IAAMoK,2BAA2B,GAAG1I,uBAAuB,CACzDxC,IAAI,CAAC;AACHjK,EAAAA,SAAS,EAAE0J,MADR,EAAA;AAEHhO,EAAAA,oBAAoB,EAAEqP,MAAM;AAFzB,CAAD,CADqD,CAA3D;AAOA,IAAMqK,gBAAgB,GAAGnL,IAAI,CAAC;AAC5BjC,EAAAA,IAAI,EAAE+C,MADsB,EAAA;AAE5BsK,EAAAA,eAAe,EAAEtK,MAFW,EAAA;AAG5BuK,EAAAA,QAAQ,EAAEvK,MAHkB,EAAA;AAI5BwK,EAAAA,gBAAgB,EAAExK,MAAM;AAJI,CAAD,CAA7B;AAOA;AACA;AACA;;AACA,IAAMyK,oCAAoC,GAAG3K,aAAa,CACxDhF,KAAK,CADP,gBACO,CADmD,CAA1D;AAIA;AACA;AACA;;AACA,IAAM4P,yBAAyB,GAAGhJ,uBAAuB,CACvDlB,QAAQ,CACNtB,IAAI,CAAC;AACHxJ,EAAAA,aAAa,EAAEwJ,IAAI,CAAC;AAClBiL,IAAAA,oBAAoB,EAAEnK,MAAM;AADV,GAAD;AADhB,CAAD,CADE,CAD+C,CAAzD;AAUA;AACA;AACA;;AACA,IAAM2K,uBAAuB,GAAG7K,aAAa,CAACnB,MAA9C,EAA6C,CAA7C;AAEA;AACA;AACA;;AACA,IAAMiM,wBAAwB,GAAG9K,aAAa,CAACnB,MAA/C,EAA8C,CAA9C;AAEA;AACA;AACA;;AAuMA;AACA;AACA;;AACA,IAAMkM,UAAU,GAAG3L,IAAI,CAAC;AACtB5U,EAAAA,GAAG,EADmB,sBAAA;AAEtBqT,EAAAA,IAAI,EAAE7C,KAAK,CAAC6D,MAFU,EAEX,CAFW;AAGtBlO,EAAAA,SAAS,EAAEkO,MAAM;AAHK,CAAD,CAAvB;AAMA;AACA;AACA;;AAOA;AACA;AACA;;AACA,IAAMmM,sBAAsB,GAAG5L,IAAI,CAAC;AAClCG,EAAAA,MAAM,EAAEwG,4BAA4B,CADF,UACE,CADF;AAElCD,EAAAA,YAAY,EAAE5F,MAAM;AAFc,CAAD,CAAnC;AAKA;AACA;AACA;;AAsGA;AACA;AACA;;IACO,U;AACL;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAGA;;AAGA;AACF;AACA;AACA;AACA;AACA;AACA;;AAEE;;AACA;;AACA;;AAYA;;AACA;;AAKA;;AAKA;;AAGA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;AAGA;AACF;AACA;AACA;AACA;AACA;AACErY,sBAAW,QAAXA,EAAW,kBAAXA,EAGE;AAAA;;AAAA,SA5EeojB,WA4Ef,GAAA,KAAA,CAAA;AAAA,SA3EeC,iCA2Ef,GAAA,KAAA,CAAA;AAAA,SA1EeC,YA0Ef,GAAA,KAAA,CAAA;AAAA,SAzEeC,cAyEf,GAAA,KAAA,CAAA;AAAA,SAxEeC,UAwEf,GAAA,KAAA,CAAA;AAAA,SAvEeC,WAuEf,GAAA,KAAA,CAAA;AAAA,SAtEeC,gBAsEf,GAAA,KAAA,CAAA;AAAA,SArEeC,aAqEf,GAAA,KAAA,CAAA;AApEeC,SAAAA,sBAAAA,GAAkC,KAAlCA;AACAC,SAAAA,sBAAAA,GAEN,IAFMA;AAGAC,SAAAA,wBAAAA,GAEN,IAFMA;AASLC,SAAAA,uBAAAA,GAAkC,CAAlCA;AAEKC,SAAAA,wBAAAA,GAAoC,KAApCA;AACAC,SAAAA,iBAAAA,GAA6B,KAA7BA;AAoDf,SAnDeC,cAmDf,GA9CE;AACFC,MAAAA,eAAe,EADb,IAAA;AAEFC,MAAAA,SAAS,EAFP,CAAA;AAGFC,MAAAA,qBAAqB,EAHnB,EAAA;AAIFC,MAAAA,mBAAmB,EAAE;AAJnB,KA8CF;AAvCuBC,SAAAA,yBAAAA,GAAkD,CAAlDA;AACAC,SAAAA,mDAAAA,GAIrB,EAJqBA;AAKAC,SAAAA,4CAAAA,GAIrB,EAJqBA;AAKAC,SAAAA,oBAAAA,GAErB,EAFqBA;AA4BvB,SAZuBC,+BAYvB,GAXA,IAAA,GAAA,EAWA;AACA,QAAIlO,GAAG,GAAG,IAAA,GAAA,CAAV,QAAU,CAAV;AACA,QAAMC,QAAQ,GAAGD,GAAG,CAAHA,QAAAA,KAAjB,QAAA;AAEA,QAAA,UAAA;AACA,QAAA,WAAA;AACA,QAAA,KAAA;AACA,QAAA,eAAA;AACA,QAAA,uBAAA;;AACA,QAAImO,kBAAkB,IAAI,OAAA,kBAAA,KAA1B,QAAA,EAAkE;AAChE,WAAA,WAAA,GAAA,kBAAA;AADF,KAAA,MAEO,IAAA,kBAAA,EAAwB;AAC7B,WAAA,WAAA,GAAmBA,kBAAkB,CAArC,UAAA;AACA,WAAA,iCAAA,GACEA,kBAAkB,CADpB,gCAAA;AAEAC,MAAAA,UAAU,GAAGD,kBAAkB,CAA/BC,UAAAA;AACAzJ,MAAAA,WAAW,GAAGwJ,kBAAkB,CAAhCxJ,WAAAA;AACAX,MAAAA,KAAK,GAAGmK,kBAAkB,CAA1BnK,KAAAA;AACAI,MAAAA,eAAe,GAAG+J,kBAAkB,CAApC/J,eAAAA;AACAW,MAAAA,uBAAuB,GAAGoJ,kBAAkB,CAA5CpJ,uBAAAA;AACD;;AAED,SAAA,YAAA,GAAA,QAAA;AACA,SAAA,cAAA,GAAsBqJ,UAAU,IAAIC,gBAAgB,CAApD,QAAoD,CAApD;AAEA,SAAA,UAAA,GAAkBC,eAAe,CAC/BtO,GAAG,CAD4B,QAC/BA,EAD+B,EAAA,QAAA,EAAA,WAAA,EAAA,KAAA,EAAA,eAAA,EAAjC,uBAAiC,CAAjC;AAQA,SAAA,WAAA,GAAmBuO,gBAAgB,CAAC,KAApC,UAAmC,CAAnC;AACA,SAAA,gBAAA,GAAwBC,qBAAqB,CAAC,KAA9C,UAA6C,CAA7C;AAEA,SAAA,aAAA,GAAqB,IAAA,MAAA,CAAuB,KAAvB,cAAA,EAA4C;AAC/DC,MAAAA,WAAW,EADoD,KAAA;AAE/DC,MAAAA,cAAc,EAAEC;AAF+C,KAA5C,CAArB;;AAIA,SAAA,aAAA,CAAA,EAAA,CAAA,MAAA,EAA8B,KAAA,SAAA,CAAA,IAAA,CAA9B,IAA8B,CAA9B;;AACA,SAAA,aAAA,CAAA,EAAA,CAAA,OAAA,EAA+B,KAAA,UAAA,CAAA,IAAA,CAA/B,IAA+B,CAA/B;;AACA,SAAA,aAAA,CAAA,EAAA,CAAA,OAAA,EAA+B,KAAA,UAAA,CAAA,IAAA,CAA/B,IAA+B,CAA/B;;AACA,SAAA,aAAA,CAAA,EAAA,CAAA,qBAAA,EAEE,KAAA,wBAAA,CAAA,IAAA,CAFF,IAEE,CAFF;;AAIA,SAAA,aAAA,CAAA,EAAA,CAAA,qBAAA,EAEE,KAAA,+BAAA,CAAA,IAAA,CAFF,IAEE,CAFF;;AAIA,SAAA,aAAA,CAAA,EAAA,CAAA,kBAAA,EAEE,KAAA,qBAAA,CAAA,IAAA,CAFF,IAEE,CAFF;;AAIA,SAAA,aAAA,CAAA,EAAA,CAAA,0BAAA,EAEE,KAAA,4BAAA,CAAA,IAAA,CAFF,IAEE,CAFF;;AAIA,SAAA,aAAA,CAAA,EAAA,CAAA,uBAAA,EAEE,KAAA,0BAAA,CAAA,IAAA,CAFF,IAEE,CAFF;;AAIA,SAAA,aAAA,CAAA,EAAA,CAAA,kBAAA,EAEE,KAAA,qBAAA,CAAA,IAAA,CAFF,IAEE,CAFF;;AAIA,SAAA,aAAA,CAAA,EAAA,CAAA,kBAAA,EAEE,KAAA,qBAAA,CAAA,IAAA,CAFF,IAEE,CAFF;AAID;AAED;AACF;AACA;;;;;SACMpS,eAAqC;AACvC,aAAO,KAAP,WAAA;AACD;AAED;AACF;AACA;;;;SACMqS,eAAsB;AACxB,aAAO,KAAP,YAAA;AACD;AAED;AACF;AACA;;;;;2FACQC,kBAAoB,SAApBA,EAAoB,UAApBA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAIEtf,gBAAAA,IAJFsf,GAIS,KAAA,UAAA,CAAgB,CAAClkB,SAAS,CAA1B,QAAiBA,EAAD,CAAhB,EAAb,UAAa,CAJTkkB;AAAAA;AAAAA,uBAKoB,KAAA,WAAA,CAAA,YAAA,EAAxB,IAAwB,CALpBA;;AAAAA;AAKEC,gBAAAA,SALFD;AAME/J,gBAAAA,GANF+J,GAMQpN,MAAM,CAAA,SAAA,EAAY6B,uBAAuB,CAAC1B,MAAtD,EAAqD,CAAnC,CANdiN;;AAAAA,sBAOA,WAAJ,GAPIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAQI,IAAA,KAAA,CACJ,+BACElkB,SAAS,CADX,QACEA,EADF,GAAA,IAAA,GAGEma,GAAG,CAAHA,KAAAA,CAJJ,OAAM,CARJ+J;;AAAAA;AAAAA,kDAeG/J,GAAG,CAAV,MAfI+J;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAkBN;AACF;AACA;;;;;iFACQE,kBAAU,SAAVA,EAAU,UAAVA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,uBAIS,KAAA,oBAAA,CAAA,SAAA,EAAA,UAAA,EAAA,IAAA,CACLtb,UAAAA,CAAC;AAAA,yBAAIA,CAAC,CADD,KACJ;AAAA,iBADI,EAAA,KAAA,CAEJub,UAAAA,CAAC,EAAI;AACV,wBAAM,IAAA,KAAA,CACJ,sCAAsCrkB,SAAS,CAA/C,QAAsCA,EAAtC,GAAA,IAAA,GADF,CAAM,CAAN;AAHJ,iBAAa,CAJTokB;;AAAAA;AAAAA;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAaN;AACF;AACA;;;;;mFACQE,mBAAY,IAAZA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,uBACoB,KAAA,WAAA,CAAA,cAAA,EAAiC,CAAzD,IAAyD,CAAjC,CADpBA;;AAAAA;AACEH,gBAAAA,SADFG;AAEEnK,gBAAAA,GAFFmK,GAEQxN,MAAM,CAAA,SAAA,EAAYC,aAAa,CAACU,QAAQ,CAACR,MAArD,EAAoD,CAAT,CAAzB,CAFdqN;;AAAAA,sBAGA,WAAJ,GAHIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAII,IAAA,KAAA,CACJ,uCAAA,IAAA,GAAA,IAAA,GAAqDnK,GAAG,CAAHA,KAAAA,CADvD,OAAM,CAJJmK;;AAAAA;AAAAA,mDAQGnK,GAAG,CAAV,MARImK;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAWN;AACF;AACA;AACA;;;;;2FACQC;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,uBACoB,KAAA,WAAA,CAAA,mBAAA,EAAxB,EAAwB,CADpBA;;AAAAA;AACEJ,gBAAAA,SADFI;AAEEpK,gBAAAA,GAFFoK,GAEQzN,MAAM,CAAA,SAAA,EAAYC,aAAa,CAACE,MAA5C,EAA2C,CAAzB,CAFdsN;;AAAAA,sBAGA,WAAJ,GAHIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAII,IAAA,KAAA,CACJ,wCAAwCpK,GAAG,CAAHA,KAAAA,CAD1C,OAAM,CAJJoK;;AAAAA;AAAAA,mDAQGpK,GAAG,CAAV,MARIoK;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAWN;AACF;AACA;;;;;6FACQC;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,uBACoB,KAAA,WAAA,CAAA,wBAAA,EAAxB,EAAwB,CADpBA;;AAAAA;AACEL,gBAAAA,SADFK;AAEErK,gBAAAA,GAFFqK,GAEQ1N,MAAM,CAAA,SAAA,EAAlB,aAAkB,CAFd0N;;AAAAA,sBAGA,WAAJ,GAHIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAII,IAAA,KAAA,CACJ,0CAA0CrK,GAAG,CAAHA,KAAAA,CAD5C,OAAM,CAJJqK;;AAAAA;AAAAA,mDAQGrK,GAAG,CAAV,MARIqK;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAWN;AACF;AACA;;;;;gFACQC,mBAAS,MAATA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAGAC,gBAAAA,SAHAD,GAGJ,EAHIA;;AAIJ,oBAAI,OAAA,MAAA,KAAJ,QAAA,EAAgC;AAC9BC,kBAAAA,SAAS,GAAG;AAAC9S,oBAAAA,UAAU,EAAE+S;AAAb,mBAAZD;AADF,iBAAA,MAEO,IAAA,MAAA,EAAY;AACjBA,kBAAAA,SAAS,mCAAG,MAAH;AAEP9S,oBAAAA,UAAU,EAAG+S,MAAM,IAAIA,MAAM,CAAjB,UAACA,IAAgC,KAAK/S;AAF3C,oBAAT8S;AADK,iBAAA,MAKA;AACLA,kBAAAA,SAAS,GAAG;AACV9S,oBAAAA,UAAU,EAAE,KAAKA;AADP,mBAAZ8S;AAGD;;AAfGD;AAAAA,uBAiBoB,KAAA,WAAA,CAAA,WAAA,EAA8B,CAAtD,SAAsD,CAA9B,CAjBpBA;;AAAAA;AAiBEN,gBAAAA,SAjBFM;AAkBEtK,gBAAAA,GAlBFsK,GAkBQ3N,MAAM,CAAA,SAAA,EAAlB,kBAAkB,CAlBd2N;;AAAAA,sBAmBA,WAAJ,GAnBIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAoBI,IAAA,KAAA,CAAU,2BAA2BtK,GAAG,CAAHA,KAAAA,CAA3C,OAAM,CApBJsK;;AAAAA;AAAAA,mDAsBGtK,GAAG,CAAV,MAtBIsK;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAyBN;AACF;AACA;;;;;qFACQG,mBAAc,gBAAdA,EAAc,UAAdA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAIEhgB,gBAAAA,IAJFggB,GAIS,KAAA,UAAA,CAAgB,CAACC,gBAAgB,CAAjC,QAAiBA,EAAD,CAAhB,EAAb,UAAa,CAJTD;AAAAA;AAAAA,uBAKoB,KAAA,WAAA,CAAA,gBAAA,EAAxB,IAAwB,CALpBA;;AAAAA;AAKET,gBAAAA,SALFS;AAMEzK,gBAAAA,GANFyK,GAMQ9N,MAAM,CAAA,SAAA,EAAY6B,uBAAuB,CAArD,iBAAqD,CAAnC,CANdiM;;AAAAA,sBAOA,WAAJ,GAPIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAQI,IAAA,KAAA,CAAU,iCAAiCzK,GAAG,CAAHA,KAAAA,CAAjD,OAAM,CARJyK;;AAAAA;AAAAA,mDAUGzK,GAAG,CAAV,MAVIyK;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAaN;AACF;AACA;;;;;6FACQE,mBAAsB,YAAtBA,EAAsB,UAAtBA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAIElgB,gBAAAA,IAJFkgB,GAIS,KAAA,UAAA,CAAgB,CAACC,YAAY,CAA7B,QAAiBA,EAAD,CAAhB,EAAb,UAAa,CAJTD;AAAAA;AAAAA,uBAKoB,KAAA,WAAA,CAAA,wBAAA,EAAxB,IAAwB,CALpBA;;AAAAA;AAKEX,gBAAAA,SALFW;AAME3K,gBAAAA,GANF2K,GAMQhO,MAAM,CAAA,SAAA,EAAY6B,uBAAuB,CAArD,iBAAqD,CAAnC,CANdmM;;AAAAA,sBAOA,WAAJ,GAPIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAQI,IAAA,KAAA,CACJ,0CAA0C3K,GAAG,CAAHA,KAAAA,CAD5C,OAAM,CARJ2K;;AAAAA;AAAAA,mDAYG3K,GAAG,CAAV,MAZI2K;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAeN;AACF;AACA;AACA;AACA;;;;;8FACQE,mBAAuB,YAAvBA,EAAuB,MAAvBA,EAAuB,UAAvBA;AAAAA;;AAAAA;AAAAA;AAAAA;AAAAA;AASAC,gBAAAA,KATAD,GASe,CAACE,YAAY,CAAhC,QAAoBA,EAAD,CATfF;;AAUJ,oBAAI,UAAJ,MAAA,EAAsB;AACpBC,kBAAAA,KAAK,CAALA,IAAAA,CAAW;AAAClF,oBAAAA,IAAI,EAAEoF,MAAM,CAANA,IAAAA,CAAAA,QAAAA;AAAP,mBAAXF;AADF,iBAAA,MAEO;AACLA,kBAAAA,KAAK,CAALA,IAAAA,CAAW;AAACvkB,oBAAAA,SAAS,EAAEykB,MAAM,CAANA,SAAAA,CAAAA,QAAAA;AAAZ,mBAAXF;AACD;;AAEKrgB,gBAAAA,IAhBFogB,GAgBS,KAAA,UAAA,CAAA,KAAA,EAAA,UAAA,EAAb,QAAa,CAhBTA;AAAAA;AAAAA,uBAiBoB,KAAA,WAAA,CAAA,yBAAA,EAAxB,IAAwB,CAjBpBA;;AAAAA;AAiBEb,gBAAAA,SAjBFa;AAkBE7K,gBAAAA,GAlBF6K,GAkBQlO,MAAM,CAAA,SAAA,EAAlB,uBAAkB,CAlBdkO;;AAAAA,sBAmBA,WAAJ,GAnBIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAoBI,IAAA,KAAA,CACJ,mDACEE,YAAY,CADd,QACEA,EADF,GAAA,IAAA,GAGE/K,GAAG,CAAHA,KAAAA,CAJJ,OAAM,CApBJ6K;;AAAAA;AAAAA,mDA2BG7K,GAAG,CAAV,MA3BI6K;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AA8BN;AACF;AACA;AACA;AACA;;;;;oGACQI,mBAA6B,YAA7BA,EAA6B,MAA7BA,EAA6B,UAA7BA;AAAAA;;AAAAA;AAAAA;AAAAA;AAAAA;AASAH,gBAAAA,KATAG,GASe,CAACF,YAAY,CAAhC,QAAoBA,EAAD,CATfE;;AAUJ,oBAAI,UAAJ,MAAA,EAAsB;AACpBH,kBAAAA,KAAK,CAALA,IAAAA,CAAW;AAAClF,oBAAAA,IAAI,EAAEoF,MAAM,CAANA,IAAAA,CAAAA,QAAAA;AAAP,mBAAXF;AADF,iBAAA,MAEO;AACLA,kBAAAA,KAAK,CAALA,IAAAA,CAAW;AAACvkB,oBAAAA,SAAS,EAAEykB,MAAM,CAANA,SAAAA,CAAAA,QAAAA;AAAZ,mBAAXF;AACD;;AAEKrgB,gBAAAA,IAhBFwgB,GAgBS,KAAA,UAAA,CAAA,KAAA,EAAA,UAAA,EAAb,YAAa,CAhBTA;AAAAA;AAAAA,uBAiBoB,KAAA,WAAA,CAAA,yBAAA,EAAxB,IAAwB,CAjBpBA;;AAAAA;AAiBEjB,gBAAAA,SAjBFiB;AAkBEjL,gBAAAA,GAlBFiL,GAkBQtO,MAAM,CAAA,SAAA,EAAlB,6BAAkB,CAlBdsO;;AAAAA,sBAmBA,WAAJ,GAnBIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAoBI,IAAA,KAAA,CACJ,mDACEF,YAAY,CADd,QACEA,EADF,GAAA,IAAA,GAGE/K,GAAG,CAAHA,KAAAA,CAJJ,OAAM,CApBJiL;;AAAAA;AAAAA,mDA2BGjL,GAAG,CAAV,MA3BIiL;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AA8BN;AACF;AACA;;;;;yFACQC,mBAAkB,MAAlBA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAGEC,gBAAAA,GAHFD,mCAGQ,MAHRA;AAKFzT,kBAAAA,UAAU,EAAG+S,MAAM,IAAIA,MAAM,CAAjB,UAACA,IAAgC,KAAK/S;AALhDyT;AAOEzgB,gBAAAA,IAPFygB,GAOSC,GAAG,CAAHA,MAAAA,IAAcA,GAAG,CAAjBA,UAAAA,GAA+B,CAA/BA,GAA+B,CAA/BA,GAAb,EAPID;AAAAA;AAAAA,uBAQoB,KAAA,WAAA,CAAA,oBAAA,EAAxB,IAAwB,CARpBA;;AAAAA;AAQElB,gBAAAA,SARFkB;AASElL,gBAAAA,GATFkL,GASQvO,MAAM,CAAA,SAAA,EAAlB,2BAAkB,CATduO;;AAAAA,sBAUA,WAAJ,GAVIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAWI,IAAA,KAAA,CAAU,qCAAqClL,GAAG,CAAHA,KAAAA,CAArD,OAAM,CAXJkL;;AAAAA;AAAAA,mDAaGlL,GAAG,CAAV,MAbIkL;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAgBN;AACF;AACA;AACA;;;;;8FACQE,mBAAuB,WAAvBA,EAAuB,UAAvBA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAIE3gB,gBAAAA,IAJF2gB,GAIS,KAAA,UAAA,CAAgB,CAACC,WAAW,CAA5B,QAAiBA,EAAD,CAAhB,EAAb,UAAa,CAJTD;AAAAA;AAAAA,uBAKoB,KAAA,WAAA,CAAA,yBAAA,EAAxB,IAAwB,CALpBA;;AAAAA;AAKEpB,gBAAAA,SALFoB;AAMEpL,gBAAAA,GANFoL,GAMQzO,MAAM,CAAA,SAAA,EAAlB,6BAAkB,CANdyO;;AAAAA,sBAOA,WAAJ,GAPIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAQI,IAAA,KAAA,CACJ,2CAA2CpL,GAAG,CAAHA,KAAAA,CAD7C,OAAM,CARJoL;;AAAAA;AAAAA,mDAYGpL,GAAG,CAAV,MAZIoL;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAeN;AACF;AACA;;;;;+FACQE,mBAAwB,SAAxBA,EAAwB,UAAxBA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAIE7gB,gBAAAA,IAJF6gB,GAIS,KAAA,UAAA,CAAgB,CAACzlB,SAAS,CAA1B,QAAiBA,EAAD,CAAhB,EAAA,UAAA,EAAb,QAAa,CAJTylB;AAAAA;AAAAA,uBAKoB,KAAA,WAAA,CAAA,gBAAA,EAAxB,IAAwB,CALpBA;;AAAAA;AAKEtB,gBAAAA,SALFsB;AAMEtL,gBAAAA,GANFsL,GAMQ3O,MAAM,CAAA,SAAA,EAEhB6B,uBAAuB,CAAClB,QAAQ,CAFlC,iBAEkC,CAAT,CAFP,CANdgO;;AAAAA,sBAUA,WAAJ,GAVIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAWI,IAAA,KAAA,CACJ,sCACEzlB,SAAS,CADX,QACEA,EADF,GAAA,IAAA,GAGEma,GAAG,CAAHA,KAAAA,CAJJ,OAAM,CAXJsL;;AAAAA;AAAAA,mDAkBGtL,GAAG,CAAV,MAlBIsL;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAqBN;AACF;AACA;;;;;2FACQC,mBAAoB,SAApBA,EAAoB,UAApBA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAME9gB,gBAAAA,IANF8gB,GAMS,KAAA,UAAA,CACX,CAAC1lB,SAAS,CADC,QACVA,EAAD,CADW,EAAA,UAAA,EAAb,YAAa,CANT0lB;AAAAA;AAAAA,uBAWoB,KAAA,WAAA,CAAA,gBAAA,EAAxB,IAAwB,CAXpBA;;AAAAA;AAWEvB,gBAAAA,SAXFuB;AAYEvL,gBAAAA,GAZFuL,GAYQ5O,MAAM,CAAA,SAAA,EAEhB6B,uBAAuB,CAAClB,QAAQ,CAFlC,uBAEkC,CAAT,CAFP,CAZdiO;;AAAAA,sBAgBA,WAAJ,GAhBIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAiBI,IAAA,KAAA,CACJ,sCACE1lB,SAAS,CADX,QACEA,EADF,GAAA,IAAA,GAGEma,GAAG,CAAHA,KAAAA,CAJJ,OAAM,CAjBJuL;;AAAAA;AAAAA,mDAwBGvL,GAAG,CAAV,MAxBIuL;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AA2BN;AACF;AACA;;;;;qFACQC,mBAAc,SAAdA,EAAc,UAAdA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,uBAKgB,KAAA,wBAAA,CAAA,SAAA,EAAlB,UAAkB,CALhBA;;AAAAA;AAKIxL,gBAAAA,GALJwL;AAAAA,mDAMKxL,GAAG,CAAV,KANEwL;;AAAAA;AAAAA;AAAAA;AAAAA,sBAQI,IAAA,KAAA,CACJ,sCAAsC3lB,SAAS,CAA/C,QAAsCA,EAAtC,GADF,IACE,gBADI,CARJ2lB;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAcN;AACF;AACA;;;;;wGACQC,mBAAiC,UAAjCA,EAAiC,UAAjCA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAIEjf,gBAAAA,IAJFif,GAISC,UAAU,CAAVA,GAAAA,CAAexmB,UAAAA,GAAG;AAAA,yBAAIA,GAAG,CAAtC,QAAmCA,EAAJ;AAAA,iBAAlBwmB,CAJTD;AAKEhhB,gBAAAA,IALFghB,GAKS,KAAA,UAAA,CAAgB,CAAhB,IAAgB,CAAhB,EAAA,UAAA,EAAb,QAAa,CALTA;AAAAA;AAAAA,uBAMoB,KAAA,WAAA,CAAA,qBAAA,EAAxB,IAAwB,CANpBA;;AAAAA;AAMEzB,gBAAAA,SANFyB;AAOEzL,gBAAAA,GAPFyL,GAOQ9O,MAAM,CAAA,SAAA,EAEhB6B,uBAAuB,CAAC5G,KAAK,CAAC0F,QAAQ,CAFxC,iBAEwC,CAAT,CAAN,CAFP,CAPdmO;;AAAAA,sBAWA,WAAJ,GAXIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAYI,IAAA,KAAA,CACJ,qCAAA,IAAA,GAAA,IAAA,GAAmDzL,GAAG,CAAHA,KAAAA,CADrD,OAAM,CAZJyL;;AAAAA;AAAAA,mDAgBGzL,GAAG,CAAV,MAhBIyL;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAmBN;AACF;AACA;;;;;8FACQE,mBAAuB,UAAvBA,EAAuB,UAAvBA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,uBAIc,KAAA,iCAAA,CAAA,UAAA,EAAlB,UAAkB,CAJdA;;AAAAA;AAIE3L,gBAAAA,GAJF2L;AAAAA,mDAQG3L,GAAG,CAAV,KARI2L;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAWN;AACF;AACA;;;;;yFACQC,mBAAkB,SAAlBA,EAAkB,UAAlBA,EAAkB,KAAlBA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAKEnhB,gBAAAA,IALFmhB,GAKS,KAAA,UAAA,CACX,CAAC/lB,SAAS,CADC,QACVA,EAAD,CADW,EAAA,UAAA,EAAA,SAAA,EAIX,KAAK,KAAL,SAAA,GAAsB;AAACmU,kBAAAA,KAAAA,EAAAA;AAAD,iBAAtB,GAJF,SAAa,CALT4R;AAAAA;AAAAA,uBAYoB,KAAA,WAAA,CAAA,oBAAA,EAAxB,IAAwB,CAZpBA;;AAAAA;AAYE5B,gBAAAA,SAZF4B;AAaE5L,gBAAAA,GAbF4L,GAaQjP,MAAM,CAAA,SAAA,EAAYC,aAAa,CAA3C,qBAA2C,CAAzB,CAbdgP;;AAAAA,sBAcA,WAAJ,GAdIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAeI,IAAA,KAAA,0CAC8B/lB,SAAS,CAATA,QAAAA,EAD9B,eAEFma,GAAG,CAAHA,KAAAA,CAFJ,OAAM,EAfJ4L;;AAAAA;AAAAA,mDAqBG5L,GAAG,CAAV,MArBI4L;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAwBN;AACF;AACA;AACA;AACA;;;;;yFACQC,mBAAkB,SAAlBA,EAAkB,kBAAlBA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAIEC,gBAAAA,KAJFD,GAIJ,EAJIA;;AAQJ,oBAAA,kBAAA,EAAwB;AACtB,sBAAI,OAAA,kBAAA,KAAJ,QAAA,EAA4C;AAC1CpU,oBAAAA,UAAU,GAAVA,kBAAAA;AADF,mBAAA,MAEO;AACLA,oBAAAA,UAAU,GAAGsU,kBAAkB,CAA/BtU,UAAAA;AACAuU,oBAAAA,QAAQ,GAAGD,kBAAkB,CAA7BC,QAAAA;;AAEA,wBAAID,kBAAkB,CAAtB,SAAA,EAAkC;AAChCD,sBAAAA,KAAK,CAALA,SAAAA,GAAkBC,kBAAkB,CAApCD,SAAAA;AACD;;AACD,wBAAIC,kBAAkB,CAAtB,OAAA,EAAgC;AAC9BD,sBAAAA,KAAK,CAALA,OAAAA,GAAgBC,kBAAkB,CAAlCD,OAAAA;AACD;AACF;AACF;;AAEKrhB,gBAAAA,IAxBFohB,GAwBS,KAAA,UAAA,CACX,CAACtlB,SAAS,CADC,QACVA,EAAD,CADW,EAAA,UAAA,EAGXylB,QAAQ,IAHG,QAAA,EAAb,KAAa,CAxBTH;AAAAA;AAAAA,uBA8BoB,KAAA,WAAA,CAAA,oBAAA,EAAxB,IAAwB,CA9BpBA;;AAAAA;AA8BE7B,gBAAAA,SA9BF6B;AA+BE7L,gBAAAA,GA/BF6L,GA+BQlP,MAAM,CAAA,SAAA,EAAYC,aAAa,CAAChF,KAAK,CAAjD,sBAAiD,CAAN,CAAzB,CA/BdiU;;AAAAA,sBAgCA,WAAJ,GAhCIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAiCI,IAAA,KAAA,CACJ,6CACEtlB,SAAS,CADX,QACEA,EADF,GAAA,IAAA,GAGEyZ,GAAG,CAAHA,KAAAA,CAJJ,OAAM,CAjCJ6L;;AAAAA;AAAAA,mDAwCG7L,GAAG,CAAV,MAxCI6L;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AA2CN;AACF;AACA;AACA;AACA;;;;;+FACQI,mBAAwB,SAAxBA,EAAwB,kBAAxBA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AASEH,gBAAAA,KATFG,GASJ,EATIA;;AAYJ,oBAAA,kBAAA,EAAwB;AACtB,sBAAI,OAAA,kBAAA,KAAJ,QAAA,EAA4C;AAC1CxU,oBAAAA,UAAU,GAAVA,kBAAAA;AADF,mBAAA,MAEO;AACLA,oBAAAA,UAAU,GAAGsU,kBAAkB,CAA/BtU,UAAAA;;AAEA,wBAAIsU,kBAAkB,CAAtB,OAAA,EAAgC;AAC9BD,sBAAAA,KAAK,CAALA,OAAAA,GAAgBC,kBAAkB,CAAlCD,OAAAA;AACD;AACF;AACF;;AAEKrhB,gBAAAA,IAxBFwhB,GAwBS,KAAA,UAAA,CACX,CAAC1lB,SAAS,CADC,QACVA,EAAD,CADW,EAAA,UAAA,EAAA,YAAA,EAAb,KAAa,CAxBT0lB;AAAAA;AAAAA,uBA8BoB,KAAA,WAAA,CAAA,oBAAA,EAAxB,IAAwB,CA9BpBA;;AAAAA;AA8BEjC,gBAAAA,SA9BFiC;AA+BEjM,gBAAAA,GA/BFiM,GA+BQtP,MAAM,CAAA,SAAA,EAEhBC,aAAa,CAAChF,KAAK,CAFrB,4BAEqB,CAAN,CAFG,CA/BdqU;;AAAAA,sBAmCA,WAAJ,GAnCIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAoCI,IAAA,KAAA,CACJ,6CACE1lB,SAAS,CADX,QACEA,EADF,GAAA,IAAA,GAGEyZ,GAAG,CAAHA,KAAAA,CAJJ,OAAM,CApCJiM;;AAAAA;AAAAA,mDA2CGjM,GAAG,CAAV,MA3CIiM;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;QA0DN;;;;;yFACMC,mBAAkB,QAAlBA,EAAkB,UAAlBA;AAAAA;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAQJ,oBAAI,OAAA,QAAA,IAAJ,QAAA,EAAiC;AAC/BC,kBAAAA,YAAY,GAAZA,QAAAA;AADF,iBAAA,MAEO;AACC3B,kBAAAA,MADD,GACL,QADK;AAGL2B,kBAAAA,YAAY,GAAG3B,MAAM,CAArB2B,SAAAA;AACD;;AAdGD;AAmBFE,gBAAAA,gBAAgB,GAAG1mB,IAAI,CAAJA,MAAAA,CAAnB0mB,YAAmB1mB,CAAnB0mB;AAnBEF;AAAAA;;AAAAA;AAAAA;AAAAA;AAAAA,sBAqBI,IAAA,KAAA,CAAU,uCAAhB,YAAM,CArBJA;;AAAAA;AAwBJ/pB,gBAAAA,MAAM,CAACiqB,gBAAgB,CAAhBA,MAAAA,KAAD,EAAA,EAANjqB,8BAAM,CAANA;AAEMkqB,gBAAAA,sBA1BFH,GA0B2BzU,UAAU,IAAI,KAA7C,UA1BIyU;AA6BAI,gBAAAA,IA7BAJ,GA6BJ,KA7BIA;AA+BEK,gBAAAA,mBA/BFL,GA+BwB,IAAA,OAAA,CAGzB,UAAA,OAAA,EAAA,MAAA,EAAqB;AACtB,sBAAI;AACFM,oBAAAA,cAAc,GAAG,OAAKC,CAAL,WAAA,CAAA,YAAA,EAEf,UAAA,MAAA,EAAA,OAAA,EAA+C;AAC7CD,sBAAAA,cAAc,GAAdA,SAAAA;AACA,0BAAME,QAAQ,GAAG;AACf7P,wBAAAA,OADe,EACfA,OADe;AAEfxX,wBAAAA,KAAK,EAAE8W;AAFQ,uBAAjB;AAIAmQ,sBAAAA,IAAI,GAAJA,IAAAA;AACAta,sBAAAA,OAAO,CAAC;AAAC2a,wBAAAA,MAAM,EAAE1f,iBAAiB,CAA1B,SAAA;AAAsCyf,wBAAAA,QAAAA,EAAAA;AAAtC,uBAAD,CAAP1a;AATa,qBAAA,EAAjBwa,sBAAiB,CAAjBA;AADF,mBAAA,CAcE,OAAA,GAAA,EAAY;AACZjN,oBAAAA,MAAM,CAANA,GAAM,CAANA;AACD;AApBH,iBAA4B,CA/BxB2M;;AAsDEU,gBAAAA,gBAtDFV;AAAAA,uFAsDqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAEK,OAAA,CAAA,cAAA,CAA1B,UAA0B,CAFL;;AAAA;AAEfrO,4BAAAA,WAFe;AAAA,+DAGrB,WAHqB;;AAAA;AAAA;AAAA;AAAA,+DAKd,CAAP,CALqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAtDrBqO;;AAAAA,kCAsDEU,gBAtDFV;AAAAA;AAAAA;AAAAA;;AA+DEW,gBAAAA,aA/DFX,GA+DkB,IAAA,OAAA,CAGpBla,UAAAA,OAAO,EAAI;AACX,sBAAI,OAAA,QAAA,KAAJ,QAAA,EAAkC;AAChC,wBAAI8a,SAAS,GAAG,OAAA,CAAA,iCAAA,IAA0C,KAA1D,IAAA;;AACA,4BAAA,sBAAA;AACE,2BAAA,WAAA;AACA,2BAAA,QAAA;AACA,2BAAA,QAAA;AACA,2BAAA,WAAA;AACA,2BAAA,cAAA;AAAqB;AACnBA,0BAAAA,SAAS,GAAG,OAAA,CAAA,iCAAA,IAA0C,KAAtDA,IAAAA;AACA;AACD;AARH;;AAeAC,oBAAAA,SAAS,GAAG9a,UAAU,CACpB;AAAA,6BAAMD,OAAO,CAAC;AAAC2a,wBAAAA,MAAM,EAAE1f,iBAAiB,CAA1B,SAAA;AAAsC6f,wBAAAA,SAAAA,EAAAA;AAAtC,uBAAD,CAAb;AAAA,qBADoB,EAAtBC,SAAsB,CAAtBA;AAjBF,mBAAA,MAqBO;AACL,wBAAIvC,OAAM,GAAV,QAAA;;AAEA,6EAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCACgCoC,gBAA/B,EADD;;AAAA;AACKI,8BAAAA,kBADL;;AAAA,mCAEC,IAFD;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,oCAGQA,kBAAkB,IAAIxC,OAAM,CAAnC,oBAHD;AAAA;AAAA;AAAA;;AAAA;AAAA,qCAISvS,KAAK,CAAX,IAAW,CAJd;;AAAA;AAAA,mCAKG,IALH;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,qCAM8B2U,gBAA3BI,EANH;;AAAA;AAMGA,8BAAAA,kBANH;;AAAA,mCAOG,IAPH;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AASChb,8BAAAA,OAAO,CAAC;AAAC2a,gCAAAA,MAAM,EAAE1f,iBAAiB,CAACggB;AAA3B,+BAAD,CAAPjb;;AATD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAD;AAWD;AAvCH,iBAAsB,CA/DlBka;AAAAA;AAAAA;AAAAA,uBA2GoBhU,OAAO,CAAPA,IAAAA,CAAa,CAAA,mBAAA,EAAnC,aAAmC,CAAbA,CA3GpBgU;;AAAAA;AA2GIgB,gBAAAA,OA3GJhB;AAAAA,gCA4GMgB,OAAO,CAAf,MA5GEhB;AAAAA,oDA6GKjf,iBAAiB,CAAtB,oBA7GAif,0BA+GKjf,iBAAiB,CAAtB,SA/GAif,0BAkHKjf,iBAAiB,CAAtB,SAlHAif;AAAAA;;AAAAA;AAAAA,sBA8GQ,IAAA,0CAAA,CAAN,YAAM,CA9GRA;;AAAAA;AAgHE/P,gBAAAA,MAAM,GAAG+Q,OAAO,CAAhB/Q,QAAAA;AAhHF+P;;AAAAA;AAAAA,sBAmHQ,IAAA,8BAAA,CAAA,YAAA,EAEJgB,OAAO,CAAPA,SAAAA,GAFF,IAAM,CAnHRhB;;AAAAA;AAAAA;AAyHFiB,gBAAAA,YAAY,CAAZA,SAAY,CAAZA;;AACA,oBAAA,cAAA,EAAoB;AAClB,uBAAA,uBAAA,CAAA,cAAA;AACD;;AA5HCjB;;AAAAA;AAAAA,mDA8HJ,MA9HIA;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAiIN;AACF;AACA;;;;;sFACQkB;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,uBACoB,KAAA,WAAA,CAAA,iBAAA,EAAxB,EAAwB,CADpBA;;AAAAA;AACEpD,gBAAAA,SADFoD;AAEEpN,gBAAAA,GAFFoN,GAEQzQ,MAAM,CAAA,SAAA,EAAYC,aAAa,CAAChF,KAAK,CAAjD,iBAAiD,CAAN,CAAzB,CAFdwV;;AAAAA,sBAGA,WAAJ,GAHIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAII,IAAA,KAAA,CAAU,kCAAkCpN,GAAG,CAAHA,KAAAA,CAAlD,OAAM,CAJJoN;;AAAAA;AAAAA,mDAMGpN,GAAG,CAAV,MANIoN;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AASN;AACF;AACA;;;;;sFACQC,mBAAe,UAAfA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AACE5iB,gBAAAA,IADF4iB,GACS,KAAA,UAAA,CAAA,EAAA,EAAb,UAAa,CADTA;AAAAA;AAAAA,uBAEoB,KAAA,WAAA,CAAA,iBAAA,EAAxB,IAAwB,CAFpBA;;AAAAA;AAEErD,gBAAAA,SAFFqD;AAGErN,gBAAAA,GAHFqN,GAGQ1Q,MAAM,CAAA,SAAA,EAAlB,eAAkB,CAHd0Q;;AAAAA,sBAIA,WAAJ,GAJIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAKI,IAAA,KAAA,CAAU,kCAAkCrN,GAAG,CAAHA,KAAAA,CAAlD,OAAM,CALJqN;;AAAAA;AAAAA,mDAOGrN,GAAG,CAAV,MAPIqN;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAUN;AACF;AACA;;;;;8EACQC,mBAAO,UAAPA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AACE7iB,gBAAAA,IADF6iB,GACS,KAAA,UAAA,CAAA,EAAA,EAAb,UAAa,CADTA;AAAAA;AAAAA,uBAEoB,KAAA,WAAA,CAAA,SAAA,EAAxB,IAAwB,CAFpBA;;AAAAA;AAEEtD,gBAAAA,SAFFsD;AAGEtN,gBAAAA,GAHFsN,GAGQ3Q,MAAM,CAAA,SAAA,EAAYC,aAAa,CAACE,MAA5C,EAA2C,CAAzB,CAHdwQ;;AAAAA,sBAIA,WAAJ,GAJIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAKI,IAAA,KAAA,CAAU,yBAAyBtN,GAAG,CAAHA,KAAAA,CAAzC,OAAM,CALJsN;;AAAAA;AAAAA,mDAOGtN,GAAG,CAAV,MAPIsN;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAUN;AACF;AACA;;;;;oFACQC,mBAAa,UAAbA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AACE9iB,gBAAAA,IADF8iB,GACS,KAAA,UAAA,CAAA,EAAA,EAAb,UAAa,CADTA;AAAAA;AAAAA,uBAEoB,KAAA,WAAA,CAAA,eAAA,EAAxB,IAAwB,CAFpBA;;AAAAA;AAEEvD,gBAAAA,SAFFuD;AAGEvN,gBAAAA,GAHFuN,GAGQ5Q,MAAM,CAAA,SAAA,EAAYC,aAAa,CAACnB,MAA5C,EAA2C,CAAzB,CAHd8R;;AAAAA,sBAIA,WAAJ,GAJIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAKI,IAAA,KAAA,CAAU,gCAAgCvN,GAAG,CAAHA,KAAAA,CAAhD,OAAM,CALJuN;;AAAAA;AAAAA,mDAOGvN,GAAG,CAAV,MAPIuN;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAUN;AACF;AACA;AACA;AACA;AACA;;;;;qFACQC,mBAAc,SAAdA,EAAc,KAAdA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAIE/iB,gBAAAA,IAJF+iB,GAIS,CAAA,SAAA,EAAb,KAAa,CAJTA;AAAAA;AAAAA,uBAKoB,KAAA,WAAA,CAAA,gBAAA,EAAxB,IAAwB,CALpBA;;AAAAA;AAKExD,gBAAAA,SALFwD;AAMExN,gBAAAA,GANFwN,GAMQ7Q,MAAM,CAAA,SAAA,EAAYC,aAAa,CAAChF,KAAK,CAAjD,mBAAiD,CAAN,CAAzB,CANd4V;;AAAAA,sBAOA,WAAJ,GAPIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAQI,IAAA,KAAA,CAAU,iCAAiCxN,GAAG,CAAHA,KAAAA,CAAjD,OAAM,CARJwN;;AAAAA;AAAAA,mDAUGxN,GAAG,CAAV,MAVIwN;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAaN;AACF;AACA;;;;;yFACQC,mBAAkB,SAAlBA,EAAkB,MAAlBA;AAAAA;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,uBAImC,KAAA,oBAAA,CACrC,CADqC,SACrC,CADqC,EAAvC,MAAuC,CAJnCA;;AAAAA;AAAAA;AAIE,gBAAA,OAJFA,yBAIE,OAJFA;AAImBC,gBAAAA,MAJnBD,yBAIYpoB,KAJZooB;AAQJtrB,gBAAAA,MAAM,CAACurB,MAAM,CAANA,MAAAA,KAAPvrB,CAAM,CAANA;AACMkD,gBAAAA,KATFooB,GASUC,MAAM,CAApB,CAAoB,CAThBD;AAAAA,mDAUG;AAAC5Q,kBAAAA,OAAD,EAACA,OAAD;AAAUxX,kBAAAA,KAAAA,EAAAA;AAAV,iBAVHooB;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAaN;AACF;AACA;;;;;2FACQE,mBAAoB,UAApBA,EAAoB,MAApBA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAIE3X,gBAAAA,MAJF2X,GAIkB,CAAtB,UAAsB,CAJlBA;;AAKJ,oBAAA,MAAA,EAAY;AACV3X,kBAAAA,MAAM,CAANA,IAAAA,CAAAA,MAAAA;AACD;;AAPG2X;AAAAA,uBAQoB,KAAA,WAAA,CAAA,sBAAA,EAAxB,MAAwB,CARpBA;;AAAAA;AAQE3D,gBAAAA,SARF2D;AASE3N,gBAAAA,GATF2N,GASQhR,MAAM,CAAA,SAAA,EAAlB,6BAAkB,CATdgR;;AAAAA,sBAUA,WAAJ,GAVIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAWI,IAAA,KAAA,CAAU,qCAAqC3N,GAAG,CAAHA,KAAAA,CAArD,OAAM,CAXJ2N;;AAAAA;AAAAA,mDAaG3N,GAAG,CAAV,MAbI2N;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAgBN;AACF;AACA;;;;;0FACQC,mBAAmB,UAAnBA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AACEnjB,gBAAAA,IADFmjB,GACS,KAAA,UAAA,CAAA,EAAA,EAAb,UAAa,CADTA;AAAAA;AAAAA,uBAEoB,KAAA,WAAA,CAAA,qBAAA,EAAxB,IAAwB,CAFpBA;;AAAAA;AAEE5D,gBAAAA,SAFF4D;AAGE5N,gBAAAA,GAHF4N,GAGQjR,MAAM,CAAA,SAAA,EAAYC,aAAa,CAACE,MAA5C,EAA2C,CAAzB,CAHd8Q;;AAAAA,sBAIA,WAAJ,GAJIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAKI,IAAA,KAAA,CAAU,sCAAsC5N,GAAG,CAAHA,KAAAA,CAAtD,OAAM,CALJ4N;;AAAAA;AAAAA,mDAOG5N,GAAG,CAAV,MAPI4N;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAUN;AACF;AACA;AACA;AACA;;;;;qFACQC,mBAAc,UAAdA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,uBACiB,KAAA,SAAA,CAAe;AAClCpW,kBAAAA,UADkC,EAClCA,UADkC;AAElCqW,kBAAAA,iCAAiC,EAAE;AAFD,iBAAf,CADjBD;;AAAAA;AACE1R,gBAAAA,MADF0R;AAAAA,mDAKG1R,MAAM,CAANA,KAAAA,CAAP,KALI0R;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAQN;AACF;AACA;;;;;2FACQE,mBAAoB,UAApBA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAGEtjB,gBAAAA,IAHFsjB,GAGS,KAAA,UAAA,CAAA,EAAA,EAAb,UAAa,CAHTA;AAAAA;AAAAA,uBAIoB,KAAA,WAAA,CAAA,sBAAA,EAAxB,IAAwB,CAJpBA;;AAAAA;AAIE/D,gBAAAA,SAJF+D;AAKE/N,gBAAAA,GALF+N,GAKQpR,MAAM,CAAA,SAAA,EAAlB,6BAAkB,CALdoR;;AAAAA,sBAMA,WAAJ,GANIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAOI,IAAA,KAAA,CAAU,8BAA8B/N,GAAG,CAAHA,KAAAA,CAA9C,OAAM,CAPJ+N;;AAAAA;AAAAA,mDASG/N,GAAG,CAAV,MATI+N;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAYN;AACF;AACA;;;;;yFACQC,mBAAkB,SAAlBA,EAAkB,KAAlBA,EAAkB,UAAlBA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAKEvjB,gBAAAA,IALFujB,GAKS,KAAA,UAAA,CACX,CAACC,SAAS,CAATA,GAAAA,CAAc1mB,UAAAA,MAAM;AAAA,yBAAIA,MAAM,CADpB,QACcA,EAAJ;AAAA,iBAApB0mB,CAAD,CADW,EAAA,UAAA,EAAA,SAAA,EAIX;AACEjU,kBAAAA,KAAAA,EAAAA;AADF,iBAJW,CALTgU;AAAAA;AAAAA,uBAaoB,KAAA,WAAA,CAAA,oBAAA,EAAxB,IAAwB,CAbpBA;;AAAAA;AAaEhE,gBAAAA,SAbFgE;AAcEhO,gBAAAA,GAdFgO,GAcQrR,MAAM,CAAA,SAAA,EAAlB,wBAAkB,CAddqR;;AAAAA,sBAeA,WAAJ,GAfIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAgBI,IAAA,KAAA,CAAU,qCAAqChO,GAAG,CAAHA,KAAAA,CAArD,OAAM,CAhBJgO;;AAAAA;AAAAA,mDAkBGhO,GAAG,CAAV,MAlBIgO;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAqBN;AACF;AACA;;;;;mFACQE,mBAAY,UAAZA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AACEzjB,gBAAAA,IADFyjB,GACS,KAAA,UAAA,CAAA,EAAA,EAAb,UAAa,CADTA;AAAAA;AAAAA,uBAEoB,KAAA,WAAA,CAAA,cAAA,EAAxB,IAAwB,CAFpBA;;AAAAA;AAEElE,gBAAAA,SAFFkE;AAGElO,gBAAAA,GAHFkO,GAGQvR,MAAM,CAAA,SAAA,EAAlB,qBAAkB,CAHduR;;AAAAA,sBAIA,WAAJ,GAJIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAKI,IAAA,KAAA,CAAU,+BAA+BlO,GAAG,CAAHA,KAAAA,CAA/C,OAAM,CALJkO;;AAAAA;AAAAA,mDAOGlO,GAAG,CAAV,MAPIkO;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAUN;AACF;AACA;;;;;uFACQC;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,uBACoB,KAAA,WAAA,CAAA,kBAAA,EAAxB,EAAwB,CADpBA;;AAAAA;AACEnE,gBAAAA,SADFmE;AAEEnO,gBAAAA,GAFFmO,GAEQxR,MAAM,CAAA,SAAA,EAAlB,yBAAkB,CAFdwR;;AAAAA,sBAGA,WAAJ,GAHIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAII,IAAA,KAAA,CAAU,mCAAmCnO,GAAG,CAAHA,KAAAA,CAAnD,OAAM,CAJJmO;;AAAAA;AAMEC,gBAAAA,aANFD,GAMkBnO,GAAG,CAAzB,MANImO;AAAAA,mDAOG,IAAA,aAAA,CACLC,aAAa,CADR,aAAA,EAELA,aAAa,CAFR,wBAAA,EAGLA,aAAa,CAHR,MAAA,EAILA,aAAa,CAJR,gBAAA,EAKLA,aAAa,CALf,eAAO,CAPHD;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAgBN;AACF;AACA;AACA;;;;;wFACQE;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,uBACoB,KAAA,WAAA,CAAA,mBAAA,EAAxB,EAAwB,CADpBA;;AAAAA;AACErE,gBAAAA,SADFqE;AAEErO,gBAAAA,GAFFqO,GAEQ1R,MAAM,CAAA,SAAA,EAAlB,0BAAkB,CAFd0R;;AAAAA,sBAGA,WAAJ,GAHIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAII,IAAA,KAAA,CAAU,oCAAoCrO,GAAG,CAAHA,KAAAA,CAApD,OAAM,CAJJqO;;AAAAA;AAAAA,mDAMGrO,GAAG,CAAV,MANIqO;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AASN;AACF;AACA;AACA;;;;;wGACQC,mBAAiC,UAAjCA,EAAiC,UAAjCA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAIE7jB,gBAAAA,IAJF6jB,GAIS,KAAA,UAAA,CAAgB,CAAhB,UAAgB,CAAhB,EAAb,UAAa,CAJTA;AAAAA;AAAAA,uBAKoB,KAAA,WAAA,CAAA,mCAAA,EAAxB,IAAwB,CALpBA;;AAAAA;AAKEtE,gBAAAA,SALFsE;AASEtO,gBAAAA,GATFsO,GASQ3R,MAAM,CAAA,SAAA,EAAlB,0CAAkB,CATd2R;;AAAAA,sBAUA,WAAJ,GAVIA;AAAAA;AAAAA;AAAAA;;AAWFjgB,gBAAAA,OAAO,CAAPA,IAAAA,CAAAA,oDAAAA;AAXEigB,mDAYF,CAZEA;;AAAAA;AAAAA,mDAcGtO,GAAG,CAAV,MAdIsO;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAiBN;AACF;AACA;AACA;AACA;AACA;;;;;mGACQC,mBAA4B,UAA5BA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAKE9jB,gBAAAA,IALF8jB,GAKS,KAAA,UAAA,CAAA,EAAA,EAAb,UAAa,CALTA;AAAAA;AAAAA,uBAMoB,KAAA,WAAA,CAAA,oBAAA,EAAxB,IAAwB,CANpBA;;AAAAA;AAMEvE,gBAAAA,SANFuE;AAOEvO,gBAAAA,GAPFuO,GAOQ5R,MAAM,CAAA,SAAA,EAAlB,qCAAkB,CAPd4R;;AAAAA,sBAQA,WAAJ,GARIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBASI,IAAA,KAAA,CAAU,qCAAqCvO,GAAG,CAAHA,KAAAA,CAArD,OAAM,CATJuO;;AAAAA;AAAAA,mDAWGvO,GAAG,CAAV,MAXIuO;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAcN;AACF;AACA;AACA;;;;;kGACQC,mBAA2B,KAA3BA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAGE/jB,gBAAAA,IAHF+jB,GAGS,KAAA,UAAA,CAAgBC,KAAK,GAAG,CAAH,KAAG,CAAH,GAAlC,EAAa,CAHTD;AAAAA;AAAAA,uBAIoB,KAAA,WAAA,CAAA,6BAAA,EAAxB,IAAwB,CAJpBA;;AAAAA;AAIExE,gBAAAA,SAJFwE;AAQExO,gBAAAA,GARFwO,GAQQ7R,MAAM,CAAA,SAAA,EAAlB,oCAAkB,CARd6R;;AAAAA,sBASA,WAAJ,GATIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAUI,IAAA,KAAA,CACJ,+CAA+CxO,GAAG,CAAHA,KAAAA,CADjD,OAAM,CAVJwO;;AAAAA;AAAAA,mDAeGxO,GAAG,CAAV,MAfIwO;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAkBN;AACF;AACA;AACA;AACA;;;;;mGACQE,mBAA4B,SAA5BA,EAA4B,UAA5BA;AAAAA;;AAAAA;AAAAA;AAAAA;AAAAA;AAIEjkB,gBAAAA,IAJFikB,GAIS,KAAA,UAAA,CAAgB,CAAhB,SAAgB,CAAhB,EAAb,UAAa,CAJTA;AAAAA;AAAAA,uBAKoB,KAAA,WAAA,CAAA,8BAAA,EAAxB,IAAwB,CALpBA;;AAAAA;AAKE1E,gBAAAA,SALF0E;AAUE1O,gBAAAA,GAVF0O,GAUQ/R,MAAM,CAAA,SAAA,EAAlB,yBAAkB,CAVd+R;;AAAAA,sBAWA,WAAJ,GAXIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAYI,IAAA,KAAA,CAAU,mCAAmC1O,GAAG,CAAHA,KAAAA,CAAnD,OAAM,CAZJ0O;;AAAAA;AAAAA,8BAcqB1O,GAAG,CAA5B,MAdI0O,EAcE,OAdFA,eAcE,OAdFA,EAcYrpB,KAdZqpB,eAcYrpB,KAdZqpB;AAAAA,mDAeG;AACL7R,kBAAAA,OADK,EACLA,OADK;AAELxX,kBAAAA,KAAK,EAAEA,KAAK,KAALA,IAAAA,GAAiBA,KAAK,CAAtBA,aAAAA,GAAuC;AAFzC,iBAfHqpB;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAqBN;AACF;AACA;;;;;uFACQC,mBAAgB,OAAhBA,EAAgB,UAAhBA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAIEC,gBAAAA,WAJFD,GAIgB3hB,OAAO,CAAPA,SAAAA,GAAAA,QAAAA,CAApB,QAAoBA,CAJhB2hB;AAKElkB,gBAAAA,IALFkkB,GAKS,KAAA,UAAA,CAAgB,CAAhB,WAAgB,CAAhB,EAAb,UAAa,CALTA;AAAAA;AAAAA,uBAMoB,KAAA,WAAA,CAAA,kBAAA,EAAxB,IAAwB,CANpBA;;AAAAA;AAME3E,gBAAAA,SANF2E;AAQE3O,gBAAAA,GARF2O,GAQQhS,MAAM,CAAA,SAAA,EAAY6B,uBAAuB,CAAClB,QAAQ,CAACR,MAA/D,EAA8D,CAAT,CAAnC,CARd6R;;AAAAA,sBASA,WAAJ,GATIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAUI,IAAA,KAAA,CAAU,yBAAyB3O,GAAG,CAAHA,KAAAA,CAAzC,OAAM,CAVJ2O;;AAAAA;AAAAA,sBAYA3O,GAAG,CAAHA,MAAAA,KAAJ,IAZI2O;AAAAA;AAAAA;AAAAA;;AAAAA,sBAaI,IAAA,KAAA,CAAN,mBAAM,CAbJA;;AAAAA;AAAAA,mDAeG3O,GAAG,CAAV,MAfI2O;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAkBN;AACF;AACA;AACA;AACA;AACA;;;;;yFACQE,mBAAkB,UAAlBA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,uBAIgB,KAAA,4BAAA,CAAlB,UAAkB,CAJhBA;;AAAAA;AAII7O,gBAAAA,GAJJ6O;AAAAA,mDAKK7O,GAAG,CAAV,KALE6O;;AAAAA;AAAAA;AAAAA;AAAAA,sBAOI,IAAA,KAAA,CAAN,kDAAM,CAPJA;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAWN;AACF;AACA;AACA;;;;;yFACQC,mBAAkB,UAAlBA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,uBAIgB,KAAA,4BAAA,CAAlB,UAAkB,CAJhBA;;AAAAA;AAII9O,gBAAAA,GAJJ8O;AAAAA,mDAKK9O,GAAG,CAAV,KALE8O;;AAAAA;AAAAA;AAAAA;AAAAA,sBAOI,IAAA,KAAA,CAAN,kDAAM,CAPJA;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAWN;AACF;AACA;AACA;;;;;mGACQC,mBAA4B,UAA5BA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAGEtkB,gBAAAA,IAHFskB,GAGS,KAAA,UAAA,CAAA,EAAA,EAAb,UAAa,CAHTA;AAAAA;AAAAA,uBAIoB,KAAA,WAAA,CAAA,oBAAA,EAAxB,IAAwB,CAJpBA;;AAAAA;AAIE/E,gBAAAA,SAJF+E;AAKE/O,gBAAAA,GALF+O,GAKQpS,MAAM,CAAA,SAAA,EAAlB,2BAAkB,CALdoS;;AAAAA,sBAMA,WAAJ,GANIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAOI,IAAA,KAAA,CAAU,qCAAqC/O,GAAG,CAAHA,KAAAA,CAArD,OAAM,CAPJ+O;;AAAAA;AAAAA,mDASG/O,GAAG,CAAV,MATI+O;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAYN;AACF;AACA;;;;;iFACQC;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,uBACoB,KAAA,WAAA,CAAA,YAAA,EAAxB,EAAwB,CADpBA;;AAAAA;AACEhF,gBAAAA,SADFgF;AAEEhP,gBAAAA,GAFFgP,GAEQrS,MAAM,CAAA,SAAA,EAAYC,aAAa,CAA3C,aAA2C,CAAzB,CAFdoS;;AAAAA,sBAGA,WAAJ,GAHIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAII,IAAA,KAAA,CAAU,4BAA4BhP,GAAG,CAAHA,KAAAA,CAA5C,OAAM,CAJJgP;;AAAAA;AAAAA,mDAMGhP,GAAG,CAAV,MANIgP;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AASN;AACF;AACA;;;;;qFACQC;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,uBACoB,KAAA,WAAA,CAAA,gBAAA,EAAxB,EAAwB,CADpBA;;AAAAA;AACEjF,gBAAAA,SADFiF;AAEEjP,gBAAAA,GAFFiP,GAEQtS,MAAM,CAAA,SAAA,EAAYC,aAAa,CAACnB,MAA5C,EAA2C,CAAzB,CAFdwT;;AAAAA,sBAGA,WAAJ,GAHIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAII,IAAA,KAAA,CAAU,iCAAiCjP,GAAG,CAAHA,KAAAA,CAAjD,OAAM,CAJJiP;;AAAAA;AAAAA,mDAMGjP,GAAG,CAAV,MANIiP;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AASN;AACF;AACA;;;;;+EACQC,mBAAQ,IAARA,EAAQ,IAARA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAIEzkB,gBAAAA,IAJFykB,GAIS,KAAA,0BAAA,CACX,CADW,IACX,CADW,EAEX/hB,IAAI,IAAIA,IAAI,CAFd,UAAa,CAJT+hB;AAAAA;AAAAA,uBAQoB,KAAA,WAAA,CAAA,UAAA,EAAxB,IAAwB,CARpBA;;AAAAA;AAQElF,gBAAAA,SARFkF;AASElP,gBAAAA,GATFkP,GASQvS,MAAM,CAAA,SAAA,EAAlB,iBAAkB,CATduS;;AAAAA,sBAWA,WAAJ,GAXIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAYI,IAAA,KAAA,CAAU,oCAAoClP,GAAG,CAAHA,KAAAA,CAApD,OAAM,CAZJkP;;AAAAA;AAeE/S,gBAAAA,MAfF+S,GAeWlP,GAAG,CAAlB,MAfIkP;;AAAAA,oBAgBJ,MAhBIA;AAAAA;AAAAA;AAAAA;;AAAAA,mDAgBS,MAhBTA;;AAAAA;AAAAA,mFAkBG,MAlBHA;AAoBFrX,kBAAAA,YAAY,EAAE,MAAM,CAAN,YAAA,CAAA,GAAA,CAAwB,iBAAyB;AAAA,wBAAxB,WAAwB,SAAxB,WAAwB;AAAA,wBAAV5I,IAAU,SAAVA,IAAU;AAC7D,wBAAMjC,OAAO,GAAG,IAAA,OAAA,CAAYZ,WAAW,CAAvC,OAAgB,CAAhB;AACA,2BAAO;AACL6C,sBAAAA,IADK,EACLA,IADK;AAEL7C,sBAAAA,WAAW,kCAAE,WAAF;AAETY,wBAAAA,OAAAA,EAAAA;AAFS;AAFN,qBAAP;AAFY,mBAAA;AApBZkiB;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAiCN;AACF;AACA;;;;;qFACQC,mBAAc,UAAdA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AACE1kB,gBAAAA,IADF0kB,GACS,KAAA,UAAA,CAAA,EAAA,EAAb,UAAa,CADTA;AAAAA;AAAAA,uBAEoB,KAAA,WAAA,CAAA,gBAAA,EAAxB,IAAwB,CAFpBA;;AAAAA;AAEEnF,gBAAAA,SAFFmF;AAGEnP,gBAAAA,GAHFmP,GAGQxS,MAAM,CAAA,SAAA,EAAYC,aAAa,CAACE,MAA5C,EAA2C,CAAzB,CAHdqS;;AAAAA,sBAIA,WAAJ,GAJIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAKI,IAAA,KAAA,CACJ,6CAA6CnP,GAAG,CAAHA,KAAAA,CAD/C,OAAM,CALJmP;;AAAAA;AAAAA,mDAUGnP,GAAG,CAAV,MAVImP;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAaN;AACF;AACA;;;;;yFACQC,mBAAkB,kBAAlBA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAMJ,oBAAI,OAAA,kBAAA,KAAJ,QAAA,EAA4C;AAC1C3X,kBAAAA,UAAU,GAAVA,kBAAAA;AADF,iBAAA,MAEO,IAAA,kBAAA,EAAwB;AACvB,kBAAA,CADuB,GAC7B,kBAD6B,CACtBA,UADsB,EACJ4X,IADI,4BAC7B,kBAD6B;AAE7B5X,kBAAAA,UAAU,GAAVA,CAAAA;AACAqU,kBAAAA,KAAK,GAALA,IAAAA;AACD;;AAEKrhB,gBAAAA,IAdF2kB,GAcS,KAAA,UAAA,CAAA,EAAA,EAAA,UAAA,EAAA,QAAA,EAAb,KAAa,CAdTA;AAAAA;AAAAA,uBAeoB,KAAA,WAAA,CAAA,oBAAA,EAAxB,IAAwB,CAfpBA;;AAAAA;AAeEpF,gBAAAA,SAfFoF;AAgBEpP,gBAAAA,GAhBFoP,GAgBQzS,MAAM,CAAA,SAAA,EAAlB,6BAAkB,CAhBdyS;;AAAAA,sBAiBA,WAAJ,GAjBIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAkBI,IAAA,KAAA,CACJ,iDAAiDpP,GAAG,CAAHA,KAAAA,CADnD,OAAM,CAlBJoP;;AAAAA;AAAAA,mDAuBGpP,GAAG,CAAV,MAvBIoP;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AA0BN;AACF;AACA;;;;;qFACQE,mBAAc,SAAdA,EAAc,IAAdA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAIE7kB,gBAAAA,IAJF6kB,GAIS,KAAA,0BAAA,CACX,CADW,SACX,CADW,EAEXniB,IAAI,IAAIA,IAAI,CAFd,UAAa,CAJTmiB;AAAAA;AAAAA,uBAQoB,KAAA,WAAA,CAAA,gBAAA,EAAxB,IAAwB,CARpBA;;AAAAA;AAQEtF,gBAAAA,SARFsF;AASEtP,gBAAAA,GATFsP,GASQ3S,MAAM,CAAA,SAAA,EAAlB,uBAAkB,CATd2S;;AAAAA,sBAUA,WAAJ,GAVIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAWI,IAAA,KAAA,CAAU,gCAAgCtP,GAAG,CAAHA,KAAAA,CAAhD,OAAM,CAXJsP;;AAAAA;AAcEnT,gBAAAA,MAdFmT,GAcWtP,GAAG,CAAlB,MAdIsP;;AAAAA,oBAeJ,MAfIA;AAAAA;AAAAA;AAAAA;;AAAAA,mDAeS,MAfTA;;AAAAA;AAAAA,mFAiBG,MAjBHA;AAmBFljB,kBAAAA,WAAW,kCACN+P,MAAM,CADE,WAAF;AAETnP,oBAAAA,OAAO,EAAE,IAAA,OAAA,CAAYmP,MAAM,CAANA,WAAAA,CAAZ,OAAA;AAFA;AAnBTmT;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AA0BN;AACF;AACA;;;;;2FACQC,mBAAoB,SAApBA,EAAoB,UAApBA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAIE9kB,gBAAAA,IAJF8kB,GAIS,KAAA,0BAAA,CACX,CADW,SACX,CADW,EAAA,UAAA,EAAb,YAAa,CAJTA;AAAAA;AAAAA,uBASoB,KAAA,WAAA,CAAA,gBAAA,EAAxB,IAAwB,CATpBA;;AAAAA;AASEvF,gBAAAA,SATFuF;AAUEvP,gBAAAA,GAVFuP,GAUQ5S,MAAM,CAAA,SAAA,EAAlB,6BAAkB,CAVd4S;;AAAAA,sBAWA,WAAJ,GAXIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAYI,IAAA,KAAA,CAAU,gCAAgCvP,GAAG,CAAHA,KAAAA,CAAhD,OAAM,CAZJuP;;AAAAA;AAAAA,mDAcGvP,GAAG,CAAV,MAdIuP;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAiBN;AACF;AACA;;;;;4FACQC,mBAAqB,UAArBA,EAAqB,UAArBA;AAAAA;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAIEjP,gBAAAA,KAJFiP,GAIU,UAAU,CAAV,GAAA,CAAejiB,UAAAA,SAAS,EAAI;AACxC,sBAAM9C,IAAI,GAAG,OAAKglB,CAAL,0BAAA,CACX,CADW,SACX,CADW,EAAA,UAAA,EAAb,YAAa,CAAb;;AAKA,yBAAO;AACLC,oBAAAA,UAAU,EADL,gBAAA;AAELjlB,oBAAAA,IAAAA,EAAAA;AAFK,mBAAP;AANF,iBAAc,CAJV+kB;AAAAA;AAAAA,uBAgBoB,KAAA,gBAAA,CAAxB,KAAwB,CAhBpBA;;AAAAA;AAgBExF,gBAAAA,SAhBFwF;AAiBExP,gBAAAA,GAjBFwP,GAiBQ,SAAS,CAAT,GAAA,CAAexF,UAAAA,SAAD,EAAoB;AAC5C,sBAAMhK,GAAG,GAAGrD,MAAM,CAAA,SAAA,EAAlB,6BAAkB,CAAlB;;AACA,sBAAI,WAAJ,GAAA,EAAoB;AAClB,0BAAM,IAAA,KAAA,CAAU,iCAAiCqD,GAAG,CAAHA,KAAAA,CAAjD,OAAM,CAAN;AACD;;AACD,yBAAOA,GAAG,CAAV,MAAA;AALF,iBAAY,CAjBRwP;AAAAA,mDAyBJ,GAzBIA;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AA4BN;AACF;AACA;AACA;;;;;sFACQG,mBAAe,UAAfA,EAAe,UAAfA;AAAAA;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAIEpP,gBAAAA,KAJFoP,GAIU,UAAU,CAAV,GAAA,CAAepiB,UAAAA,SAAS,EAAI;AACxC,sBAAM9C,IAAI,GAAG,OAAA,CAAA,0BAAA,CAAgC,CAAhC,SAAgC,CAAhC,EAAb,UAAa,CAAb;;AACA,yBAAO;AACLilB,oBAAAA,UAAU,EADL,gBAAA;AAELjlB,oBAAAA,IAAAA,EAAAA;AAFK,mBAAP;AAFF,iBAAc,CAJVklB;AAAAA;AAAAA,uBAYoB,KAAA,gBAAA,CAAxB,KAAwB,CAZpBA;;AAAAA;AAYE3F,gBAAAA,SAZF2F;AAaE3P,gBAAAA,GAbF2P,GAaQ,SAAS,CAAT,GAAA,CAAe3F,UAAAA,SAAD,EAAoB;AAC5C,sBAAMhK,GAAG,GAAGrD,MAAM,CAAA,SAAA,EAAlB,uBAAkB,CAAlB;;AACA,sBAAI,WAAJ,GAAA,EAAoB;AAClB,0BAAM,IAAA,KAAA,CAAU,iCAAiCqD,GAAG,CAAHA,KAAAA,CAAjD,OAAM,CAAN;AACD;;AACD,yBAAOA,GAAG,CAAV,MAAA;AALF,iBAAY,CAbR2P;AAAAA,mDAqBJ,GArBIA;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAwBN;AACF;AACA;AACA;AACA;AACA;;;;;wFACQC,mBAAiB,IAAjBA,EAAiB,UAAjBA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAIEnlB,gBAAAA,IAJFmlB,GAIS,KAAA,0BAAA,CAAgC,CAAhC,IAAgC,CAAhC,EAAb,UAAa,CAJTA;AAAAA;AAAAA,uBAKoB,KAAA,WAAA,CAAA,mBAAA,EAAxB,IAAwB,CALpBA;;AAAAA;AAKE5F,gBAAAA,SALF4F;AAME5P,gBAAAA,GANF4P,GAMQjT,MAAM,CAAA,SAAA,EAAlB,0BAAkB,CANdiT;;AAAAA,sBAQA,WAAJ,GARIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBASI,IAAA,KAAA,CAAU,oCAAoC5P,GAAG,CAAHA,KAAAA,CAApD,OAAM,CATJ4P;;AAAAA;AAYEzT,gBAAAA,MAZFyT,GAYW5P,GAAG,CAAlB,MAZI4P;;AAAAA,oBAaJ,MAbIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAcI,IAAA,KAAA,CAAU,qBAAA,IAAA,GAAhB,YAAM,CAdJA;;AAAAA;AAiBEC,gBAAAA,KAjBFD,mCAiBU,MAjBVA;AAmBF/X,kBAAAA,YAAY,EAAE,MAAM,CAAN,YAAA,CAAA,GAAA,CAAwB,kBAAyB;AAAA,wBAAxB,WAAwB,UAAxB,WAAwB;AAAA,wBAAV5I,IAAU,UAAVA,IAAU;AAC7D,wBAAMjC,OAAO,GAAG,IAAA,OAAA,CAAYZ,WAAW,CAAvC,OAAgB,CAAhB;AACA,2BAAO;AACL6C,sBAAAA,IADK,EACLA,IADK;AAEL7C,sBAAAA,WAAW,kCAAE,WAAF;AAETY,wBAAAA,OAAAA,EAAAA;AAFS;AAFN,qBAAP;AAFY,mBAAA;AAnBZ4iB;AAAAA,mFA+BG,KA/BHA;AAiCF/X,kBAAAA,YAAY,EAAE,KAAK,CAAL,YAAA,CAAA,GAAA,CAAuB,kBAAyB;AAAA,wBAAxB,WAAwB,UAAxB,WAAwB;AAAA,wBAAV5I,IAAU,UAAVA,IAAU;AAC5D,2BAAO;AACLA,sBAAAA,IADK,EACLA,IADK;AAEL7C,sBAAAA,WAAW,EAAEwE,WAAW,CAAXA,QAAAA,CACXxE,WAAW,CADAwE,OAAAA,EAEXxE,WAAW,CAFAwE,UAAAA;AAFR,qBAAP;AADY,mBAAA;AAjCZgf;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AA6CN;AACF;AACA;;;;;gFACQE,mBAAS,SAATA,EAAS,OAATA,EAAS,UAATA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAKErlB,gBAAAA,IALFqlB,GAKS,KAAA,0BAAA,CACXC,OAAO,KAAPA,SAAAA,GAAwB,CAAA,SAAA,EAAxBA,OAAwB,CAAxBA,GAA+C,CADpC,SACoC,CADpC,EAAb,UAAa,CALTD;AAAAA;AAAAA,uBASoB,KAAA,WAAA,CAAA,WAAA,EAAxB,IAAwB,CATpBA;;AAAAA;AASE9F,gBAAAA,SATF8F;AAUE9P,gBAAAA,GAVF8P,GAUQnT,MAAM,CAAA,SAAA,EAAYC,aAAa,CAAChF,KAAK,CAACkF,MAAlD,EAAiD,CAAN,CAAzB,CAVdgT;;AAAAA,sBAWA,WAAJ,GAXIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAYI,IAAA,KAAA,CAAU,2BAA2B9P,GAAG,CAAHA,KAAAA,CAA3C,OAAM,CAZJ8P;;AAAAA;AAAAA,mDAcG9P,GAAG,CAAV,MAdI8P;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAiBN;AACF;AACA;;;;;yFACQE,mBAAkB,IAAlBA,EAAkB,UAAlBA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAIEvlB,gBAAAA,IAJFulB,GAIS,KAAA,0BAAA,CACX,CADW,IACX,CADW,EAAA,UAAA,EAAA,SAAA,EAIX;AACEC,kBAAAA,kBAAkB,EADpB,YAAA;AAEEvJ,kBAAAA,OAAO,EAAE;AAFX,iBAJW,CAJTsJ;AAAAA;AAAAA,uBAaoB,KAAA,WAAA,CAAA,UAAA,EAAxB,IAAwB,CAbpBA;;AAAAA;AAaEhG,gBAAAA,SAbFgG;AAcEhQ,gBAAAA,GAdFgQ,GAcQrT,MAAM,CAAA,SAAA,EAAlB,2BAAkB,CAddqT;;AAAAA,sBAeA,WAAJ,GAfIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAgBI,IAAA,KAAA,CAAU,0BAA0BhQ,GAAG,CAAHA,KAAAA,CAA1C,OAAM,CAhBJgQ;;AAAAA;AAkBE7T,gBAAAA,MAlBF6T,GAkBWhQ,GAAG,CAAlB,MAlBIgQ;;AAAAA,oBAmBJ,MAnBIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAoBI,IAAA,KAAA,CAAU,WAAA,IAAA,GAAhB,YAAM,CApBJA;;AAAAA;AAAAA,mDAsBJ,MAtBIA;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAyBN;AACF;AACA;AACA;AACA;;;;;kGACQE,mBAA2B,IAA3BA,EAA2B,UAA3BA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAIEzlB,gBAAAA,IAJFylB,GAIS,KAAA,0BAAA,CACX,CADW,IACX,CADW,EAAA,UAAA,EAAA,SAAA,EAIX;AACED,kBAAAA,kBAAkB,EADpB,YAAA;AAEEvJ,kBAAAA,OAAO,EAAE;AAFX,iBAJW,CAJTwJ;AAAAA;AAAAA,uBAaoB,KAAA,WAAA,CAAA,mBAAA,EAAxB,IAAwB,CAbpBA;;AAAAA;AAaElG,gBAAAA,SAbFkG;AAcElQ,gBAAAA,GAdFkQ,GAcQvT,MAAM,CAAA,SAAA,EAAlB,2BAAkB,CAdduT;;AAAAA,sBAeA,WAAJ,GAfIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAgBI,IAAA,KAAA,CAAU,oCAAoClQ,GAAG,CAAHA,KAAAA,CAApD,OAAM,CAhBJkQ;;AAAAA;AAkBE/T,gBAAAA,MAlBF+T,GAkBWlQ,GAAG,CAAlB,MAlBIkQ;;AAAAA,oBAmBJ,MAnBIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAoBI,IAAA,KAAA,CAAU,qBAAA,IAAA,GAAhB,YAAM,CApBJA;;AAAAA;AAAAA,mDAsBJ,MAtBIA;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAyBN;AACF;AACA;AACA;AACA;;;;;8FACQC,mBAAuB,SAAvBA,EAAuB,UAAvBA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAIE1lB,gBAAAA,IAJF0lB,GAIS,KAAA,0BAAA,CAAgC,CAAhC,SAAgC,CAAhC,EAAb,UAAa,CAJTA;AAAAA;AAAAA,uBAKoB,KAAA,WAAA,CAAA,yBAAA,EAAxB,IAAwB,CALpBA;;AAAAA;AAKEnG,gBAAAA,SALFmG;AAMEnQ,gBAAAA,GANFmQ,GAMQxT,MAAM,CAAA,SAAA,EAAlB,uBAAkB,CANdwT;;AAAAA,sBAOA,WAAJ,GAPIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAQI,IAAA,KAAA,CAAU,gCAAgCnQ,GAAG,CAAHA,KAAAA,CAAhD,OAAM,CARJmQ;;AAAAA;AAWEhU,gBAAAA,MAXFgU,GAWWnQ,GAAG,CAAlB,MAXImQ;;AAAAA,oBAYJ,MAZIA;AAAAA;AAAAA;AAAAA;;AAAAA,mDAYS,MAZTA;;AAAAA;AAcEnjB,gBAAAA,OAdFmjB,GAcY,IAAA,OAAA,CAAYhU,MAAM,CAANA,WAAAA,CAA5B,OAAgB,CAdZgU;AAeE7iB,gBAAAA,UAfF6iB,GAeehU,MAAM,CAANA,WAAAA,CAAnB,UAfIgU;AAAAA,mFAgBG,MAhBHA;AAkBF/jB,kBAAAA,WAAW,EAAEwE,WAAW,CAAXA,QAAAA,CAAAA,OAAAA,EAAAA,UAAAA;AAlBXuf;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAsBN;AACF;AACA;AACA;AACA;;;;;oGACQC,mBAA6B,SAA7BA,EAA6B,UAA7BA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAIE3lB,gBAAAA,IAJF2lB,GAIS,KAAA,0BAAA,CACX,CADW,SACX,CADW,EAAA,UAAA,EAAb,YAAa,CAJTA;AAAAA;AAAAA,uBASoB,KAAA,WAAA,CAAA,yBAAA,EAAxB,IAAwB,CATpBA;;AAAAA;AASEpG,gBAAAA,SATFoG;AAUEpQ,gBAAAA,GAVFoQ,GAUQzT,MAAM,CAAA,SAAA,EAAlB,6BAAkB,CAVdyT;;AAAAA,sBAWA,WAAJ,GAXIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAYI,IAAA,KAAA,CACJ,0CAA0CpQ,GAAG,CAAHA,KAAAA,CAD5C,OAAM,CAZJoQ;;AAAAA;AAAAA,mDAgBGpQ,GAAG,CAAV,MAhBIoQ;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAmBN;AACF;AACA;AACA;AACA;;;;;qGACQC,mBAA8B,UAA9BA,EAA8B,UAA9BA;AAAAA;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAIE9P,gBAAAA,KAJF8P,GAIU,UAAU,CAAV,GAAA,CAAe9iB,UAAAA,SAAS,EAAI;AACxC,sBAAM9C,IAAI,GAAG,OAAKglB,CAAL,0BAAA,CACX,CADW,SACX,CADW,EAAA,UAAA,EAAb,YAAa,CAAb;;AAKA,yBAAO;AACLC,oBAAAA,UAAU,EADL,yBAAA;AAELjlB,oBAAAA,IAAAA,EAAAA;AAFK,mBAAP;AANF,iBAAc,CAJV4lB;AAAAA;AAAAA,uBAgBoB,KAAA,gBAAA,CAAxB,KAAwB,CAhBpBA;;AAAAA;AAgBErG,gBAAAA,SAhBFqG;AAiBErQ,gBAAAA,GAjBFqQ,GAiBQ,SAAS,CAAT,GAAA,CAAerG,UAAAA,SAAD,EAAoB;AAC5C,sBAAMhK,GAAG,GAAGrD,MAAM,CAAA,SAAA,EAAlB,6BAAkB,CAAlB;;AACA,sBAAI,WAAJ,GAAA,EAAoB;AAClB,0BAAM,IAAA,KAAA,CACJ,2CAA2CqD,GAAG,CAAHA,KAAAA,CAD7C,OAAM,CAAN;AAGD;;AACD,yBAAOA,GAAG,CAAV,MAAA;AAPF,iBAAY,CAjBRqQ;AAAAA,mDA2BJ,GA3BIA;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AA8BN;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;uGACQC,mBAAgC,OAAhCA,EAAgC,SAAhCA,EAAgC,OAAhCA;AAAAA;;AAAAA;AAAAA;AAAAA;AAAAA;AAKA5e,gBAAAA,OALA4e,GAKJ,EALIA;AAAAA;AAAAA,uBAO4B,KAAhC,sBAAgC,EAP5BA;;AAAAA;AAOAC,gBAAAA,mBAPAD;;AAAAA;AAAAA,oBAQK,WAAT,OARIA;AAAAA;AAAAA;AAAAA;;AASFE,gBAAAA,SAAS;;AATPF,sBAUEE,SAAS,IAATA,CAAAA,IAAkBA,SAAS,GAA/B,mBAVEF;AAAAA;AAAAA;AAAAA;;AAAAA;;AAAAA;AAAAA;AAAAA;AAAAA,uBAeoB,KAAA,2BAAA,CAAA,SAAA,EAApB,WAAoB,CAfpBA;;AAAAA;AAeMT,gBAAAA,KAfNS;;AAmBA,oBAAIT,KAAK,CAALA,UAAAA,CAAAA,MAAAA,GAAJ,CAAA,EAAiC;AAC/Bne,kBAAAA,OAAO,CAAPA,KAAAA,GACEme,KAAK,CAALA,UAAAA,CAAiBA,KAAK,CAALA,UAAAA,CAAAA,MAAAA,GAAjBA,CAAAA,EADFne,QACEme,EADFne;AAED;;AAtBD4e;AAAAA;;AAAAA;AAAAA;AAAAA;;AAAAA,sBAwBIlpB,yBAAAA,KAAAA,IAAwBA,cAAAA,OAAAA,CAAAA,QAAAA,CAA5B,SAA4BA,CAxB5BkpB;AAAAA;AAAAA;AAAAA;;AAAAA;;AAAAA;AAAAA;;AAAAA;AAAAA;AAAAA;;AAAAA;AAAAA;AAAAA,uBAgC6B,KAAA,OAAA,CAAjC,WAAiC,CAhC7BA;;AAAAA;AAgCAG,gBAAAA,oBAhCAH;;AAAAA;AAAAA,oBAiCK,YAAT,OAjCIA;AAAAA;AAAAA;AAAAA;;AAkCFP,gBAAAA,OAAO;;AAlCLO,sBAmCEP,OAAO,GAAX,oBAnCEO;AAAAA;AAAAA;AAAAA;;AAAAA;;AAAAA;AAAAA;AAAAA;AAAAA,uBAwCoB,KAAA,2BAAA,CAApB,OAAoB,CAxCpBA;;AAAAA;AAwCMT,gBAAAA,MAxCNS;;AAyCA,oBAAIT,MAAK,CAALA,UAAAA,CAAAA,MAAAA,GAAJ,CAAA,EAAiC;AAC/Bne,kBAAAA,OAAO,CAAPA,MAAAA,GACEme,MAAK,CAALA,UAAAA,CAAiBA,MAAK,CAALA,UAAAA,CAAAA,MAAAA,GAAjBA,CAAAA,EADFne,QACEme,EADFne;AAED;;AA5CD4e;AAAAA;;AAAAA;AAAAA;AAAAA;;AAAAA,sBA8CIlpB,yBAAAA,KAAAA,IAAwBA,cAAAA,OAAAA,CAAAA,QAAAA,CAA5B,SAA4BA,CA9C5BkpB;AAAAA;AAAAA;AAAAA;;AAAAA;;AAAAA;AAAAA;;AAAAA;AAAAA;AAAAA;;AAAAA;AAAAA;AAAAA,uBAsDiC,KAAA,iCAAA,CAAA,OAAA,EAArC,OAAqC,CAtDjCA;;AAAAA;AAsDEI,gBAAAA,sBAtDFJ;AAAAA,mDA0DGI,sBAAsB,CAAtBA,GAAAA,CAA2BC,UAAAA,IAAI;AAAA,yBAAIA,IAAI,CAA9C,SAAsC;AAAA,iBAA/BD,CA1DHJ;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AA6DN;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;;wGACQM,mBAAiC,OAAjCA,EAAiC,OAAjCA,EAAiC,UAAjCA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAKEnmB,gBAAAA,IALFmmB,GAKS,KAAA,0BAAA,CACX,CAACzpB,OAAO,CADG,QACVA,EAAD,CADW,EAAA,UAAA,EAAA,SAAA,EAAb,OAAa,CALTypB;AAAAA;AAAAA,uBAWoB,KAAA,WAAA,CAAA,mCAAA,EAAxB,IAAwB,CAXpBA;;AAAAA;AAWE5G,gBAAAA,SAXF4G;AAeE5Q,gBAAAA,GAfF4Q,GAeQjU,MAAM,CAAA,SAAA,EAAlB,0CAAkB,CAfdiU;;AAAAA,sBAgBA,WAAJ,GAhBIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAiBI,IAAA,KAAA,CACJ,qDAAqD5Q,GAAG,CAAHA,KAAAA,CADvD,OAAM,CAjBJ4Q;;AAAAA;AAAAA,mDAqBG5Q,GAAG,CAAV,MArBI4Q;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAwBN;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;;8FACQC,mBAAuB,OAAvBA,EAAuB,OAAvBA,EAAuB,UAAvBA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAKEpmB,gBAAAA,IALFomB,GAKS,KAAA,0BAAA,CACX,CAAC1pB,OAAO,CADG,QACVA,EAAD,CADW,EAAA,UAAA,EAAA,SAAA,EAAb,OAAa,CALT0pB;AAAAA;AAAAA,uBAWoB,KAAA,WAAA,CAAA,yBAAA,EAAxB,IAAwB,CAXpBA;;AAAAA;AAWE7G,gBAAAA,SAXF6G;AAYE7Q,gBAAAA,GAZF6Q,GAYQlU,MAAM,CAAA,SAAA,EAAlB,gCAAkB,CAZdkU;;AAAAA,sBAaA,WAAJ,GAbIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAcI,IAAA,KAAA,CACJ,2CAA2C7Q,GAAG,CAAHA,KAAAA,CAD7C,OAAM,CAdJ6Q;;AAAAA;AAAAA,mDAkBG7Q,GAAG,CAAV,MAlBI6Q;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAqBN;AACF;AACA;;;;;yFACQC,mBAAkB,YAAlBA,EAAkB,UAAlBA;AAAAA;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,uBAIwC,KAAA,wBAAA,CAAA,YAAA,EAA5C,UAA4C,CAJxCA;;AAAAA;AAAAA;AAIE,gBAAA,OAJFA,yBAIE,OAJFA;AAImBC,gBAAAA,WAJnBD,yBAIYzrB,KAJZyrB;AASAzrB,gBAAAA,KATAyrB,GASJ,IATIA;;AAUJ,oBAAIC,WAAW,KAAf,IAAA,EAA0B;AACxB1rB,kBAAAA,KAAK,GAAG2rB,YAAY,CAAZA,eAAAA,CAA6BD,WAAW,CAAhD1rB,IAAQ2rB,CAAR3rB;AACD;;AAZGyrB,mDAcG;AACLjU,kBAAAA,OADK,EACLA,OADK;AAELxX,kBAAAA,KAAAA,EAAAA;AAFK,iBAdHyrB;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAoBN;AACF;AACA;;;;;+EACQG,mBAAQ,YAARA,EAAQ,UAARA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,uBAIS,KAAA,kBAAA,CAAA,YAAA,EAAA,UAAA,EAAA,IAAA,CACLtiB,UAAAA,CAAC;AAAA,yBAAIA,CAAC,CADD,KACJ;AAAA,iBADI,EAAA,KAAA,CAEJub,UAAAA,CAAC,EAAI;AACV,wBAAM,IAAA,KAAA,CACJ,qCACExX,YAAY,CADd,QACEA,EADF,GAAA,IAAA,GADF,CAAM,CAAN;AAHJ,iBAAa,CAJTue;;AAAAA;AAAAA;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAgBN;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;qFACQC,mBAAc,EAAdA,EAAc,QAAdA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,uBAIoB,KAAA,WAAA,CAAA,gBAAA,EAAmC,CACzDC,EAAE,CADuD,QACzDA,EADyD,EAA3D,QAA2D,CAAnC,CAJpBD;;AAAAA;AAIElH,gBAAAA,SAJFkH;AAQElR,gBAAAA,GARFkR,GAQQvU,MAAM,CAAA,SAAA,EAAlB,uBAAkB,CARduU;;AAAAA,sBASA,WAAJ,GATIA;AAAAA;AAAAA;AAAAA;;AAAAA,sBAUI,IAAA,KAAA,CACJ,gBAAgBC,EAAE,CAAlB,QAAgBA,EAAhB,GAAA,WAAA,GAA8CnR,GAAG,CAAHA,KAAAA,CADhD,OAAM,CAVJkR;;AAAAA;AAAAA,mDAcGlR,GAAG,CAAV,MAdIkR;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAiBN;AACF;AACA;;;;;sGACQE,mBAA+B,YAA/BA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,oBAGJ,YAHIA;AAAAA;AAAAA;AAAAA;;AAAAA;AAAAA,qBAKK,KAAP,iBALEA;AAAAA;AAAAA;AAAAA;;AAAAA;AAAAA,uBAMMnZ,KAAK,CAAX,GAAW,CANXmZ;;AAAAA;AAAAA;AAAAA;;AAAAA;AAQIC,gBAAAA,cARJD,GAQqBE,IAAI,CAAJA,GAAAA,KAAa,KAAA,cAAA,CAApC,SAREF;AASIG,gBAAAA,OATJH,GAScC,cAAc,IAA9B,0BATED;;AAAAA,sBAUE,KAAA,cAAA,CAAA,eAAA,KAAA,IAAA,IAAgD,CAApD,OAVEA;AAAAA;AAAAA;AAAAA;;AAAAA,mDAWO,KAAA,cAAA,CAAP,eAXAA;;AAAAA;AAAAA;AAAAA,uBAeS,KAAb,iBAAa,EAfTA;;AAAAA;AAAAA;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAkBN;AACF;AACA;;;;;wFACQI;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AACJ,qBAAA,iBAAA,GAAA,IAAA;AADIA;AAGIC,gBAAAA,SAHJD,GAGgBF,IAAI,CAAtB,GAAkBA,EAHhBE;AAIIE,gBAAAA,qBAJJF,GAI4B,KAAA,cAAA,CAA9B,eAJEA;AAKIG,gBAAAA,eALJH,GAKsBE,qBAAqB,GACzCA,qBAAqB,CADoB,SAAA,GAA7C,IALEF;AAQO3kB,gBAAAA,CARP2kB,GAQF,CAREA;;AAAAA;AAAAA,sBAQc3kB,CAAC,GAAjB,EARE2kB;AAAAA;AAAAA;AAAAA;;AAAAA;AAAAA,uBAS8B,KAAA,kBAAA,CAA9B,WAA8B,CAT9BA;;AAAAA;AASM5I,gBAAAA,eATN4I;;AAAAA,sBAWIG,eAAe,KAAK/I,eAAe,CAAvC,SAXA4I;AAAAA;AAAAA;AAAAA;;AAYE,qBAAA,cAAA,GAAsB;AACpB5I,kBAAAA,eADoB,EACpBA,eADoB;AAEpBC,kBAAAA,SAAS,EAAEyI,IAAI,CAFK,GAETA,EAFS;AAGpBxI,kBAAAA,qBAAqB,EAHD,EAAA;AAIpBC,kBAAAA,mBAAmB,EAAE;AAJD,iBAAtB;AAZFyI,mDAkBE,eAlBFA;;AAAAA;AAAAA;AAAAA,uBAsBMvZ,KAAK,CAAC6C,WAAW,GAAvB,CAAW,CAtBX0W;;AAAAA;AAQsB3kB,gBAAAA,CAAxB,EARE2kB;AAAAA;AAAAA;;AAAAA;AAAAA,sBAyBI,IAAA,KAAA,kDACsCF,IAAI,CAAJA,GAAAA,KAD5C,SAAM,QAzBJE;;AAAAA;AAAAA;AA6BF,qBAAA,iBAAA,GAAA,KAAA;AA7BEA;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAiCN;AACF;AACA;;;;;0FACQI,mBAAmB,oBAAnBA,EAAmB,OAAnBA,EAAmB,eAAnBA;AAAAA;;AAAAA;AAAAA;AAAAA;AAAAA;AAMJ,oBAAIC,oBAAoB,YAAxB,WAAA,EAAiD;AAC3CC,kBAAAA,UAD2C,GAC/C,oBAD+C;AAE/C1lB,kBAAAA,WAAW,GAAG,IAAdA,WAAc,EAAdA;AACAA,kBAAAA,WAAW,CAAXA,QAAAA,GAAuB0lB,UAAU,CAAjC1lB,QAAAA;AACAA,kBAAAA,WAAW,CAAXA,YAAAA,GAA2BylB,oBAAoB,CAA/CzlB,YAAAA;AACAA,kBAAAA,WAAW,CAAXA,SAAAA,GAAwB0lB,UAAU,CAAlC1lB,SAAAA;AACAA,kBAAAA,WAAW,CAAXA,UAAAA,GAAyB0lB,UAAU,CAAnC1lB,UAAAA;AANF,iBAAA,MAOO;AACLA,kBAAAA,WAAW,GAAGwE,WAAW,CAAXA,QAAAA,CADT,oBACSA,CAAdxE,CADK,CAAA;;AAGLA,kBAAAA,WAAW,CAAXA,QAAAA,GAAuBA,WAAW,CAAXA,KAAAA,GAAvBA,SAAAA;AACD;;AAjBGwlB,sBAmBAxlB,WAAW,CAAXA,SAAAA,IAAJ,OAnBIwlB;AAAAA;AAAAA;AAAAA;;AAoBFxlB,iCAAAA,WAAW,EAAXA,IAAAA,yCAAAA,OAAAA;;AApBEwlB;AAAAA;;AAAAA;AAsBEG,gBAAAA,YAtBFH,GAsBiB,KAAnB,wBAtBEA;;AAAAA;AAAAA;AAAAA,uBAwB8B,KAAA,+BAAA,CAA9B,YAA8B,CAxB9BA;;AAAAA;AAwBMhJ,gBAAAA,eAxBNgJ;AA2BAxlB,gBAAAA,WAAW,CAAXA,oBAAAA,GAAmCwc,eAAe,CAAlDxc,oBAAAA;AACAA,gBAAAA,WAAW,CAAXA,eAAAA,GAA8Bwc,eAAe,CAA7Cxc,SAAAA;;AA5BAwlB,oBA8BA,OA9BAA;AAAAA;AAAAA;AAAAA;;AAAAA;;AAAAA;AAgCAxlB,iCAAAA,WAAW,EAAXA,IAAAA,yCAAAA,OAAAA;;AAhCAwlB,oBAiCKxlB,WAAW,CAAhB,SAjCAwlB;AAAAA;AAAAA;AAAAA;;AAAAA,sBAkCQ,IAAA,KAAA,CADoB,YACpB,CAlCRA;;AAAAA;AAqCMrkB,gBAAAA,SArCNqkB,GAqCkBxlB,WAAW,CAAXA,SAAAA,CAAAA,QAAAA,CAAlB,QAAkBA,CArClBwlB;;AAAAA,sBAuCE,CAAC,KAAA,cAAA,CAAA,mBAAA,CAAA,QAAA,CAAD,SAAC,CAAD,IACA,CAAC,KAAA,cAAA,CAAA,qBAAA,CAAA,QAAA,CAFH,SAEG,CAxCHA;AAAAA;AAAAA;AAAAA;;AA0CE;AACA;AACA,qBAAA,cAAA,CAAA,mBAAA,CAAA,IAAA,CAAA,SAAA;;AA5CFA;;AAAAA;AA+CE;AACA;AACA;AACA;AACAG,gBAAAA,YAAY,GAAZA,IAAAA;;AAnDFH;AAAAA;AAAAA;;AAAAA;AAwDE5kB,gBAAAA,OAxDF4kB,GAwDYxlB,WAAW,CAA3B,QAAgBA,EAxDZwlB;AAyDEnlB,gBAAAA,QAzDFmlB,GAyDa5kB,OAAO,CAAxB,SAAiBA,EAzDb4kB;AA0DElhB,gBAAAA,eA1DFkhB,GA0DoBxlB,WAAW,CAAXA,UAAAA,CAAxB,QAAwBA,CA1DpBwlB;AA2DEI,gBAAAA,kBA3DFJ,GA2DuBlhB,eAAe,CAAfA,QAAAA,CAA3B,QAA2BA,CA3DvBkhB;AA4DEpH,gBAAAA,MA5DFoH,GA4DgB;AAClB5F,kBAAAA,QAAQ,EADU,QAAA;AAElBvU,kBAAAA,UAAU,EAAE,KAAKA;AAFC,iBA5DhBma;;AAiEJ,oBAAA,eAAA,EAAqB;AACb3D,kBAAAA,SADa,GACD,CAChB1iB,KAAK,CAALA,OAAAA,CAAAA,eAAAA,IAAAA,eAAAA,GAEIyB,OAAO,CAHK,aAGZA,EAHY,EAAA,GAAA,CAIZ9H,UAAAA,GAAG;AAAA,2BAAIA,GAAG,CAJhB,QAIaA,EAAJ;AAAA,mBAJS,CADC;AAOnBslB,kBAAAA,MAAM,CAANA,UAAM,CAANA,GAAqB;AACnBwB,oBAAAA,QAAQ,EADW,QAAA;AAEnBiC,oBAAAA,SAAAA,EAAAA;AAFmB,mBAArBzD;AAID;;AAED,oBAAA,OAAA,EAAa;AACXA,kBAAAA,MAAM,CAANA,SAAAA,GAAAA,IAAAA;AACD;;AAEK/f,gBAAAA,IAlFFmnB,GAkFS,CAAA,kBAAA,EAAb,MAAa,CAlFTA;AAAAA;AAAAA,uBAmFoB,KAAA,WAAA,CAAA,qBAAA,EAAxB,IAAwB,CAnFpBA;;AAAAA;AAmFE5H,gBAAAA,SAnFF4H;AAoFE5R,gBAAAA,GApFF4R,GAoFQjV,MAAM,CAAA,SAAA,EAAlB,kCAAkB,CApFdiV;;AAAAA,sBAqFA,WAAJ,GArFIA;AAAAA;AAAAA;AAAAA;;AAuFF,oBAAI,UAAU5R,GAAG,CAAjB,KAAA,EAAyB;AACvBvF,kBAAAA,IAAI,GAAGuF,GAAG,CAAHA,KAAAA,CAAAA,IAAAA,CAAPvF,IAAAA;;AACA,sBAAIA,IAAI,IAAIlP,KAAK,CAALA,OAAAA,CAAZ,IAAYA,CAAZ,EAAiC;AACzB0mB,oBAAAA,WADyB,GAC/B,QAD+B;AAEzBC,oBAAAA,QAFyB,GAEdD,WAAW,GAAGxX,IAAI,CAAJA,IAAAA,CAA/B,WAA+BA,CAFA;AAG/BpM,oBAAAA,OAAO,CAAPA,KAAAA,CAAc2R,GAAG,CAAHA,KAAAA,CAAd3R,OAAAA,EAAAA,QAAAA;AACD;AACF;;AA9FCujB,sBA+FI,IAAA,oBAAA,CACJ,qCAAqC5R,GAAG,CAAHA,KAAAA,CADjC,OAAA,EAAN,IAAM,CA/FJ4R;;AAAAA;AAAAA,mDAoGG5R,GAAG,CAAV,MApGI4R;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAuGN;AACF;AACA;;;;;sFACQO,mBAAe,WAAfA,EAAe,OAAfA,EAAe,OAAfA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,qBAKA/lB,WAAW,CAAf,SALI+lB;AAAAA;AAAAA;AAAAA;;AAMF/lB,gBAAAA,WAAW,CAAXA,IAAAA,OAAAA,WAAW,qBAAXA,OAAW,EAAXA;AANE+lB;AAAAA;;AAAAA;AAQEJ,gBAAAA,YARFI,GAQiB,KAAnB,wBAREA;;AAAAA;AAAAA;AAAAA,uBAU8B,KAAA,+BAAA,CAA9B,YAA8B,CAV9BA;;AAAAA;AAUMvJ,gBAAAA,eAVNuJ;AAaA/lB,gBAAAA,WAAW,CAAXA,oBAAAA,GAAmCwc,eAAe,CAAlDxc,oBAAAA;AACAA,gBAAAA,WAAW,CAAXA,eAAAA,GAA8Bwc,eAAe,CAA7Cxc,SAAAA;AACAA,gBAAAA,WAAW,CAAXA,IAAAA,OAAAA,WAAW,qBAAXA,OAAW,EAAXA;;AAfA+lB,oBAgBK/lB,WAAW,CAAhB,SAhBA+lB;AAAAA;AAAAA;AAAAA;;AAAAA,sBAiBQ,IAAA,KAAA,CADoB,YACpB,CAjBRA;;AAAAA;AAoBM5kB,gBAAAA,SApBN4kB,GAoBkB/lB,WAAW,CAAXA,SAAAA,CAAAA,QAAAA,CAAlB,QAAkBA,CApBlB+lB;;AAAAA,oBAqBK,KAAA,cAAA,CAAA,qBAAA,CAAA,QAAA,CAAL,SAAK,CArBLA;AAAAA;AAAAA;AAAAA;;AAsBE;AACA;AACA,qBAAA,cAAA,CAAA,qBAAA,CAAA,IAAA,CAAA,SAAA;;AAxBFA;;AAAAA;AA2BE;AACA;AACA;AACA;AACAJ,gBAAAA,YAAY,GAAZA,IAAAA;;AA/BFI;AAAAA;AAAAA;;AAAAA;AAoCEzhB,gBAAAA,eApCFyhB,GAoCoB/lB,WAAW,CAAnC,SAAwBA,EApCpB+lB;AAAAA;AAAAA,uBAqCS,KAAA,kBAAA,CAAA,eAAA,EAAb,OAAa,CArCTA;;AAAAA;AAAAA;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAwCN;AACF;AACA;AACA;;;;;yFACQC,mBAAkB,cAAlBA,EAAkB,OAAlBA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAIEJ,gBAAAA,kBAJFI,GAIuBpwB,QAAQ,CAARA,cAAQ,CAARA,CAAAA,QAAAA,CAA3B,QAA2BA,CAJvBowB;AAAAA;AAAAA,uBAKiB,KAAA,sBAAA,CAAA,kBAAA,EAArB,OAAqB,CALjBA;;AAAAA;AAKEjW,gBAAAA,MALFiW;AAAAA,mDASJ,MATIA;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAYN;AACF;AACA;AACA;;;;;6FACQC,mBAAsB,kBAAtBA,EAAsB,OAAtBA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAIE7H,gBAAAA,MAJF6H,GAIgB;AAACrG,kBAAAA,QAAQ,EAAE;AAAX,iBAJhBqG;AAKE1gB,gBAAAA,aALF0gB,GAKkB3gB,OAAO,IAAIA,OAAO,CAAxC,aALI2gB;AAMEzgB,gBAAAA,mBANFygB,GAOD3gB,OAAO,IAAIA,OAAO,CAAnB,mBAACA,IAA2C,KAD9C,UANI2gB;;AASJ,oBAAI3gB,OAAO,IAAIA,OAAO,CAAtB,UAAA,EAAmC;AACjC8Y,kBAAAA,MAAM,CAANA,UAAAA,GAAoB9Y,OAAO,CAA3B8Y,UAAAA;AACD;;AACD,oBAAA,aAAA,EAAmB;AACjBA,kBAAAA,MAAM,CAANA,aAAAA,GAAAA,aAAAA;AACD;;AACD,oBAAA,mBAAA,EAAyB;AACvBA,kBAAAA,MAAM,CAANA,mBAAAA,GAAAA,mBAAAA;AACD;;AAEK/f,gBAAAA,IAnBF4nB,GAmBS,CAAA,kBAAA,EAAb,MAAa,CAnBTA;AAAAA;AAAAA,uBAoBoB,KAAA,WAAA,CAAA,iBAAA,EAAxB,IAAwB,CApBpBA;;AAAAA;AAoBErI,gBAAAA,SApBFqI;AAqBErS,gBAAAA,GArBFqS,GAqBQ1V,MAAM,CAAA,SAAA,EAAlB,wBAAkB,CArBd0V;;AAAAA,sBAsBA,WAAJ,GAtBIA;AAAAA;AAAAA;AAAAA;;AAwBF,oBAAI,UAAUrS,GAAG,CAAjB,KAAA,EAAyB;AACvBvF,kBAAAA,IAAI,GAAGuF,GAAG,CAAHA,KAAAA,CAAAA,IAAAA,CAAPvF,IAAAA;AACD;;AA1BC4X,sBA2BI,IAAA,oBAAA,CACJ,iCAAiCrS,GAAG,CAAHA,KAAAA,CAD7B,OAAA,EAAN,IAAM,CA3BJqS;;AAAAA;AAAAA,mDAgCGrS,GAAG,CAAV,MAhCIqS;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAmCN;AACF;AACA;;;;WACEC,qBAAY;AAAA;;AACV,WAAA,sBAAA,GAAA,IAAA;AACA,WAAA,sBAAA,GAA8BC,WAAW,CAAC,YAAM;AAC9C;AACA,QAAA,OAAKnK,CAAL,aAAA,CAAA,MAAA,CAAA,MAAA,EAAA,KAAA,CAAwC,YAAM,CAA9C,CAAA;AAFuC,OAAA,EAAzC,IAAyC,CAAzC;;AAIA,WAAA,oBAAA;AACD;AAED;AACF;AACA;;;;WACEoK,oBAAU,GAAVA,EAAuB;AACrB,WAAA,sBAAA,GAAA,KAAA;AACAnkB,MAAAA,OAAO,CAAPA,KAAAA,CAAAA,WAAAA,EAA2BjH,GAAG,CAA9BiH,OAAAA;AACD;AAED;AACF;AACA;;;;WACEokB,oBAAU,IAAVA,EAAyB;AAAA;;AACvB,WAAA,sBAAA,GAAA,KAAA;AACA,WAAA,uBAAA;;AACA,UAAI,KAAJ,sBAAA,EAAiC;AAC/BC,QAAAA,aAAa,CAAC,KAAdA,sBAAa,CAAbA;AACA,aAAA,sBAAA,GAAA,IAAA;AACD;;AAED,UAAIrW,IAAI,KAAR,IAAA,EAAmB;AACjB;AACA,aAAA,oBAAA;;AACA;AAXqB,OAAA,CAAA;;;AAevB,WAAA,4CAAA,GAAA,EAAA;AACA3X,MAAAA,MAAM,CAANA,OAAAA,CACE,KADFA,oBAAAA,EAAAA,OAAAA,CAEU,kBAA0B;AAAA;AAAA,YAAzB,IAAyB;AAAA,YAA1B,YAA0B;;AAClC,QAAA,OAAA,CAAA,oBAAA,CAAA,IAAA,oCAAkC,YAAlC;AAEEwd,UAAAA,KAAK,EAAE;AAFT;AAHFxd,OAAAA;AAQD;AAED;AACF;AACA;;;;;2FACQiuB;AAAAA;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,sBACAjuB,MAAM,CAANA,IAAAA,CAAY,KAAZA,oBAAAA,EAAAA,MAAAA,KAAJ,CADIiuB;AAAAA;AAAAA;AAAAA;;AAEF,oBAAI,KAAJ,sBAAA,EAAiC;AAC/B,uBAAA,sBAAA,GAAA,KAAA;AACA,uBAAA,wBAAA,GAAgC1gB,UAAU,CAAC,YAAM;AAC/C,oBAAA,OAAKsW,CAAL,wBAAA,GAAA,IAAA;;AACA,wBAAI;AACF,sBAAA,OAAKH,CAAL,aAAA,CAAA,KAAA;AADF,qBAAA,CAEE,OAAA,GAAA,EAAY;AACZ;AACA,0BAAIhhB,GAAG,YAAP,KAAA,EAA0B;AACxBiH,wBAAAA,OAAO,CAAPA,GAAAA,iDAC2CjH,GAAG,CAD9CiH,OAAAA;AAGD;AACF;AAXuC,mBAAA,EAA1C,GAA0C,CAA1C;AAaD;;AAjBCskB;;AAAAA;AAqBJ,oBAAI,KAAA,wBAAA,KAAJ,IAAA,EAA4C;AAC1CxF,kBAAAA,YAAY,CAAC,KAAbA,wBAAY,CAAZA;AACA,uBAAA,wBAAA,GAAA,IAAA;AACA,uBAAA,sBAAA,GAAA,IAAA;AACD;;AAzBGwF,oBA2BC,KAAL,sBA3BIA;AAAAA;AAAAA;AAAAA;;AA4BF,qBAAA,aAAA,CAAA,OAAA;;AA5BEA;;AAAAA;AAgCEC,gBAAAA,yBAhCFD,GAgC8B,KAAlC,uBAhCIA;;AAiCEE,gBAAAA,8BAjCFF,GAiCmC,SAAjCE,8BAAiC,GAAM;AAC3C,yBAAOD,yBAAyB,KAAK,OAAA,CAArC,uBAAA;AADF,iBAjCID;;AAAAA;AAAAA,uBAqCE,OAAO,CAAP,GAAA,EAAA;AAEJ;AACA;AACA;AACAjuB,gBAAAA,MAAM,CAANA,IAAAA,CAAY,KAAZA,oBAAAA,EAAAA,GAAAA;AAAAA,wFAA2C,mBAAA,IAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACnCge,4BAAAA,YADmC,GACpB,OAAA,CAAA,oBAAA,CAArB,IAAqB,CADoB;;AAAA,kCAErCA,YAAY,KAAhB,SAFyC;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,4CAMjCA,YAAY,CAApB,KANyC;AAAA,gEAOvC,SAPuC,yBAQvC,cARuC,yBAsEvC,YAtEuC;AAAA;;AAAA;AAAA,kCASjCA,YAAY,CAAZA,SAAAA,CAAAA,IAAAA,KAAJ,CATqC;AAAA;AAAA;AAAA;;AAUnC;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACc,mCAAO,OAAKyG,CAAL,oBAAA,CAAP,IAAO,CAAP;;AACA,gCAAIzG,YAAY,CAAZA,KAAAA,KAAJ,cAAA,EAA2C;AACzC,qCAAO,OAAA,CAAA,4CAAA,CACLA,YAAY,CADd,oBAAO,CAAP;AAGD;;AA5BkC;AAAA,mCA6B7B,OAAA,CAAN,oBAAM,EA7B6B;;AAAA;AAAA;;AAAA;AAAA;AAAA,mCAgC/B,yDAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AACC,sCAAA,IADD,GACL,YADK,CACC,IADD,EACQhD,MADR,GACL,YADK,CACQA,MADR;AAAA;AAGH,sCAAA,OAAA,CAAA,oBAAA,CAAA,IAAA,oCAAkC,YAAlC;AAEEwC,wCAAAA,KAAK,EAAE;AAFT;AAHG;AAAA,6CAQM,OAAKkG,CAAL,aAAA,CAAA,IAAA,CAAA,MAAA,EADT,IACS,CARN;;AAAA;AAOG0K,sCAAAA,oBAPH;AASH,sCAAA,OAAA,CAAA,oBAAA,CAAA,IAAA,oCAAkC,YAAlC;AAEEA,wCAAAA,oBAFgC,EAEhCA,oBAFF;AAGE5Q,wCAAAA,KAAK,EAAE;AAHT;AAKA,sCAAA,OAAA,CAAA,4CAAA,CAAA,oBAAA,IAEIQ,YAAY,CAFhB,SAAA;AAdG;AAAA,6CAiBG,OAAA,CAAN,oBAAM,EAjBH;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAmBH,0CAAIwH,yBAAJ,KAAA,EAAwB;AACtB7b,wCAAAA,OAAO,CAAPA,KAAAA,WAAAA,MAAAA,0BAAAA,IAAAA,EAGE6b,cAHF7b,OAAAA;AAKD;;AAzBE,0CA0BEwkB,8BAAL,EA1BG;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAkBO;AAYV,sCAAA,OAAA,CAAA,oBAAA,CAAA,IAAA,oCAAkC,YAAlC;AAEE3Q,wCAAAA,KAAK,EAAE;AAFT;AA9BG;AAAA,6CAkCG,OAAA,CAAN,oBAAM,EAlCH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAD,IAhC+B;;AAAA;AAAA;;AAAA;AAAA,kCAuEjCQ,YAAY,CAAZA,SAAAA,CAAAA,IAAAA,KAAJ,CAvEqC;AAAA;AAAA;AAAA;;AAAA;AAAA,mCA2E7B,yDAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AACC,sCAAA,oBADD,GACL,YADK,CACC,oBADD,EACwBqQ,iBADxB,GACL,YADK,CACwBA,iBADxB;;AAAA,2CAGH,OAAA,CAAA,+BAAA,CAAA,GAAA,CADF,oBACE,CAHG;AAAA;AAAA;AAAA;;AAKH;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACkB,sCAAA,OAAA,CAAA,+BAAA,CAAA,MAAA,CAAA,oBAAA;;AAdG;AAAA;;AAAA;AAkBH,sCAAA,OAAA,CAAA,oBAAA,CAAA,IAAA,oCAAkC,YAAlC;AAEE7Q,wCAAAA,KAAK,EAAE;AAFT;AAlBG;AAAA;AAAA,6CAuBK,OAAA,CAAA,aAAA,CAAA,IAAA,CAAA,iBAAA,EAA2C,CAAjD,oBAAiD,CAA3C,CAvBL;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AA2BD,0CAAIgI,yBAAJ,KAAA,EAAwB;AACtB7b,wCAAAA,OAAO,CAAPA,KAAAA,WAAAA,iBAAAA,cAA6C6b,cAA7C7b,OAAAA;AACD;;AA7BA,0CA8BIwkB,8BAAL,EA9BC;AAAA;AAAA;AAAA;;AAAA;;AAAA;AA0BS;AAQV,sCAAA,OAAA,CAAA,oBAAA,CAAA,IAAA,oCAAkC,YAAlC;AAEE3Q,wCAAAA,KAAK,EAAE;AAFT;AAlCC;AAAA,6CAsCK,OAAA,CAAN,oBAAM,EAtCL;;AAAA;AAAA;;AAAA;AA0CL,sCAAA,OAAA,CAAA,oBAAA,CAAA,IAAA,oCAAkC,YAAlC;AAEEA,wCAAAA,KAAK,EAAE;AAFT;AA1CK;AAAA,6CA8CC,OAAA,CAAN,oBAAM,EA9CD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAD,IA3E6B;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA3Cxd;;AAAAA;AAAAA;AAAAA;AAAAA,oBALI,CArCFiuB;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AA+KN;AACF;AACA;;;;WACUK,mCAAyB,oBAAzBA,EAAyB,YAAzBA,EAKA;AACN,UAAMC,SAAS,GACb,KAAA,4CAAA,CADF,oBACE,CADF;;AAEA,UAAIA,SAAS,KAAb,SAAA,EAA6B;AAC3B;AACD;;AACDA,MAAAA,SAAS,CAATA,OAAAA,CAAkBC,UAAAA,EAAE,EAAI;AACtB,YAAI;AACFA,UAAAA,EAAE,MAAFA,4BAAAA,YAAAA;AADF,SAAA,CAQE,OAAA,CAAA,EAAU;AACV7kB,UAAAA,OAAO,CAAPA,KAAAA,CAAAA,CAAAA;AACD;AAXH4kB,OAAAA;AAaD;AAED;AACF;AACA;;;;WACEE,kCAAwB,YAAxBA,EAA+C;AAC7C,oBAA+BxW,MAAM,CAAA,YAAA,EAArC,yBAAqC,CAArC;AAAA,UAAM,MAAN,WAAM,MAAN;AAAA,UAAe+F,YAAf,WAAeA,YAAf;;AAIA,WAAA,yBAAA,CAAA,YAAA,EAAoE,CAClEvG,MAAM,CAD4D,KAAA,EAElEA,MAAM,CAFR,OAAoE,CAApE;AAID;AAED;AACF;AACA;;;;WACUiX,2BAAiB,kBAAjBA;AAEN;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzB2B,IAAA,IAAjBA,EA2BgB;AAAA;;AACtB,UAAMC,oBAAoB,GAAG,KAA7B,yBAA6B,EAA7B;AACA,UAAM7sB,IAAI,GAAG8sB,qBAAmB,CAC9B,CAACC,kBAAkB,CAAnB,MAAA,EAD8B,IAC9B,CAD8B,EAE9B;AAAK;AAFyB,OAAhC;AAIA,UAAMC,oBAAoB,GAAG,KAAA,oBAAA,CAA7B,IAA6B,CAA7B;;AACA,UAAIA,oBAAoB,KAAxB,SAAA,EAAwC;AACtC,aAAA,oBAAA,CAAA,IAAA,oCAAkC,kBAAlC;AAEE/oB,UAAAA,IAFgC,EAEhCA,IAFF;AAGEwoB,UAAAA,SAAS,EAAE,IAAA,GAAA,CAAQ,CAACM,kBAAkB,CAHN,QAGb,CAAR,CAHb;AAIErR,UAAAA,KAAK,EAAE;AAJT;AADF,OAAA,MAOO;AACLsR,QAAAA,oBAAoB,CAApBA,SAAAA,CAAAA,GAAAA,CAAmCD,kBAAkB,CAArDC,QAAAA;AACD;;AACD,WAAA,mDAAA,CAAA,oBAAA,0EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AACF,uBAAO,OAAKvK,CAAL,mDAAA,CAAP,oBAAO,CAAP;AAGMvG,gBAAAA,YAJJ,GAImB,OAAA,CAAA,oBAAA,CAArB,IAAqB,CAJnB;AAKFvgB,gBAAAA,MAAM,CACJugB,YAAY,KADR,SAAA,mFAANvgB,oBAAM,EAANA;AAIAugB,gBAAAA,YAAY,CAAZA,SAAAA,CAAAA,MAAAA,CAA8B6Q,kBAAkB,CAAhD7Q,QAAAA;AATE;AAAA,uBAUI,OAAA,CAAN,oBAAM,EAVJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAFJ;;AAcA,WAAA,oBAAA;;AACA,aAAA,oBAAA;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE+Q,yBAAe,SAAfA,EAAe,QAAfA,EAAe,UAAfA,EAIwB;AACtB,UAAMhpB,IAAI,GAAG,KAAA,UAAA,CACX,CAAC5E,SAAS,CADC,QACVA,EAAD,CADW,EAEX4R,UAAU,IAAI,KAAdA,WAAAA,IAFW,WAAA,EAAA;AAAb,cAAa,CAAb;;AAKA,aAAO,KAAA,iBAAA,CACL;AACE2I,QAAAA,QADF,EACEA,QADF;AAEEV,QAAAA,MAAM,EAFR,kBAAA;AAGEqT,QAAAA,iBAAiB,EAAE;AAHrB,OADK,EAAP,IAAO,CAAP;AAQD;AAED;AACF;AACA;AACA;AACA;;;;;kGACQW,mBAA2B,oBAA3BA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,uBAGE,KAAA,8BAAA,CAAA,oBAAA,EAAN,gBAAM,CAHFA;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AASN;AACF;AACA;;;;WACEC,yCAA+B,YAA/BA,EAAsD;AACpD,qBAA+BhX,MAAM,CAAA,YAAA,EAArC,gCAAqC,CAArC;AAAA,UAAM,MAAN,YAAM,MAAN;AAAA,UAAe+F,YAAf,YAAeA,YAAf;;AAIA,WAAA,yBAAA,CAAA,YAAA,EAA2E,CACzE;AACEkR,QAAAA,SAAS,EAAEzX,MAAM,CAANA,KAAAA,CADb,MAAA;AAEE4U,QAAAA,WAAW,EAAE5U,MAAM,CAANA,KAAAA,CAAazR;AAF5B,OADyE,EAKzEyR,MAAM,CALR,OAA2E,CAA3E;AAOD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE0X,gCAAsB,SAAtBA,EAAsB,QAAtBA,EAAsB,UAAtBA,EAAsB,OAAtBA,EAKwB;AACtB,UAAMppB,IAAI,GAAG,KAAA,UAAA,CACX,CAAClE,SAAS,CADC,QACVA,EAAD,CADW,EAEXkR,UAAU,IAAI,KAAdA,WAAAA,IAFW,WAAA,EAAA;AAGX;AAAS;AAHE,QAIXqc,OAAO,GAAG;AAACA,QAAAA,OAAO,EAAEA;AAAV,OAAH,GAAwBC;AAAU;AAJ9B,OAAb;;AAMA,aAAO,KAAA,iBAAA,CACL;AACE3T,QAAAA,QADF,EACEA,QADF;AAEEV,QAAAA,MAAM,EAFR,kBAAA;AAGEqT,QAAAA,iBAAiB,EAAE;AAHrB,OADK,EAAP,IAAO,CAAP;AAQD;AAED;AACF;AACA;AACA;AACA;;;;;yGACQiB,mBAAkC,oBAAlCA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,uBAGE,KAAA,8BAAA,CAAA,oBAAA,EAAN,wBAAM,CAHFA;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AASN;AACF;AACA;;;;WACEC,gBAAM,MAANA,EAAM,QAANA,EAAM,UAANA,EAIwB;AACtB,UAAMxpB,IAAI,GAAG,KAAA,UAAA,CACX,CAAC,OAAA,MAAA,KAAA,QAAA,GAA6B;AAACypB,QAAAA,QAAQ,EAAE,CAAClJ,MAAM,CAAP,QAACA,EAAD;AAAX,OAA7B,GADU,MACX,CADW,EAEXvT,UAAU,IAAI,KAAdA,WAAAA,IAFW,WAAA,CAAA;AAAA,OAAb;;AAIA,aAAO,KAAA,iBAAA,CACL;AACE2I,QAAAA,QADF,EACEA,QADF;AAEEV,QAAAA,MAAM,EAFR,eAAA;AAGEqT,QAAAA,iBAAiB,EAAE;AAHrB,OADK,EAAP,IAAO,CAAP;AAQD;AAED;AACF;AACA;AACA;AACA;;;;;2FACQoB,mBAAoB,oBAApBA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,uBAGE,KAAA,8BAAA,CAAA,oBAAA,EAAN,MAAM,CAHFA;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AAMN;AACF;AACA;;;;WACEC,+BAAqB,YAArBA,EAA4C;AAC1C,qBAA+BzX,MAAM,CAAA,YAAA,EAArC,sBAAqC,CAArC;AAAA,UAAM,MAAN,YAAM,MAAN;AAAA,UAAe+F,YAAf,YAAeA,YAAf;;AACA,WAAA,yBAAA,CAAA,YAAA,EAA2D,CACzDvG,MAAM,CADmD,KAAA,EAEzDA,MAAM,CAFR,OAA2D,CAA3D;AAID;AAED;AACF;AACA;;;;WACEkY,+BAAqB,YAArBA,EAA4C;AAC1C,qBAA+B1X,MAAM,CAAA,YAAA,EAArC,sBAAqC,CAArC;AAAA,UAAM,MAAN,YAAM,MAAN;AAAA,UAAe+F,YAAf,YAAeA,YAAf;;AACA,WAAA,yBAAA,CAAA,YAAA,EAAiE,CAAjE,MAAiE,CAAjE;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;WACE4R,sBAAY,QAAZA,EAAiE;AAC/D,aAAO,KAAA,iBAAA,CACL;AACElU,QAAAA,QADF,EACEA,QADF;AAEEV,QAAAA,MAAM,EAFR,eAAA;AAGEqT,QAAAA,iBAAiB,EAAE;AAHrB,OADK,EAML;AAAG;AANE,OAAP;AAQD;AAED;AACF;AACA;AACA;AACA;;;;;+FACQwB,mBAAwB,oBAAxBA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,uBAGE,KAAA,8BAAA,CAAA,oBAAA,EAAN,aAAM,CAHFA;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AASN;AACF;AACA;;;;WACEC,sCAA4B,YAA5BA,EAAmD;AACjD,qBAA+B7X,MAAM,CAAA,YAAA,EAArC,4BAAqC,CAArC;AAAA,UAAM,MAAN,YAAM,MAAN;AAAA,UAAe+F,YAAf,YAAeA,YAAf;;AAIA,WAAA,yBAAA,CAAA,YAAA,EAAiE,CAAjE,MAAiE,CAAjE;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;WACE+R,sBAAY,QAAZA,EAAiE;AAC/D,aAAO,KAAA,iBAAA,CACL;AACErU,QAAAA,QADF,EACEA,QADF;AAEEV,QAAAA,MAAM,EAFR,uBAAA;AAGEqT,QAAAA,iBAAiB,EAAE;AAHrB,OADK,EAML;AAAG;AANE,OAAP;AAQD;AAED;AACF;AACA;AACA;AACA;;;;;+FACQ2B,mBAAwB,oBAAxBA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,uBAGE,KAAA,8BAAA,CAAA,oBAAA,EAAN,aAAM,CAHFA;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AASN;AACF;AACA;;;;;qGAEgBC,mBAA8B,oBAA9BA,EAA8B,gBAA9BA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAINC,gBAAAA,OAJMD,GAKV,KAAA,mDAAA,CADF,oBACE,CALUA;;AAAAA,qBAQZ,OARYA;AAAAA;AAAAA;AAAAA;;AAAAA;AAAAA,uBASJC,OAAN,EATUD;;AAAAA;AAAAA;AAAAA;;AAAAA;AAWVtmB,gBAAAA,OAAO,CAAPA,IAAAA,CACE,mFACOglB,oBADP,oBAAA,gBAAA,iBADFhlB,qBAAAA;;AAXUsmB;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;;;WAmBdE,oBAAU,IAAVA,EAAU,QAAVA,EAAU,QAAVA,EAAU,KAAVA,EAKc;AACZ,UAAMpd,UAAU,GAAGqd,QAAQ,IAAI,KAA/B,WAAA;;AACA,UAAIrd,UAAU,IAAVA,QAAAA,IAAJ,KAAA,EAAqC;AACnC,YAAI/F,OAAY,GAAhB,EAAA;;AACA,YAAA,QAAA,EAAc;AACZA,UAAAA,OAAO,CAAPA,QAAAA,GAAAA,QAAAA;AACD;;AACD,YAAA,UAAA,EAAgB;AACdA,UAAAA,OAAO,CAAPA,UAAAA,GAAAA,UAAAA;AACD;;AACD,YAAA,KAAA,EAAW;AACTA,UAAAA,OAAO,GAAGhN,MAAM,CAANA,MAAAA,CAAAA,OAAAA,EAAVgN,KAAUhN,CAAVgN;AACD;;AACDjH,QAAAA,IAAI,CAAJA,IAAAA,CAAAA,OAAAA;AACD;;AACD,aAAA,IAAA;AACD;AAED;AACF;AACA;;;;WACEglB,oCAA0B,IAA1BA,EAA0B,QAA1BA,EAA0B,QAA1BA,EAA0B,KAA1BA,EAKc;AACZ,UAAMhY,UAAU,GAAGqd,QAAQ,IAAI,KAA/B,WAAA;;AACA,UAAIrd,UAAU,IAAI,CAAC,CAAA,WAAA,EAAA,WAAA,EAAA,QAAA,CAAnB,UAAmB,CAAnB,EAAoE;AAClE,cAAM,IAAA,KAAA,CACJ,gDACE,KADF,WAAA,GADF,6CAAM,CAAN;AAKD;;AACD,aAAO,KAAA,UAAA,CAAA,IAAA,EAAA,QAAA,EAAA,QAAA,EAAP,KAAO,CAAP;AACD;AAED;AACF;AACA;;;;WACEsd,oCAA0B,YAA1BA,EAAiD;AAC/C,qBAA+BpY,MAAM,CAAA,YAAA,EAArC,2BAAqC,CAArC;AAAA,UAAM,MAAN,YAAM,MAAN;AAAA,UAAe+F,YAAf,YAAeA,YAAf;;AAIA,UAAIvG,MAAM,CAANA,KAAAA,KAAJ,mBAAA,EAA0C;AACxC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACM,aAAA,+BAAA,CAAA,GAAA,CAAA,YAAA;AACD;;AACD,WAAA,yBAAA,CAAA,YAAA,EAEE,MAAM,CAAN,KAAA,KAAA,mBAAA,GACI,CAAC;AAACvS,QAAAA,IAAI,EAAE;AAAP,OAAD,EAAqBuS,MAAM,CAD/B,OACI,CADJ,GAEI,CAAC;AAACvS,QAAAA,IAAI,EAAL,QAAA;AAAiBuS,QAAAA,MAAM,EAAEA,MAAM,CAAC9W;AAAhC,OAAD,EAAyC8W,MAAM,CAJrD,OAIM,CAJN;AAMD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACEsQ,qBAAW,SAAXA,EAAW,SAAXA,EAAW,UAAXA,EAIwB;AAAA;;AACtB,UAAMhiB,IAAI,GAAG,KAAA,UAAA,CACX,CADW,SACX,CADW,EAEXgN,UAAU,IAAI,KAAdA,WAAAA,IAFW,WAAA,CAAA;AAAA,OAAb;;AAIA,UAAM4b,oBAAoB,GAAG,KAAA,iBAAA,CAC3B;AACEjT,QAAAA,QAAQ,EAAE,kBAAA,YAAA,EAAA,OAAA,EAA2B;AACnC,cAAI4U,YAAY,CAAZA,IAAAA,KAAJ,QAAA,EAAoC;AAClC5U,YAAAA,SAAQ,CAAC4U,YAAY,CAAb,MAAA,EAD0B,OAC1B,CAAR5U,CADkC,CAAA;AAGlC;;;AACA,gBAAI;AACF,cAAA,OAAA,CAAA,uBAAA,CADE,oBACF,EADE,CAAA;;AAAJ,aAAA,CAGE,OAAA,IAAA,EAAa,CAAA;AAEd;AACF;AAZL,SAAA;AAcEV,QAAAA,MAAM,EAdR,oBAAA;AAeEqT,QAAAA,iBAAiB,EAAE;AAfrB,OAD2B,EAA7B,IAA6B,CAA7B;;AAoBA,aAAA,oBAAA;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACEkC,gCAAsB,SAAtBA,EAAsB,UAAtBA,EAAsB,OAAtBA,EAIwB;AAAA;;AACtB,gEAA+B,OAA/B;AAEExd,QAAAA,UAAU,EACP/F,OAAO,IAAIA,OAAO,CAAnB,UAACA,IAAkC,KAAnC,WAACA,IAH0B,WAA/B,CAA+B;;AAA/B;AAAA,UAAM,UAAN,uBAAM,UAAN;AAAA,UAAsBoa,KAAtB;;AAKA,UAAMrhB,IAAI,GAAG,KAAA,UAAA,CACX,CADW,SACX,CADW,EAAA,UAAA,EAGXspB;AAAU;AAHC,QAAb,KAAa,CAAb;;AAMA,UAAMV,oBAAoB,GAAG,KAAA,iBAAA,CAC3B;AACEjT,QAAAA,QAAQ,EAAE,kBAAA,YAAA,EAAA,OAAA,EAA2B;AACnCA,UAAAA,UAAQ,CAAA,YAAA,EAD2B,OAC3B,CAARA,CADmC,CAAA;AAGnC;;;AACA,cAAI;AACF,YAAA,OAAA,CAAA,uBAAA,CADE,oBACF,EADE,CAAA;;AAAJ,WAAA,CAGE,OAAA,IAAA,EAAa,CAAA;AAEd;AAVL,SAAA;AAYEV,QAAAA,MAAM,EAZR,oBAAA;AAaEqT,QAAAA,iBAAiB,EAAE;AAbrB,OAD2B,EAA7B,IAA6B,CAA7B;;AAkBA,aAAA,oBAAA;AACD;AAED;AACF;AACA;AACA;AACA;;;;;8FACQmC,mBAAuB,oBAAvBA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,uBAGE,KAAA,8BAAA,CAAA,oBAAA,EAAN,kBAAM,CAHFA;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;AASN;AACF;AACA;;;;WACEC,+BAAqB,YAArBA,EAA4C;AAC1C,qBAA+BxY,MAAM,CAAA,YAAA,EAArC,sBAAqC,CAArC;AAAA,UAAM,MAAN,YAAM,MAAN;AAAA,UAAe+F,YAAf,YAAeA,YAAf;;AACA,WAAA,yBAAA,CAAA,YAAA,EAAiE,CAAjE,MAAiE,CAAjE;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;WACE0S,sBAAY,QAAZA,EAAiE;AAC/D,aAAO,KAAA,iBAAA,CACL;AACEhV,QAAAA,QADF,EACEA,QADF;AAEEV,QAAAA,MAAM,EAFR,eAAA;AAGEqT,QAAAA,iBAAiB,EAAE;AAHrB,OADK,EAML;AAAG;AANE,OAAP;AAQD;AAED;AACF;AACA;AACA;AACA;;;;;+FACQsC,mBAAwB,oBAAxBA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,uBAGE,KAAA,8BAAA,CAAA,oBAAA,EAAN,aAAM,CAHFA;;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,O;;;;;;;;;;;;ACt7JR;AACA;AACA;;AAcA;AACA;AACA;;;IACO,O;AAGL;AACF;AACA;AACA;AACA;AACA;AACE5wB,mBAAW,OAAXA,EAAsC;AAAA;;AAAA,SAR9BgE,QAQ8B,GAAA,KAAA,CAAA;;AACpC,QAAA,OAAA,EAAa;AACX,WAAA,QAAA,GAAA,OAAA;AADF,KAAA,MAEO;AACL,WAAA,QAAA,GAAgBd,IAAI,CAAJA,IAAAA,CAAhB,OAAgBA,EAAhB;AACD;AACF;AAED;AACF;AACA;;;;;;AA0CE;AACF;AACA;AACM9B,mBAAuB;AACzB,aAAO,IAAA,SAAA,CAAc,KAAA,QAAA,CAArB,SAAO,CAAP;AACD;AAED;AACF;AACA;;;;SACM6C,eAAwB;AAC1B,aAAO,KAAA,QAAA,CAAP,SAAA;AACD;;;WArDM4sB,oBAAoB;AACzB,aAAO,IAAA,OAAA,CAAY3tB,IAAI,CAAJA,IAAAA,CAAnB,OAAmBA,EAAZ,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACS4tB,uBAAa,SAAbA,EAAa,OAAbA,EAGI;AACT,UAAMC,OAAO,GAAG7tB,IAAI,CAAJA,IAAAA,CAAAA,OAAAA,CAAAA,aAAAA,CAAhB,SAAgBA,CAAhB;;AACA,UAAI,CAAA,OAAA,IAAY,CAAC+J,OAAO,CAAxB,cAAA,EAAyC;AACvC,YAAM+jB,OAAO,GAAG,IAAhB,WAAgB,EAAhB;AACA,YAAMhpB,QAAQ,GAAGgpB,OAAO,CAAPA,MAAAA,CAAjB,+BAAiBA,CAAjB;AACA,YAAMloB,SAAS,GAAG5F,IAAI,CAAJA,IAAAA,CAAAA,QAAAA,CAAAA,QAAAA,EAA6B6tB,OAAO,CAAtD,SAAkB7tB,CAAlB;;AACA,YAAI,CAACA,IAAI,CAAJA,IAAAA,CAAAA,QAAAA,CAAAA,MAAAA,CAAAA,QAAAA,EAAAA,SAAAA,EAA+C6tB,OAAO,CAA3D,SAAK7tB,CAAL,EAAwE;AACtE,gBAAM,IAAA,KAAA,CAAN,+BAAM,CAAN;AACD;AACF;;AACD,aAAO,IAAA,OAAA,CAAP,OAAO,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;;WACS+tB,kBAAQ,IAARA,EAAoC;AACzC,aAAO,IAAA,OAAA,CAAY/tB,IAAI,CAAJA,IAAAA,CAAAA,OAAAA,CAAAA,QAAAA,CAAnB,IAAmBA,CAAZ,CAAP;AACD;;;;;;ACzEH,IAAMguB,mBAAiB,GAAvB,EAAA;AACA,IAAMC,kBAAgB,GAAtB,EAAA;AACA,IAAMC,eAAe,GAArB,EAAA;AAEA;AACA;AACA;;AAiBA,IAAMC,0BAA0B,GAAG/sB,YAAY,CAAZA,MAAAA,CAYjC,CACAA,YAAY,CAAZA,EAAAA,CADA,eACAA,CADA,EAEAA,YAAY,CAAZA,EAAAA,CAFA,SAEAA,CAFA,EAGAA,YAAY,CAAZA,GAAAA,CAHA,iBAGAA,CAHA,EAIAA,YAAY,CAAZA,GAAAA,CAJA,2BAIAA,CAJA,EAKAA,YAAY,CAAZA,GAAAA,CALA,iBAKAA,CALA,EAMAA,YAAY,CAAZA,GAAAA,CANA,2BAMAA,CANA,EAOAA,YAAY,CAAZA,GAAAA,CAPA,mBAOAA,CAPA,EAQAA,YAAY,CAAZA,GAAAA,CARA,iBAQAA,CARA,EASAA,YAAY,CAAZA,GAAAA,CArBF,yBAqBEA,CATA,CAZiCA,CAAnC;;IAwBO,c;AACL;AACF;AACA;AACEtE,4BAAc;AAAA;AAAE;AAEhB;AACF;AACA;;AAKE;AACF;AACA;AACA;AACA;;;;;WACSuxB,wCAA8B,MAA9BA,EAEmB;AACxB,UAAM,SAAN,GAAA,MAAA,CAAM,SAAN;AAAA,UAAM,OAAN,GAAA,MAAA,CAAM,OAAN;AAAA,UAAM,SAAN,GAAA,MAAA,CAAM,SAAN;AAAA,UAAsCC,gBAAtC,GAAA,MAAA,CAAsCA,gBAAtC;AAEA9zB,MAAAA,MAAM,CACJ0D,SAAS,CAATA,MAAAA,KADI,kBAAA,+BAEkB+vB,kBAFlB,iCAEyD/vB,SAAS,CAFxE1D,MAAM,YAANA;AAKAA,MAAAA,MAAM,CACJoL,SAAS,CAATA,MAAAA,KADI,eAAA,8BAEiBsoB,eAFjB,iCAEuDtoB,SAAS,CAFtEpL,MAAM,YAANA;AAKA,UAAM+zB,eAAe,GAAGJ,0BAA0B,CAAlD,IAAA;AACA,UAAMK,eAAe,GAAGD,eAAe,GAAGrwB,SAAS,CAAnD,MAAA;AACA,UAAMuwB,iBAAiB,GAAGD,eAAe,GAAG5oB,SAAS,CAArD,MAAA;AACA,UAAM8oB,aAAa,GAAnB,CAAA;AAEA,UAAM5f,eAAe,GAAGvU,MAAM,CAANA,KAAAA,CAAak0B,iBAAiB,GAAGppB,OAAO,CAAhE,MAAwB9K,CAAxB;AAEA,UAAM2I,KAAK,GACT,gBAAgB,IAAhB,IAAA,GAAA,MAAA,CAAA;AAAA,QADF,gBAAA;AAKAirB,MAAAA,0BAA0B,CAA1BA,MAAAA,CACE;AACEO,QAAAA,aADF,EACEA,aADF;AAEEC,QAAAA,OAAO,EAFT,CAAA;AAGEH,QAAAA,eAHF,EAGEA,eAHF;AAIEI,QAAAA,yBAAyB,EAJ3B,KAAA;AAKEL,QAAAA,eALF,EAKEA,eALF;AAMEM,QAAAA,yBAAyB,EAN3B,KAAA;AAOEJ,QAAAA,iBAPF,EAOEA,iBAPF;AAQEK,QAAAA,eAAe,EAAEzpB,OAAO,CAR1B,MAAA;AASE0pB,QAAAA,uBAAuB,EAAE7rB;AAT3B,OADFirB,EAAAA,eAAAA;AAeArf,MAAAA,eAAe,CAAfA,IAAAA,CAAAA,SAAAA,EAAAA,eAAAA;AACAA,MAAAA,eAAe,CAAfA,IAAAA,CAAAA,SAAAA,EAAAA,eAAAA;AACAA,MAAAA,eAAe,CAAfA,IAAAA,CAAAA,OAAAA,EAAAA,iBAAAA;AAEA,aAAO,IAAA,sBAAA,CAA2B;AAChCjK,QAAAA,IAAI,EAD4B,EAAA;AAEhCjG,QAAAA,SAAS,EAAEwvB,cAAc,CAFO,SAAA;AAGhC1sB,QAAAA,IAAI,EAAEoN;AAH0B,OAA3B,CAAP;AAKD;AAED;AACF;AACA;AACA;;;;WACSkgB,yCAA+B,MAA/BA,EAEmB;AACxB,UAAM,UAAN,GAAA,MAAA,CAAM,UAAN;AAAA,UAAM,OAAN,GAAA,MAAA,CAAM,OAAN;AAAA,UAA4BV,gBAA5B,GAAA,MAAA,CAA4BA,gBAA5B;AAEA9zB,MAAAA,MAAM,CACJy0B,UAAU,CAAVA,MAAAA,KADI,mBAAA,gCAEmBjB,mBAFnB,iCAE2DiB,UAAU,CAF3Ez0B,MAAM,YAANA;;AAKA,UAAI;AACF,YAAMqzB,OAAO,GAAGqB,OAAO,CAAPA,aAAAA,CAAhB,UAAgBA,CAAhB;;AACA,YAAMhxB,WAAS,GAAG2vB,OAAO,CAAPA,SAAAA,CAAlB,OAAkBA,EAAlB;;AACA,YAAMjoB,SAAS,GAAG5F,IAAI,CAAJA,IAAAA,CAAAA,QAAAA,CAAAA,OAAAA,EAA4B6tB,OAAO,CAArD,SAAkB7tB,CAAlB;AAEA,eAAO,KAAA,8BAAA,CAAoC;AACzC9B,UAAAA,SADyC,EACzCA,WADyC;AAEzCmH,UAAAA,OAFyC,EAEzCA,OAFyC;AAGzCO,UAAAA,SAHyC,EAGzCA,SAHyC;AAIzC0oB,UAAAA,gBAAAA,EAAAA;AAJyC,SAApC,CAAP;AALF,OAAA,CAWE,OAAA,KAAA,EAAc;AACd,cAAM,IAAA,KAAA,uCAAN,KAAM,EAAN;AACD;AACF;;;;;;AAnGUF,cAAAA,CASJxvB,SATIwvB,GASmB,IAAA,SAAA,CAAA,6CAAA,CATnBA;ACrCb;AACA;AACA;AACA;;IACae,eAAe,GAAG,IAAA,SAAA,CAAxB,6CAAwB,C;AAI/B;AACA;AACA;;IACO,U;AACL;;AAEA;;AAGA;AACF;AACA;AACA;AACA;AACEryB,oBAAW,MAAXA,EAAW,UAAXA,EAAsD;AAAA;;AAAA,OATtDsyB,MASsD,GAAA,KAAA,CAAA;AAAA,OAPtDC,UAOsD,GAAA,KAAA,CAAA;AACpD,OAAA,MAAA,GAAA,MAAA;AACA,OAAA,UAAA,GAAA,UAAA;AACD,C;AAQH;AACA;AACA;;;IACO,M;AACL;;AAEA;;AAEA;;AAGA;AACF;AACA;AACEvyB,gBAAW,aAAXA,EAAW,KAAXA,EAAW,SAAXA,EAAwE;AAAA;;AAAA,OATxEyyB,aASwE,GAAA,KAAA,CAAA;AAAA,OAPxEld,KAOwE,GAAA,KAAA,CAAA;AAAA,OALxEmd,SAKwE,GAAA,KAAA,CAAA;AACtE,OAAA,aAAA,GAAA,aAAA;AACA,OAAA,KAAA,GAAA,KAAA;AACA,OAAA,SAAA,GAAA,SAAA;AACD;AAED;AACF;AACA;;;AAnBaF,MAAAA,CAoBJtxB,OApBIsxB,GAoBc,IAAA,MAAA,CAAA,CAAA,EAAA,CAAA,EAAiB3xB,SAAS,CAA1B,OAAA,CApBd2xB;AAsJb;AACA;AACA;;IACO,gB;AACL;AACF;AACA;AACExyB,8BAAc;AAAA;AAAE;AAEhB;AACF;AACA;;;;;WACS2O,+BAAqB,WAArBA,EAEiB;AACtB,WAAA,cAAA,CAAoB/H,WAAW,CAA/B,SAAA;AAEA,UAAMgI,qBAAqB,GAAGtK,YAAY,CAAZA,GAAAA,CAA9B,aAA8BA,CAA9B;AACA,UAAMuK,SAAS,GAAGD,qBAAqB,CAArBA,MAAAA,CAA6BhI,WAAW,CAA1D,IAAkBgI,CAAlB;AAEA,UAAA,IAAA;;AACA,2CAA+B3O,MAAM,CAANA,OAAAA,CAA/B,yBAA+BA,CAA/B,wCAA0E;AAArE;AAAA,YAAM,MAAN;AAAA,YAAL,MAAK;;AACH,YAAIkO,MAAM,CAANA,KAAAA,IAAJ,SAAA,EAA+B;AAC7BhJ,UAAAA,IAAI,GAAJA,MAAAA;AACA;AACD;AACF;;AAED,UAAI,CAAJ,IAAA,EAAW;AACT,cAAM,IAAA,KAAA,CAAN,oDAAM,CAAN;AACD;;AAED,aAAA,IAAA;AACD;AAED;AACF;AACA;;;;WACSwtB,0BAAgB,WAAhBA,EAEkB;AACvB,WAAA,cAAA,CAAoB/rB,WAAW,CAA/B,SAAA;AACA,WAAA,cAAA,CAAoBA,WAAW,CAA/B,IAAA,EAAA,CAAA;;AAEA,0BAA6BmI,UAAU,CACrC6jB,yBAAyB,CADY,UAAA,EAErChsB,WAAW,CAFb,IAAuC,CAAvC;AAAA,UAAM,UAAN,iBAAM,UAAN;AAAA,UAAmB5B,MAAnB,iBAAmBA,MAAnB;;AAKA,aAAO;AACL6tB,QAAAA,WAAW,EAAEjsB,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EADR,MAAA;AAEL7B,QAAAA,UAAU,EAAE,IAAA,UAAA,CACV,IAAA,SAAA,CAAcA,UAAU,CADd,MACV,CADU,EAEV,IAAA,SAAA,CAAcA,UAAU,CAJrB,UAIH,CAFU,CAFP;AAMLC,QAAAA,MAAM,EAAE,IAAA,MAAA,CACNA,MAAM,CADA,aAAA,EAENA,MAAM,CAFA,KAAA,EAGN,IAAA,SAAA,CAAcA,MAAM,CAHd,SAGN,CAHM;AANH,OAAP;AAYD;AAED;AACF;AACA;;;;WACS8tB,wBAAc,WAAdA,EAEgB;AACrB,WAAA,cAAA,CAAoBlsB,WAAW,CAA/B,SAAA;AACA,WAAA,cAAA,CAAoBA,WAAW,CAA/B,IAAA,EAAA,CAAA;AACAmI,MAAAA,UAAU,CAAC6jB,yBAAyB,CAA1B,QAAA,EAAqChsB,WAAW,CAA1DmI,IAAU,CAAVA;AAEA,aAAO;AACL8jB,QAAAA,WAAW,EAAEjsB,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EADR,MAAA;AAEL4Y,QAAAA,UAAU,EAAE5Y,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EAFP,MAAA;AAGLkH,QAAAA,gBAAgB,EAAElH,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EAAoB9D;AAHjC,OAAP;AAKD;AAED;AACF;AACA;;;;WACSiwB,yBAAe,WAAfA,EAEiB;AACtB,WAAA,cAAA,CAAoBnsB,WAAW,CAA/B,SAAA;AACA,WAAA,cAAA,CAAoBA,WAAW,CAA/B,IAAA,EAAA,CAAA;;AACA,0BAAgDmI,UAAU,CACxD6jB,yBAAyB,CAD+B,SAAA,EAExDhsB,WAAW,CAFb,IAA0D,CAA1D;AAAA,UAAM,aAAN,iBAAM,aAAN;AAAA,UAAsBosB,sBAAtB,iBAAsBA,sBAAtB;;AAKA,UAAMC,CAAuB,GAAG;AAC9BJ,QAAAA,WAAW,EAAEjsB,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EADiB,MAAA;AAE9BkH,QAAAA,gBAAgB,EAAElH,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EAFY,MAAA;AAG9BwJ,QAAAA,mBAAmB,EAAE,IAAA,SAAA,CAHS,aAGT,CAHS;AAI9B4iB,QAAAA,sBAAsB,EAAE;AACtB5sB,UAAAA,KAAK,EAAE4sB;AADe;AAJM,OAAhC;;AAQA,UAAIpsB,WAAW,CAAXA,IAAAA,CAAAA,MAAAA,GAAJ,CAAA,EAAiC;AAC/BqsB,QAAAA,CAAC,CAADA,eAAAA,GAAoBrsB,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EAApBqsB,MAAAA;AACD;;AACD,aAAA,CAAA;AACD;AAED;AACF;AACA;;;;WACSC,iCAAuB,WAAvBA,EAEyB;AAC9B,WAAA,cAAA,CAAoBtsB,WAAW,CAA/B,SAAA;AACA,WAAA,cAAA,CAAoBA,WAAW,CAA/B,IAAA,EAAA,CAAA;;AAEA,0BAKImI,UAAU,CACZ6jB,yBAAyB,CADb,iBAAA,EAEZhsB,WAAW,CAPb,IAKc,CALd;AAAA,UAAM,aAAN,iBAAM,aAAN;AAAA,UAAM,sBAAN,iBAAM,sBAAN;AAAA,UAAM,aAAN,iBAAM,aAAN;AAAA,UAIEusB,cAJF,iBAIEA,cAJF;;AAUA,UAAMF,CAA+B,GAAG;AACtCJ,QAAAA,WAAW,EAAEjsB,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EADyB,MAAA;AAEtCwsB,QAAAA,aAAa,EAAExsB,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EAFuB,MAAA;AAGtCysB,QAAAA,aAAa,EAHyB,aAAA;AAItCF,QAAAA,cAAc,EAAE,IAAA,SAAA,CAJsB,cAItB,CAJsB;AAKtC/iB,QAAAA,mBAAmB,EAAE,IAAA,SAAA,CALiB,aAKjB,CALiB;AAMtC4iB,QAAAA,sBAAsB,EAAE;AACtB5sB,UAAAA,KAAK,EAAE4sB;AADe;AANc,OAAxC;;AAUA,UAAIpsB,WAAW,CAAXA,IAAAA,CAAAA,MAAAA,GAAJ,CAAA,EAAiC;AAC/BqsB,QAAAA,CAAC,CAADA,eAAAA,GAAoBrsB,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EAApBqsB,MAAAA;AACD;;AACD,aAAA,CAAA;AACD;AAED;AACF;AACA;;;;WACSK,qBAAW,WAAXA,EAAmE;AACxE,WAAA,cAAA,CAAoB1sB,WAAW,CAA/B,SAAA;AACA,WAAA,cAAA,CAAoBA,WAAW,CAA/B,IAAA,EAAA,CAAA;;AACA,0BAAmBmI,UAAU,CAC3B6jB,yBAAyB,CADE,KAAA,EAE3BhsB,WAAW,CAFb,IAA6B,CAA7B;AAAA,UAAOuI,QAAP,iBAAOA,QAAP;;AAKA,aAAO;AACL0jB,QAAAA,WAAW,EAAEjsB,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EADR,MAAA;AAEL2sB,QAAAA,gBAAgB,EAAE3sB,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EAFb,MAAA;AAGLkH,QAAAA,gBAAgB,EAAElH,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EAHb,MAAA;AAILuI,QAAAA,QAAAA,EAAAA;AAJK,OAAP;AAMD;AAED;AACF;AACA;;;;WACSqkB,qBAAW,WAAXA,EAAmE;AACxE,WAAA,cAAA,CAAoB5sB,WAAW,CAA/B,SAAA;AACA,WAAA,cAAA,CAAoBA,WAAW,CAA/B,IAAA,EAAA,CAAA;AACAmI,MAAAA,UAAU,CAAC6jB,yBAAyB,CAA1B,KAAA,EAAkChsB,WAAW,CAAvDmI,IAAU,CAAVA;AAEA,aAAO;AACL8jB,QAAAA,WAAW,EAAEjsB,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EADR,MAAA;AAEL6sB,QAAAA,iBAAiB,EAAE7sB,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EAFd,MAAA;AAGLkH,QAAAA,gBAAgB,EAAElH,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EAAoB9D;AAHjC,OAAP;AAKD;AAED;AACF;AACA;;;;WACS4wB,wBAAc,WAAdA,EAEgB;AACrB,WAAA,cAAA,CAAoB9sB,WAAW,CAA/B,SAAA;AACA,WAAA,cAAA,CAAoBA,WAAW,CAA/B,IAAA,EAAA,CAAA;;AACA,0BAAmBmI,UAAU,CAC3B6jB,yBAAyB,CADE,QAAA,EAE3BhsB,WAAW,CAFb,IAA6B,CAA7B;AAAA,UAAOuI,QAAP,iBAAOA,QAAP;;AAKA,UAAM8jB,CAAsB,GAAG;AAC7BJ,QAAAA,WAAW,EAAEjsB,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EADgB,MAAA;AAE7B0I,QAAAA,QAAQ,EAAE1I,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EAFmB,MAAA;AAG7BkH,QAAAA,gBAAgB,EAAElH,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EAHW,MAAA;AAI7BuI,QAAAA,QAAAA,EAAAA;AAJ6B,OAA/B;;AAMA,UAAIvI,WAAW,CAAXA,IAAAA,CAAAA,MAAAA,GAAJ,CAAA,EAAiC;AAC/BqsB,QAAAA,CAAC,CAADA,eAAAA,GAAoBrsB,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EAApBqsB,MAAAA;AACD;;AACD,aAAA,CAAA;AACD;AAED;AACF;AACA;;;;WACSU,0BAAgB,WAAhBA,EAEkB;AACvB,WAAA,cAAA,CAAoB/sB,WAAW,CAA/B,SAAA;AACA,WAAA,cAAA,CAAoBA,WAAW,CAA/B,IAAA,EAAA,CAAA;AACAmI,MAAAA,UAAU,CAAC6jB,yBAAyB,CAA1B,UAAA,EAAuChsB,WAAW,CAA5DmI,IAAU,CAAVA;AAEA,aAAO;AACL8jB,QAAAA,WAAW,EAAEjsB,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EADR,MAAA;AAELkH,QAAAA,gBAAgB,EAAElH,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EAAoB9D;AAFjC,OAAP;AAID;AAED;AACF;AACA;;;;WACSuN,wBAAc,SAAdA,EAAqC;AAC1C,UAAI,CAACvO,SAAS,CAATA,MAAAA,CAAiB8xB,YAAY,CAAlC,SAAK9xB,CAAL,EAA+C;AAC7C,cAAM,IAAA,KAAA,CAAN,oDAAM,CAAN;AACD;AACF;AAED;AACF;AACA;;;;WACSyO,wBAAc,IAAdA,EAAc,cAAdA,EAAyD;AAC9D,UAAIxI,IAAI,CAAJA,MAAAA,GAAJ,cAAA,EAAkC;AAChC,cAAM,IAAA,KAAA,sCAC0BA,IAAI,CAACP,MAD/B,sCAAN,cAAM,EAAN;AAGD;AACF;;;;;AAGH;AACA;AACA;;AA+CA;AACA;AACA;AACA;;;IACaorB,yBAAyB,GAAG,MAAM,CAAN,MAAA,CAItC;AACDiB,EAAAA,UAAU,EAAE;AACVztB,IAAAA,KAAK,EADK,CAAA;AAEV+H,IAAAA,MAAM,EAAE7J,YAAY,CAAZA,MAAAA,CAA6D,CACnEA,YAAY,CAAZA,GAAAA,CADmE,aACnEA,CADmE,EAEnEoD,UAFmE,EAAA,EAGnEA,MAHMpD,EAA6D,CAA7DA;AAFE,GADX;AASDwvB,EAAAA,SAAS,EAAE;AACT1tB,IAAAA,KAAK,EADI,CAAA;AAET+H,IAAAA,MAAM,EAAE7J,YAAY,CAAZA,MAAAA,CAA4D,CAClEA,YAAY,CAAZA,GAAAA,CADkE,aAClEA,CADkE,EAElEoD,SAAAA,CAFkE,eAElEA,CAFkE,EAGlEpD,YAAY,CAAZA,GAAAA,CAHMA,wBAGNA,CAHkE,CAA5DA;AAFC,GATV;AAiBDyvB,EAAAA,QAAQ,EAAE;AACR3tB,IAAAA,KAAK,EADG,CAAA;AAER+H,IAAAA,MAAM,EAAE7J,YAAY,CAAZA,MAAAA,CAA2D,CACjEA,YAAY,CAAZA,GAAAA,CADMA,aACNA,CADiE,CAA3DA;AAFA,GAjBT;AAuBD0vB,EAAAA,KAAK,EAAE;AACL5tB,IAAAA,KAAK,EADA,CAAA;AAEL+H,IAAAA,MAAM,EAAE7J,YAAY,CAAZA,MAAAA,CAAwD,CAC9DA,YAAY,CAAZA,GAAAA,CAD8D,aAC9DA,CAD8D,EAE9DA,YAAY,CAAZA,IAAAA,CAFMA,UAENA,CAF8D,CAAxDA;AAFH,GAvBN;AA8BD2vB,EAAAA,QAAQ,EAAE;AACR7tB,IAAAA,KAAK,EADG,CAAA;AAER+H,IAAAA,MAAM,EAAE7J,YAAY,CAAZA,MAAAA,CAA2D,CACjEA,YAAY,CAAZA,GAAAA,CADiE,aACjEA,CADiE,EAEjEA,YAAY,CAAZA,IAAAA,CAFMA,UAENA,CAFiE,CAA3DA;AAFA,GA9BT;AAqCD4vB,EAAAA,UAAU,EAAE;AACV9tB,IAAAA,KAAK,EADK,CAAA;AAEV+H,IAAAA,MAAM,EAAE7J,YAAY,CAAZA,MAAAA,CAA6D,CACnEA,YAAY,CAAZA,GAAAA,CADMA,aACNA,CADmE,CAA7DA;AAFE,GArCX;AA2CD6vB,EAAAA,KAAK,EAAE;AACL/tB,IAAAA,KAAK,EADA,CAAA;AAEL+H,IAAAA,MAAM,EAAE7J,YAAY,CAAZA,MAAAA,CAAwD,CAC9DA,YAAY,CAAZA,GAAAA,CADMA,aACNA,CAD8D,CAAxDA;AAFH,GA3CN;AAiDD8vB,EAAAA,iBAAiB,EAAE;AACjBhuB,IAAAA,KAAK,EADY,CAAA;AAEjB+H,IAAAA,MAAM,EAAE7J,YAAY,CAAZA,MAAAA,CACN,CACEA,YAAY,CAAZA,GAAAA,CADF,aACEA,CADF,EAEEoD,SAAAA,CAFF,eAEEA,CAFF,EAGEpD,YAAY,CAAZA,GAAAA,CAHF,wBAGEA,CAHF,EAIEoD,UAAAA,CAJF,eAIEA,CAJF,EAKEA,SAAAA,CANIpD,gBAMJoD,CALF,CADMpD;AAFS;AAjDlB,CAJsC,C;AAmEzC;AACA;AACA;;AAMA;AACA;AACA;;IACa+vB,wBAAwB,GAAG,MAAM,CAAN,MAAA,CAAc;AACpDC,EAAAA,MAAM,EAAE;AACNluB,IAAAA,KAAK,EAAE;AADD,GAD4C;AAIpDmuB,EAAAA,UAAU,EAAE;AACVnuB,IAAAA,KAAK,EAAE;AADG;AAJwC,CAAd,C;AASxC;AACA;AACA;;IACO,Y;AACL;AACF;AACA;AACEpG,0BAAc;AAAA;AAAE;AAEhB;AACF;AACA;;AAcE;AACF;AACA;;;;;WACSw0B,oBAAU,MAAVA,EAAkE;AACvE,UAAM,WAAN,GAAA,MAAA,CAAM,WAAN;AAAA,UAAM,UAAN,GAAA,MAAA,CAAM,UAAN;AAAA,UAAwCC,WAAxC,GAAA,MAAA,CAAgCzvB,MAAhC;AACA,UAAMA,MAAc,GAAGyvB,WAAW,IAAIjC,MAAM,CAA5C,OAAA;AACA,UAAMrtB,IAAI,GAAGytB,yBAAyB,CAAtC,UAAA;AACA,UAAMhuB,IAAI,GAAG0M,UAAU,CAAA,IAAA,EAAO;AAC5BvM,QAAAA,UAAU,EAAE;AACVutB,UAAAA,MAAM,EAAE/0B,QAAQ,CAACwH,UAAU,CAAVA,MAAAA,CADP,QACOA,EAAD,CADN;AAEVwtB,UAAAA,UAAU,EAAEh1B,QAAQ,CAACwH,UAAU,CAAVA,UAAAA,CAAD,QAACA,EAAD;AAFV,SADgB;AAK5BC,QAAAA,MAAM,EAAE;AACNytB,UAAAA,aAAa,EAAEztB,MAAM,CADf,aAAA;AAENuQ,UAAAA,KAAK,EAAEvQ,MAAM,CAFP,KAAA;AAGN0tB,UAAAA,SAAS,EAAEn1B,QAAQ,CAACyH,MAAM,CAANA,SAAAA,CAAD,QAACA,EAAD;AAHb;AALoB,OAAP,CAAvB;AAWA,UAAMgN,eAAe,GAAG;AACtBjK,QAAAA,IAAI,EAAE,CACJ;AAACjF,UAAAA,MAAM,EAAP,WAAA;AAAsB8F,UAAAA,QAAQ,EAA9B,KAAA;AAAuCD,UAAAA,UAAU,EAAE;AAAnD,SADI,EAEJ;AAAC7F,UAAAA,MAAM,EAAP,kBAAA;AAA6B8F,UAAAA,QAAQ,EAArC,KAAA;AAA8CD,UAAAA,UAAU,EAAE;AAA1D,SAFI,CADgB;AAKtB7G,QAAAA,SAAS,EAAE,KALW,SAAA;AAMtB8C,QAAAA,IAAAA,EAAAA;AANsB,OAAxB;AAQA,aAAO,IAAA,sBAAA,CAAP,eAAO,CAAP;AACD;AAED;AACF;AACA;AACA;;;;WACSgN,+BAAqB,MAArBA,EAEQ;AACb,UAAMjK,WAAW,GAAG,IAApB,WAAoB,EAApB;AACAA,MAAAA,WAAW,CAAXA,GAAAA,CACE,aAAa,CAAb,qBAAA,CAAoC;AAClCsH,QAAAA,UAAU,EAAEsC,MAAM,CADgB,UAAA;AAElCrC,QAAAA,gBAAgB,EAAEqC,MAAM,CAFU,WAAA;AAGlC/B,QAAAA,UAAU,EAAE+B,MAAM,CAHgB,UAAA;AAIlCpP,QAAAA,IAAI,EAAEoP,MAAM,CAJsB,IAAA;AAKlCpC,QAAAA,QAAQ,EAAEoC,MAAM,CALkB,QAAA;AAMlCnC,QAAAA,KAAK,EAAE,KAN2B,KAAA;AAOlCtN,QAAAA,SAAS,EAAE,KAAKA;AAPkB,OAApC,CADF6F;AAYA,UAAM,WAAN,GAAA,MAAA,CAAM,WAAN;AAAA,UAAM,UAAN,GAAA,MAAA,CAAM,UAAN;AAAA,UAAgC3C,MAAhC,GAAA,MAAA,CAAgCA,MAAhC;AACA,aAAO,WAAW,CAAX,GAAA,CAAgB,KAAA,UAAA,CAAgB;AAAC6tB,QAAAA,WAAD,EAACA,WAAD;AAAc9tB,QAAAA,UAAd,EAAcA,UAAd;AAA0BC,QAAAA,MAAAA,EAAAA;AAA1B,OAAhB,CAAhB,CAAP;AACD;AAED;AACF;AACA;;;;WACSqM,uBAAa,MAAbA,EAA6D;AAClE,UAAM1J,WAAW,GAAG,IAApB,WAAoB,EAApB;AACAA,MAAAA,WAAW,CAAXA,GAAAA,CACE,aAAa,CAAb,aAAA,CAA4B;AAC1BsH,QAAAA,UAAU,EAAEsC,MAAM,CADQ,UAAA;AAE1BrC,QAAAA,gBAAgB,EAAEqC,MAAM,CAFE,WAAA;AAG1BpC,QAAAA,QAAQ,EAAEoC,MAAM,CAHU,QAAA;AAI1BnC,QAAAA,KAAK,EAAE,KAJmB,KAAA;AAK1BtN,QAAAA,SAAS,EAAE,KAAKA;AALU,OAA5B,CADF6F;AAUA,UAAM,WAAN,GAAA,MAAA,CAAM,WAAN;AAAA,UAAM,UAAN,GAAA,MAAA,CAAM,UAAN;AAAA,UAAgC3C,MAAhC,GAAA,MAAA,CAAgCA,MAAhC;AACA,aAAO,WAAW,CAAX,GAAA,CAAgB,KAAA,UAAA,CAAgB;AAAC6tB,QAAAA,WAAD,EAACA,WAAD;AAAc9tB,QAAAA,UAAd,EAAcA,UAAd;AAA0BC,QAAAA,MAAAA,EAAAA;AAA1B,OAAhB,CAAhB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;;WACS0vB,kBAAQ,MAARA,EAAmD;AACxD,UAAM,WAAN,GAAA,MAAA,CAAM,WAAN;AAAA,UAAM,gBAAN,GAAA,MAAA,CAAM,gBAAN;AAAA,UAAsClV,UAAtC,GAAA,MAAA,CAAsCA,UAAtC;AAEA,UAAMra,IAAI,GAAGytB,yBAAyB,CAAtC,QAAA;AACA,UAAMhuB,IAAI,GAAG0M,UAAU,CAAvB,IAAuB,CAAvB;AAEA,aAAO,IAAA,WAAA,GAAA,GAAA,CAAsB;AAC3BvJ,QAAAA,IAAI,EAAE,CACJ;AAACjF,UAAAA,MAAM,EAAP,WAAA;AAAsB8F,UAAAA,QAAQ,EAA9B,KAAA;AAAuCD,UAAAA,UAAU,EAAE;AAAnD,SADI,EAEJ;AAAC7F,UAAAA,MAAM,EAAP,UAAA;AAAqB8F,UAAAA,QAAQ,EAA7B,KAAA;AAAsCD,UAAAA,UAAU,EAAE;AAAlD,SAFI,EAGJ;AAAC7F,UAAAA,MAAM,EAAP,mBAAA;AAA8B8F,UAAAA,QAAQ,EAAtC,KAAA;AAA+CD,UAAAA,UAAU,EAAE;AAA3D,SAHI,EAIJ;AACE7F,UAAAA,MAAM,EADR,2BAAA;AAEE8F,UAAAA,QAAQ,EAFV,KAAA;AAGED,UAAAA,UAAU,EAAE;AAHd,SAJI,EASJ;AAAC7F,UAAAA,MAAM,EAAP,eAAA;AAA0B8F,UAAAA,QAAQ,EAAlC,KAAA;AAA2CD,UAAAA,UAAU,EAAE;AAAvD,SATI,EAUJ;AAAC7F,UAAAA,MAAM,EAAP,gBAAA;AAA2B8F,UAAAA,QAAQ,EAAnC,IAAA;AAA2CD,UAAAA,UAAU,EAAE;AAAvD,SAVI,CADqB;AAa3B7G,QAAAA,SAAS,EAAE,KAbgB,SAAA;AAc3B8C,QAAAA,IAAAA,EAAAA;AAd2B,OAAtB,CAAP;AAgBD;AAED;AACF;AACA;AACA;;;;WACS+vB,mBAAS,MAATA,EAAqD;AAC1D,UAAM,WAAN,GAAA,MAAA,CAAM,WAAN;AAAA,UAAM,gBAAN,GAAA,MAAA,CAAM,gBAAN;AAAA,UAAM,mBAAN,GAAA,MAAA,CAAM,mBAAN;AAAA,UAAM,sBAAN,GAAA,MAAA,CAAM,sBAAN;AAAA,UAKEC,eALF,GAAA,MAAA,CAKEA,eALF;AAQA,UAAMzvB,IAAI,GAAGytB,yBAAyB,CAAtC,SAAA;AACA,UAAMhuB,IAAI,GAAG0M,UAAU,CAAA,IAAA,EAAO;AAC5BujB,QAAAA,aAAa,EAAEt3B,QAAQ,CAAC6S,mBAAmB,CADf,QACJA,EAAD,CADK;AAE5B4iB,QAAAA,sBAAsB,EAAEA,sBAAsB,CAAC5sB;AAFnB,OAAP,CAAvB;AAKA,UAAM2B,IAAI,GAAG,CACX;AAACjF,QAAAA,MAAM,EAAP,WAAA;AAAsB8F,QAAAA,QAAQ,EAA9B,KAAA;AAAuCD,QAAAA,UAAU,EAAE;AAAnD,OADW,EAEX;AAAC7F,QAAAA,MAAM,EAAP,mBAAA;AAA8B8F,QAAAA,QAAQ,EAAtC,KAAA;AAA+CD,QAAAA,UAAU,EAAE;AAA3D,OAFW,EAGX;AAAC7F,QAAAA,MAAM,EAAP,gBAAA;AAA2B8F,QAAAA,QAAQ,EAAnC,IAAA;AAA2CD,QAAAA,UAAU,EAAE;AAAvD,OAHW,CAAb;;AAKA,UAAA,eAAA,EAAqB;AACnBZ,QAAAA,IAAI,CAAJA,IAAAA,CAAU;AAACjF,UAAAA,MAAM,EAAP,eAAA;AAA0B8F,UAAAA,QAAQ,EAAlC,KAAA;AAA2CD,UAAAA,UAAU,EAAE;AAAvD,SAAVZ;AACD;;AACD,aAAO,IAAA,WAAA,GAAA,GAAA,CAAsB;AAC3BA,QAAAA,IAD2B,EAC3BA,IAD2B;AAE3BjG,QAAAA,SAAS,EAAE,KAFgB,SAAA;AAG3B8C,QAAAA,IAAAA,EAAAA;AAH2B,OAAtB,CAAP;AAKD;AAED;AACF;AACA;AACA;;;;WACSkwB,2BAAiB,MAAjBA,EAAqE;AAC1E,UAAM,WAAN,GAAA,MAAA,CAAM,WAAN;AAAA,UAAM,aAAN,GAAA,MAAA,CAAM,aAAN;AAAA,UAAM,aAAN,GAAA,MAAA,CAAM,aAAN;AAAA,UAAM,cAAN,GAAA,MAAA,CAAM,cAAN;AAAA,UAAM,mBAAN,GAAA,MAAA,CAAM,mBAAN;AAAA,UAAM,sBAAN,GAAA,MAAA,CAAM,sBAAN;AAAA,UAOEF,eAPF,GAAA,MAAA,CAOEA,eAPF;AAUA,UAAMzvB,IAAI,GAAGytB,yBAAyB,CAAtC,iBAAA;AACA,UAAMhuB,IAAI,GAAG0M,UAAU,CAAA,IAAA,EAAO;AAC5BujB,QAAAA,aAAa,EAAEt3B,QAAQ,CAAC6S,mBAAmB,CADf,QACJA,EAAD,CADK;AAE5B4iB,QAAAA,sBAAsB,EAAEA,sBAAsB,CAFlB,KAAA;AAG5BK,QAAAA,aAAa,EAHe,aAAA;AAI5BF,QAAAA,cAAc,EAAE51B,QAAQ,CAAC41B,cAAc,CAAf,QAACA,EAAD;AAJI,OAAP,CAAvB;AAOA,UAAMprB,IAAI,GAAG,CACX;AAACjF,QAAAA,MAAM,EAAP,WAAA;AAAsB8F,QAAAA,QAAQ,EAA9B,KAAA;AAAuCD,QAAAA,UAAU,EAAE;AAAnD,OADW,EAEX;AAAC7F,QAAAA,MAAM,EAAP,aAAA;AAAwB8F,QAAAA,QAAQ,EAAhC,IAAA;AAAwCD,QAAAA,UAAU,EAAE;AAApD,OAFW,EAGX;AAAC7F,QAAAA,MAAM,EAAP,mBAAA;AAA8B8F,QAAAA,QAAQ,EAAtC,KAAA;AAA+CD,QAAAA,UAAU,EAAE;AAA3D,OAHW,CAAb;;AAKA,UAAA,eAAA,EAAqB;AACnBZ,QAAAA,IAAI,CAAJA,IAAAA,CAAU;AAACjF,UAAAA,MAAM,EAAP,eAAA;AAA0B8F,UAAAA,QAAQ,EAAlC,KAAA;AAA2CD,UAAAA,UAAU,EAAE;AAAvD,SAAVZ;AACD;;AACD,aAAO,IAAA,WAAA,GAAA,GAAA,CAAsB;AAC3BA,QAAAA,IAD2B,EAC3BA,IAD2B;AAE3BjG,QAAAA,SAAS,EAAE,KAFgB,SAAA;AAG3B8C,QAAAA,IAAAA,EAAAA;AAH2B,OAAtB,CAAP;AAKD;AAED;AACF;AACA;;;;WACSmwB,0BAAgB,MAAhBA,EAAmE;AACxE,UAAM,WAAN,GAAA,MAAA,CAAM,WAAN;AAAA,UAAM,gBAAN,GAAA,MAAA,CAAM,gBAAN;AAAA,UAAM,gBAAN,GAAA,MAAA,CAAM,gBAAN;AAAA,UAAwD5lB,QAAxD,GAAA,MAAA,CAAwDA,QAAxD;AACA,UAAMhK,IAAI,GAAGytB,yBAAyB,CAAtC,KAAA;AACA,UAAMhuB,IAAI,GAAG0M,UAAU,CAAA,IAAA,EAAO;AAACnC,QAAAA,QAAAA,EAAAA;AAAD,OAAP,CAAvB;AACA,aAAO,IAAA,sBAAA,CAA2B;AAChCpH,QAAAA,IAAI,EAAE,CACJ;AAACjF,UAAAA,MAAM,EAAP,WAAA;AAAsB8F,UAAAA,QAAQ,EAA9B,KAAA;AAAuCD,UAAAA,UAAU,EAAE;AAAnD,SADI,EAEJ;AAAC7F,UAAAA,MAAM,EAAP,gBAAA;AAA2B8F,UAAAA,QAAQ,EAAnC,KAAA;AAA4CD,UAAAA,UAAU,EAAE;AAAxD,SAFI,EAGJ;AAAC7F,UAAAA,MAAM,EAAP,gBAAA;AAA2B8F,UAAAA,QAAQ,EAAnC,IAAA;AAA2CD,UAAAA,UAAU,EAAE;AAAvD,SAHI,CAD0B;AAMhC7G,QAAAA,SAAS,EAAE,KANqB,SAAA;AAOhC8C,QAAAA,IAAAA,EAAAA;AAPgC,OAA3B,CAAP;AASD;AAED;AACF;AACA;;;;WACSowB,eAAK,MAALA,EAA6C;AAClD,UAAMrtB,WAAW,GAAG,IAApB,WAAoB,EAApB;AACAA,MAAAA,WAAW,CAAXA,GAAAA,CACE,aAAa,CAAb,aAAA,CAA4B;AAC1BsH,QAAAA,UAAU,EAAEsC,MAAM,CADQ,gBAAA;AAE1BrC,QAAAA,gBAAgB,EAAEqC,MAAM,CAFE,gBAAA;AAG1BpC,QAAAA,QAAQ,EAHkB,CAAA;AAI1BC,QAAAA,KAAK,EAAE,KAJmB,KAAA;AAK1BtN,QAAAA,SAAS,EAAE,KAAKA;AALU,OAA5B,CADF6F;AASA,aAAOA,WAAW,CAAXA,GAAAA,CAAgB,KAAA,gBAAA,CAAvB,MAAuB,CAAhBA,CAAP;AACD;AAED;AACF;AACA;AACA;;;;WACSstB,uBAAa,MAAbA,EAA6D;AAClE,UAAM,WAAN,GAAA,MAAA,CAAM,WAAN;AAAA,UAAM,gBAAN,GAAA,MAAA,CAAM,gBAAN;AAAA,UAAM,gBAAN,GAAA,MAAA,CAAM,gBAAN;AAAA,UAAM,UAAN,GAAA,MAAA,CAAM,UAAN;AAAA,UAAM,IAAN,GAAA,MAAA,CAAM,IAAN;AAAA,UAME9lB,QANF,GAAA,MAAA,CAMEA,QANF;AAQA,UAAMxH,WAAW,GAAG,IAApB,WAAoB,EAApB;AACAA,MAAAA,WAAW,CAAXA,GAAAA,CACE,aAAa,CAAb,QAAA,CAAuB;AACrB+H,QAAAA,aAAa,EADQ,gBAAA;AAErBF,QAAAA,UAFqB,EAErBA,UAFqB;AAGrBrN,QAAAA,IAHqB,EAGrBA,IAHqB;AAIrBiN,QAAAA,KAAK,EAAE,KAJc,KAAA;AAKrBtN,QAAAA,SAAS,EAAE,KAAKA;AALK,OAAvB,CADF6F;AASA,aAAO,WAAW,CAAX,GAAA,CACL,KAAA,gBAAA,CAAsB;AACpBkrB,QAAAA,WADoB,EACpBA,WADoB;AAEpB/kB,QAAAA,gBAFoB,EAEpBA,gBAFoB;AAGpBylB,QAAAA,gBAHoB,EAGpBA,gBAHoB;AAIpBpkB,QAAAA,QAAAA,EAAAA;AAJoB,OAAtB,CADK,CAAP;AAQD;AAED;AACF;AACA;;;;WACS+lB,eAAK,MAALA,EAA6C;AAClD,UAAM,WAAN,GAAA,MAAA,CAAM,WAAN;AAAA,UAAM,iBAAN,GAAA,MAAA,CAAM,iBAAN;AAAA,UAAuCpnB,gBAAvC,GAAA,MAAA,CAAuCA,gBAAvC;AACA,UAAM3I,IAAI,GAAGytB,yBAAyB,CAAtC,KAAA;AACA,UAAMhuB,IAAI,GAAG0M,UAAU,CAAvB,IAAuB,CAAvB;AAEA,aAAO,IAAA,WAAA,GAAA,GAAA,CAAsB;AAC3BvJ,QAAAA,IAAI,EAAE,CACJ;AAACjF,UAAAA,MAAM,EAAP,WAAA;AAAsB8F,UAAAA,QAAQ,EAA9B,KAAA;AAAuCD,UAAAA,UAAU,EAAE;AAAnD,SADI,EAEJ;AAAC7F,UAAAA,MAAM,EAAP,iBAAA;AAA4B8F,UAAAA,QAAQ,EAApC,KAAA;AAA6CD,UAAAA,UAAU,EAAE;AAAzD,SAFI,EAGJ;AAAC7F,UAAAA,MAAM,EAAP,mBAAA;AAA8B8F,UAAAA,QAAQ,EAAtC,KAAA;AAA+CD,UAAAA,UAAU,EAAE;AAA3D,SAHI,EAIJ;AACE7F,UAAAA,MAAM,EADR,2BAAA;AAEE8F,UAAAA,QAAQ,EAFV,KAAA;AAGED,UAAAA,UAAU,EAAE;AAHd,SAJI,EASJ;AAAC7F,UAAAA,MAAM,EAAP,gBAAA;AAA2B8F,UAAAA,QAAQ,EAAnC,IAAA;AAA2CD,UAAAA,UAAU,EAAE;AAAvD,SATI,CADqB;AAY3B7G,QAAAA,SAAS,EAAE,KAZgB,SAAA;AAa3B8C,QAAAA,IAAAA,EAAAA;AAb2B,OAAtB,CAAP;AAeD;AAED;AACF;AACA;;;;WACSuwB,kBAAQ,MAARA,EAAmD;AACxD,UAAM,WAAN,GAAA,MAAA,CAAM,WAAN;AAAA,UAAM,gBAAN,GAAA,MAAA,CAAM,gBAAN;AAAA,UAAM,QAAN,GAAA,MAAA,CAAM,QAAN;AAAA,UAAM,QAAN,GAAA,MAAA,CAAM,QAAN;AAAA,UAA0DP,eAA1D,GAAA,MAAA,CAA0DA,eAA1D;AAEA,UAAMzvB,IAAI,GAAGytB,yBAAyB,CAAtC,QAAA;AACA,UAAMhuB,IAAI,GAAG0M,UAAU,CAAA,IAAA,EAAO;AAACnC,QAAAA,QAAAA,EAAAA;AAAD,OAAP,CAAvB;AAEA,UAAMpH,IAAI,GAAG,CACX;AAACjF,QAAAA,MAAM,EAAP,WAAA;AAAsB8F,QAAAA,QAAQ,EAA9B,KAAA;AAAuCD,QAAAA,UAAU,EAAE;AAAnD,OADW,EAEX;AAAC7F,QAAAA,MAAM,EAAP,QAAA;AAAmB8F,QAAAA,QAAQ,EAA3B,KAAA;AAAoCD,QAAAA,UAAU,EAAE;AAAhD,OAFW,EAGX;AAAC7F,QAAAA,MAAM,EAAP,mBAAA;AAA8B8F,QAAAA,QAAQ,EAAtC,KAAA;AAA+CD,QAAAA,UAAU,EAAE;AAA3D,OAHW,EAIX;AACE7F,QAAAA,MAAM,EADR,2BAAA;AAEE8F,QAAAA,QAAQ,EAFV,KAAA;AAGED,QAAAA,UAAU,EAAE;AAHd,OAJW,EASX;AAAC7F,QAAAA,MAAM,EAAP,gBAAA;AAA2B8F,QAAAA,QAAQ,EAAnC,IAAA;AAA2CD,QAAAA,UAAU,EAAE;AAAvD,OATW,CAAb;;AAWA,UAAA,eAAA,EAAqB;AACnBZ,QAAAA,IAAI,CAAJA,IAAAA,CAAU;AAACjF,UAAAA,MAAM,EAAP,eAAA;AAA0B8F,UAAAA,QAAQ,EAAlC,KAAA;AAA2CD,UAAAA,UAAU,EAAE;AAAvD,SAAVZ;AACD;;AACD,aAAO,IAAA,WAAA,GAAA,GAAA,CAAsB;AAC3BA,QAAAA,IAD2B,EAC3BA,IAD2B;AAE3BjG,QAAAA,SAAS,EAAE,KAFgB,SAAA;AAG3B8C,QAAAA,IAAAA,EAAAA;AAH2B,OAAtB,CAAP;AAKD;AAED;AACF;AACA;;;;WACSwwB,oBAAU,MAAVA,EAAuD;AAC5D,UAAM,WAAN,GAAA,MAAA,CAAM,WAAN;AAAA,UAAoBtnB,gBAApB,GAAA,MAAA,CAAoBA,gBAApB;AACA,UAAM3I,IAAI,GAAGytB,yBAAyB,CAAtC,UAAA;AACA,UAAMhuB,IAAI,GAAG0M,UAAU,CAAvB,IAAuB,CAAvB;AAEA,aAAO,IAAA,WAAA,GAAA,GAAA,CAAsB;AAC3BvJ,QAAAA,IAAI,EAAE,CACJ;AAACjF,UAAAA,MAAM,EAAP,WAAA;AAAsB8F,UAAAA,QAAQ,EAA9B,KAAA;AAAuCD,UAAAA,UAAU,EAAE;AAAnD,SADI,EAEJ;AAAC7F,UAAAA,MAAM,EAAP,mBAAA;AAA8B8F,UAAAA,QAAQ,EAAtC,KAAA;AAA+CD,UAAAA,UAAU,EAAE;AAA3D,SAFI,EAGJ;AAAC7F,UAAAA,MAAM,EAAP,gBAAA;AAA2B8F,UAAAA,QAAQ,EAAnC,IAAA;AAA2CD,UAAAA,UAAU,EAAE;AAAvD,SAHI,CADqB;AAM3B7G,QAAAA,SAAS,EAAE,KANgB,SAAA;AAO3B8C,QAAAA,IAAAA,EAAAA;AAP2B,OAAtB,CAAP;AASD;;;;;;AA/UUgvB,YAAAA,CASJ9xB,SATI8xB,GASmB,IAAA,SAAA,CAAA,6CAAA,CATnBA;AAAAA,YAAAA,CAoBJxkB,KApBIwkB,GAoBY,GApBZA;AChkBb,IAAM,eAAN,GAAA,SAAA,CAAM,eAAN;AAAA,IAAwByB,SAAxB,GAAA,SAAA,CAAwBA,SAAxB;AAEA,IAAMnE,iBAAiB,GAAvB,EAAA;AACA,IAAMoE,sBAAsB,GAA5B,EAAA;AACA,IAAMnE,gBAAgB,GAAtB,EAAA;AACA,IAAMoE,iCAAiC,GAAvC,EAAA;AAEA;AACA;AACA;;AA6BA,IAAMC,4BAA4B,GAAGlxB,YAAY,CAAZA,MAAAA,CAcnC,CACAA,YAAY,CAAZA,EAAAA,CADA,eACAA,CADA,EAEAA,YAAY,CAAZA,GAAAA,CAFA,iBAEAA,CAFA,EAGAA,YAAY,CAAZA,EAAAA,CAHA,2BAGAA,CAHA,EAIAA,YAAY,CAAZA,GAAAA,CAJA,kBAIAA,CAJA,EAKAA,YAAY,CAAZA,EAAAA,CALA,4BAKAA,CALA,EAMAA,YAAY,CAAZA,GAAAA,CANA,mBAMAA,CANA,EAOAA,YAAY,CAAZA,GAAAA,CAPA,iBAOAA,CAPA,EAQAA,YAAY,CAAZA,EAAAA,CARA,yBAQAA,CARA,EASAA,YAAY,CAAZA,IAAAA,CAAAA,EAAAA,EATA,YASAA,CATA,EAUAA,YAAY,CAAZA,IAAAA,CAAAA,EAAAA,EAVA,WAUAA,CAVA,EAWAA,YAAY,CAAZA,EAAAA,CAzBF,YAyBEA,CAXA,CAdmCA,CAArC;;IA4BO,gB;AACL;AACF;AACA;AACEtE,8BAAc;AAAA;AAAE;AAEhB;AACF;AACA;;AAKE;AACF;AACA;AACA;;;;;WACS01B,+BAAqB,SAArBA,EAEG;AACRh4B,MAAAA,MAAM,CACJ0D,SAAS,CAATA,MAAAA,KADI,gBAAA,+BAEkB+vB,gBAFlB,iCAEyD/vB,SAAS,CAFxE1D,MAAM,YAANA;;AAKA,UAAI;AACF,eAAOD,MAAM,CAANA,IAAAA,CACLk4B,IAAI,CAAJA,UAAAA,CAAAA,MAAAA,CAAuBp4B,QAAQ,CAA/Bo4B,SAA+B,CAA/BA,EADKl4B,MACLk4B,EADKl4B,EAAAA,KAAAA,CAEC,CAFR,sBAAOA,CAAP;AADF,OAAA,CAIE,OAAA,KAAA,EAAc;AACd,cAAM,IAAA,KAAA,gDAAN,KAAM,EAAN;AACD;AACF;AAED;AACF;AACA;AACA;;;;WACS8zB,wCAA8B,MAA9BA,EAEmB;AACxB,UAAM,SAAN,GAAA,MAAA,CAAM,SAAN;AAAA,UAAM,OAAN,GAAA,MAAA,CAAM,OAAN;AAAA,UAAM,SAAN,GAAA,MAAA,CAAM,SAAN;AAAA,UAAM,UAAN,GAAA,MAAA,CAAM,UAAN;AAAA,UAAkDC,gBAAlD,GAAA,MAAA,CAAkDA,gBAAlD;AAEA,aAAO,gBAAgB,CAAhB,+BAAA,CAAiD;AACtDoE,QAAAA,UAAU,EAAEH,gBAAgB,CAAhBA,qBAAAA,CAD0C,SAC1CA,CAD0C;AAEtDltB,QAAAA,OAFsD,EAEtDA,OAFsD;AAGtDO,QAAAA,SAHsD,EAGtDA,SAHsD;AAItD+sB,QAAAA,UAJsD,EAItDA,UAJsD;AAKtDrE,QAAAA,gBAAAA,EAAAA;AALsD,OAAjD,CAAP;AAOD;AAED;AACF;AACA;AACA;;;;WACSsE,yCAA+B,MAA/BA,EAEmB;AACxB,UAAM,UAAN,GAAA,MAAA,CACEF,UADF;AAAA,UAAM,OAAN,GAAA,MAAA,CAAM,OAAN;AAAA,UAAM,SAAN,GAAA,MAAA,CAAM,SAAN;AAAA,UAAM,UAAN,GAAA,MAAA,CAAM,UAAN;AAAA,kCAAA,MAAA,CAKEpE,gBALF;AAAA,UAKEA,gBALF,sCAKqB,CALrB;AAQA,UAAA,UAAA;;AACA,UAAI,OAAA,UAAA,KAAJ,QAAA,EAAoC;AAClC,YAAIuE,UAAU,CAAVA,UAAAA,CAAJ,IAAIA,CAAJ,EAAiC;AAC/BH,UAAAA,UAAU,GAAGn4B,MAAM,CAANA,IAAAA,CAAYs4B,UAAU,CAAVA,MAAAA,CAAZt4B,CAAYs4B,CAAZt4B,EAAbm4B,KAAan4B,CAAbm4B;AADF,SAAA,MAEO;AACLA,UAAAA,UAAU,GAAGn4B,MAAM,CAANA,IAAAA,CAAAA,UAAAA,EAAbm4B,KAAan4B,CAAbm4B;AACD;AALH,OAAA,MAMO;AACLA,QAAAA,UAAU,GAAVA,UAAAA;AACD;;AAEDl4B,MAAAA,MAAM,CACJk4B,UAAU,CAAVA,MAAAA,KADI,sBAAA,4BAEeN,sBAFf,iCAE4DM,UAAU,CAF5El4B,MAAM,YAANA;AAKA,UAAMs4B,SAAS,GAAG,IAAlB,iCAAA;AACA,UAAMC,gBAAgB,GAAtB,SAAA;AACA,UAAMvE,eAAe,GAAGsE,SAAS,GAAGJ,UAAU,CAA9C,MAAA;AACA,UAAMjE,iBAAiB,GAAGD,eAAe,GAAG5oB,SAAS,CAA3B4oB,MAAAA,GAA1B,CAAA;AACA,UAAME,aAAa,GAAnB,CAAA;AAEA,UAAM5f,eAAe,GAAGvU,MAAM,CAANA,KAAAA,CACtB+3B,4BAA4B,CAA5BA,IAAAA,GAAoCjtB,OAAO,CAD7C,MAAwB9K,CAAxB;AAIA+3B,MAAAA,4BAA4B,CAA5BA,MAAAA,CACE;AACE5D,QAAAA,aADF,EACEA,aADF;AAEEF,QAAAA,eAFF,EAEEA,eAFF;AAGEI,QAAAA,yBAAyB,EAH3B,gBAAA;AAIEmE,QAAAA,gBAJF,EAIEA,gBAJF;AAKEC,QAAAA,0BAA0B,EAL5B,gBAAA;AAMEvE,QAAAA,iBANF,EAMEA,iBANF;AAOEK,QAAAA,eAAe,EAAEzpB,OAAO,CAP1B,MAAA;AAQE0pB,QAAAA,uBAAuB,EARzB,gBAAA;AASEnpB,QAAAA,SAAS,EAAEvL,QAAQ,CATrB,SASqB,CATrB;AAUEq4B,QAAAA,UAAU,EAAEr4B,QAAQ,CAVtB,UAUsB,CAVtB;AAWEs4B,QAAAA,UAAAA,EAAAA;AAXF,OADFL,EAAAA,eAAAA;AAiBAxjB,MAAAA,eAAe,CAAfA,IAAAA,CAAqBzU,QAAQ,CAA7ByU,OAA6B,CAA7BA,EAAwCwjB,4BAA4B,CAApExjB,IAAAA;AAEA,aAAO,IAAA,sBAAA,CAA2B;AAChCjK,QAAAA,IAAI,EAD4B,EAAA;AAEhCjG,QAAAA,SAAS,EAAE2zB,gBAAgB,CAFK,SAAA;AAGhC7wB,QAAAA,IAAI,EAAEoN;AAH0B,OAA3B,CAAP;AAKD;AAED;AACF;AACA;AACA;;;;WACSkgB,yCAA+B,MAA/BA,EAEmB;AACxB,UAAM,IAAN,GAAA,MAAA,CAAOC,UAAP;AAAA,UAAM,OAAN,GAAA,MAAA,CAAM,OAAN;AAAA,UAAkCX,gBAAlC,GAAA,MAAA,CAAkCA,gBAAlC;AAEA9zB,MAAAA,MAAM,CACJy4B,IAAI,CAAJA,MAAAA,KADI,iBAAA,gCAEmBjF,iBAFnB,iCAE2DiF,IAAI,CAFrEz4B,MAAM,YAANA;;AAKA,UAAI;AACF,YAAMy0B,UAAU,GAAG50B,QAAQ,CAA3B,IAA2B,CAA3B;;AACA,YAAM6D,WAAS,GAAGg1B,eAAe,CAAA,UAAA,EAAfA,KAAe,CAAfA,CAAAA,KAAAA,CAFhB,CAEgBA,CAAlB,CAFE,CAAA;;;AAGF,YAAMC,WAAW,GAAG54B,MAAM,CAANA,IAAAA,CAClBk4B,IAAI,CAAJA,UAAAA,CAAAA,MAAAA,CAAuBp4B,QAAQ,CAA/Bo4B,OAA+B,CAA/BA,EADF,MACEA,EADkBl4B,CAApB;;AAGA,yBAAuC43B,SAAS,CAAA,WAAA,EAAhD,UAAgD,CAAhD;AAAA,YAAM,SAAN,cAAM,SAAN;AAAA,YAAyBQ,UAAzB,cAAkBS,KAAlB;;AAEA,eAAO,KAAA,8BAAA,CAAoC;AACzCl1B,UAAAA,SADyC,EACzCA,WADyC;AAEzCmH,UAAAA,OAFyC,EAEzCA,OAFyC;AAGzCO,UAAAA,SAHyC,EAGzCA,SAHyC;AAIzC+sB,UAAAA,UAJyC,EAIzCA,UAJyC;AAKzCrE,UAAAA,gBAAAA,EAAAA;AALyC,SAApC,CAAP;AARF,OAAA,CAeE,OAAA,KAAA,EAAc;AACd,cAAM,IAAA,KAAA,uCAAN,KAAM,EAAN;AACD;AACF;;;;;;AAvJUiE,gBAAAA,CASJ3zB,SATI2zB,GASmB,IAAA,SAAA,CAAA,6CAAA,CATnBA;IChEAc,kBAAkB,GAAG,IAAA,SAAA,CAA3B,6CAA2B,C;AAIlC;AACA;AACA;;AAoBA,IAAMC,UAAU,GAAGjf,IAAI,CAAC;AACtBkf,EAAAA,IAAI,EAAEzf,MADgB,EAAA;AAEtB0f,EAAAA,OAAO,EAAE5e,QAAQ,CAACd,MAFI,EAEL,CAFK;AAGtB2f,EAAAA,OAAO,EAAE7e,QAAQ,CAACd,MAHI,EAGL,CAHK;AAItB4f,EAAAA,eAAe,EAAE9e,QAAQ,CAACd,MAAD,EAAA;AAJH,CAAD,CAAvB;AAOA;AACA;AACA;;IACO,a;AACL;AACF;AACA;;AAEE;AACF;AACA;;AAGE;AACF;AACA;AACA;AACA;AACA;AACEhX,yBAAW,GAAXA,EAAW,IAAXA,EAAwC;AAAA;;AAAA,SAZxCS,GAYwC,GAAA,KAAA,CAAA;AAAA,SARxCyrB,IAQwC,GAAA,KAAA,CAAA;AACtC,SAAA,GAAA,GAAA,GAAA;AACA,SAAA,IAAA,GAAA,IAAA;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;;WACS2K,wBAAc,MAAdA,EAEiB;AACtB,UAAMnxB,aAAa,GAAnB,EAAA;;AAEA,UAAIwC,SAAS,sBAAb,MAAa,CAAb;;AACA,UAAM4uB,cAAc,GAAGnwB,YAAAA,CAAvB,SAAuBA,CAAvB;AACA,UAAImwB,cAAc,KAAlB,CAAA,EAA0B,OAAA,IAAA;AAE1B,UAAMC,UAA4B,GAAlC,EAAA;;AACA,WAAK,IAAI3uB,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAjB,CAAA,EAAuBA,CAAvB,EAAA,EAA4B;AAC1B,YAAMhH,WAAS,GAAG,IAAA,SAAA,CAAc8G,SAAS,CAATA,KAAAA,CAAAA,CAAAA,EAAhC,aAAgCA,CAAd,CAAlB;;AACAA,QAAAA,SAAS,GAAGA,SAAS,CAATA,KAAAA,CAAZA,aAAYA,CAAZA;AACA,YAAMU,QAAQ,GAAGV,SAAS,CAATA,KAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,MAAjB,CAAA;AACAA,QAAAA,SAAS,GAAGA,SAAS,CAATA,KAAAA,CAAZA,CAAYA,CAAZA;AACA6uB,QAAAA,UAAU,CAAVA,IAAAA,CAAgB;AAAC31B,UAAAA,SAAD,EAACA,WAAD;AAAYwH,UAAAA,QAAAA,EAAAA;AAAZ,SAAhBmuB;AACD;;AAED,UAAIA,UAAU,CAAVA,CAAU,CAAVA,CAAAA,SAAAA,CAAAA,MAAAA,CAAJ,kBAAIA,CAAJ,EAAwD;AACtD,YAAIA,UAAU,CAAVA,CAAU,CAAVA,CAAJ,QAAA,EAA4B;AAC1B,cAAMC,OAAY,GAAGtvB,UAAAA,GAAAA,MAAAA,CAA2BjK,MAAM,CAANA,IAAAA,CAAhD,SAAgDA,CAA3BiK,CAArB;AACA,cAAMwkB,IAAI,GAAGviB,IAAI,CAAJA,KAAAA,CAAb,OAAaA,CAAb;AACAstB,UAAAA,QAAU,CAAA,IAAA,EAAVA,UAAU,CAAVA;AACA,iBAAO,IAAA,aAAA,CAAkBF,UAAU,CAAVA,CAAU,CAAVA,CAAlB,SAAA,EAAP,IAAO,CAAP;AACD;AACF;;AAED,aAAA,IAAA;AACD;;;;;;ICjGUG,eAAe,GAAG,IAAA,SAAA,CAAxB,6CAAwB,C;AAgE/B;AACA;AACA;AACA;AACA;;AACA,IAAMC,iBAAiB,GAAG7yB,YAAY,CAAZA,MAAAA,CAAqC,CAC7DoD,SAAAA,CAD6D,YAC7DA,CAD6D,EAE7DA,SAAAA,CAF6D,sBAE7DA,CAF6D,EAG7DpD,YAAY,CAAZA,EAAAA,CAH6D,YAG7DA,CAH6D,EAI7DA,YAAY,CAJiD,IAI7DA,EAJ6D,EAAA;AAK7DA,YAAY,CAAZA,GAAAA,CACEA,YAAY,CAAZA,MAAAA,CAAoB,CAClBA,YAAY,CAAZA,IAAAA,CADkB,MAClBA,CADkB,EAElBA,YAAY,CAAZA,GAAAA,CAHJA,mBAGIA,CAFkB,CAApBA,CADFA,EAKEA,YAAY,CAAZA,MAAAA,CAAoBA,YAAY,CAAhCA,GAAoBA,EAApBA,EAAwC,CAL1CA,CAKEA,CALFA,EAL6D,OAK7DA,CAL6D,EAa7DA,YAAY,CAAZA,EAAAA,CAb6D,eAa7DA,CAb6D,EAc7DA,YAAY,CAAZA,IAAAA,CAd6D,UAc7DA,CAd6D,EAe7DA,YAAY,CAfiD,IAe7DA,EAf6D,EAAA;AAgB7DA,YAAY,CAAZA,GAAAA,CACEA,YAAY,CAAZA,MAAAA,CAAoB,CAClBA,YAAY,CAAZA,IAAAA,CADkB,OAClBA,CADkB,EAElBoD,SAAAA,CAHJpD,iBAGIoD,CAFkB,CAApBpD,CADFA,EAKEA,YAAY,CAAZA,MAAAA,CAAoBA,YAAY,CAAhCA,GAAoBA,EAApBA,EAAwC,CAL1CA,CAKEA,CALFA,EAhB6D,kBAgB7DA,CAhB6D,EAwB7DA,YAAY,CAAZA,MAAAA,CACE,CACEA,YAAY,CAAZA,GAAAA,CACEA,YAAY,CAAZA,MAAAA,CAAoB,CAClBoD,SAAAA,CADkB,kBAClBA,CADkB,EAElBpD,YAAY,CAAZA,IAAAA,CAFkB,6BAElBA,CAFkB,EAGlBA,YAAY,CAAZA,IAAAA,CAJJA,aAIIA,CAHkB,CAApBA,CADFA,EAAAA,EAAAA,EADF,KACEA,CADF,EAUEA,YAAY,CAAZA,IAAAA,CAVF,KAUEA,CAVF,EAWEA,YAAY,CAAZA,EAAAA,CAZJA,SAYIA,CAXF,CADFA,EAxB6D,aAwB7DA,CAxB6D,EAwC7DA,YAAY,CAxCiD,IAwC7DA,EAxC6D,EAAA;AAyC7DA,YAAY,CAAZA,GAAAA,CACEA,YAAY,CAAZA,MAAAA,CAAoB,CAClBA,YAAY,CAAZA,IAAAA,CADkB,OAClBA,CADkB,EAElBA,YAAY,CAAZA,IAAAA,CAFkB,SAElBA,CAFkB,EAGlBA,YAAY,CAAZA,IAAAA,CAJJA,aAIIA,CAHkB,CAApBA,CADFA,EAMEA,YAAY,CAAZA,MAAAA,CAAoBA,YAAY,CAAhCA,GAAoBA,EAApBA,EAAwC,CAN1CA,CAMEA,CANFA,EAzC6D,cAyC7DA,CAzC6D,EAkD7DA,YAAY,CAAZA,MAAAA,CACE,CAACA,YAAY,CAAZA,IAAAA,CAAD,MAACA,CAAD,EAA4BA,YAAY,CAAZA,IAAAA,CAD9BA,WAC8BA,CAA5B,CADFA,EAlDF,eAkDEA,CAlD6D,CAArCA,CAA1B;AAoEA;AACA;AACA;;IACO,W;AAWL;AACF;AACA;AACEtE,uBAAW,IAAXA,EAAmC;AAAA;;AAAA,SAbnCyf,UAamC,GAAA,KAAA,CAAA;AAAA,SAZnC2X,oBAYmC,GAAA,KAAA,CAAA;AAAA,SAXnCvX,UAWmC,GAAA,KAAA,CAAA;AAAA,SAVnCE,QAUmC,GAAA,KAAA,CAAA;AAAA,SATnCsX,KASmC,GAAA,KAAA,CAAA;AAAA,SARnCC,gBAQmC,GAAA,KAAA,CAAA;AAAA,SAPnCC,WAOmC,GAAA,KAAA,CAAA;AAAA,SANnC3X,YAMmC,GAAA,KAAA,CAAA;AAAA,SALnC4X,aAKmC,GAAA,KAAA,CAAA;AACjC,SAAA,UAAA,GAAkBxxB,IAAI,CAAtB,UAAA;AACA,SAAA,oBAAA,GAA4BA,IAAI,CAAhC,oBAAA;AACA,SAAA,UAAA,GAAkBA,IAAI,CAAtB,UAAA;AACA,SAAA,QAAA,GAAgBA,IAAI,CAApB,QAAA;AACA,SAAA,KAAA,GAAaA,IAAI,CAAjB,KAAA;AACA,SAAA,gBAAA,GAAwBA,IAAI,CAA5B,gBAAA;AACA,SAAA,WAAA,GAAmBA,IAAI,CAAvB,WAAA;AACA,SAAA,YAAA,GAAoBA,IAAI,CAAxB,YAAA;AACA,SAAA,aAAA,GAAqBA,IAAI,CAAzB,aAAA;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;;WACSgI,yBAAe,MAAfA,EAEQ;AACb,UAAMypB,aAAa,GAAnB,CAAA;AACA,UAAMC,EAAE,GAAGP,iBAAiB,CAAjBA,MAAAA,CAAyB55B,QAAQ,CAAjC45B,MAAiC,CAAjCA,EAAX,aAAWA,CAAX;AAEA,UAAIpX,QAAuB,GAAG2X,EAAE,CAAhC,QAAA;;AACA,UAAI,CAACA,EAAE,CAAP,aAAA,EAAuB;AACrB3X,QAAAA,QAAQ,GAARA,IAAAA;AACD;;AAED,aAAO,IAAA,WAAA,CAAgB;AACrBN,QAAAA,UAAU,EAAE,IAAA,SAAA,CAAciY,EAAE,CADP,UACT,CADS;AAErBN,QAAAA,oBAAoB,EAAE,IAAA,SAAA,CAAcM,EAAE,CAFjB,oBAEC,CAFD;AAGrB7X,QAAAA,UAAU,EAAE6X,EAAE,CAHO,UAAA;AAIrBL,QAAAA,KAAK,EAAEK,EAAE,CAJY,KAAA;AAKrB3X,QAAAA,QALqB,EAKrBA,QALqB;AAMrBuX,QAAAA,gBAAgB,EAAEI,EAAE,CAAFA,gBAAAA,CAAAA,GAAAA,CANG,oBAMHA,CANG;AAOrBH,QAAAA,WAAW,EAAEI,cAAc,CAACD,EAAE,CAPT,WAOM,CAPN;AAQrB9X,QAAAA,YAAY,EAAE8X,EAAE,CARK,YAAA;AASrBF,QAAAA,aAAa,EAAEE,EAAE,CAACF;AATG,OAAhB,CAAP;AAWD;;;;;;AAGH,SAAA,oBAAA,SAGwC;AAAA,MAHV,eAGU,UAHV,eAGU;AAAA,MADtCjiB,KACsC,UADtCA,KACsC;AACtC,SAAO;AACLA,IAAAA,KADK,EACLA,KADK;AAELqiB,IAAAA,eAAe,EAAE,IAAA,SAAA,CAAA,eAAA;AAFZ,GAAP;AAID;;AAED,SAAA,gBAAA,SAI8B;AAAA,MAJJ,gBAII,UAJJ,gBAII;AAAA,MAJJ,2BAII,UAJJ,2BAII;AAAA,MAD5BC,WAC4B,UAD5BA,WAC4B;AAC5B,SAAO;AACL/pB,IAAAA,gBAAgB,EAAE,IAAA,SAAA,CADb,gBACa,CADb;AAELgqB,IAAAA,2BAFK,EAELA,2BAFK;AAGLD,IAAAA,WAAAA,EAAAA;AAHK,GAAP;AAKD;;AAED,SAAA,cAAA,SAAwE;AAAA,MAAhD,GAAgD,UAAhD,GAAgD;AAAA,MAAhD,GAAgD,UAAhD,GAAgD;AAAA,MAArCE,OAAqC,UAArCA,OAAqC;;AACtE,MAAA,OAAA,EAAa;AACX,WAAA,EAAA;AACD;;AAED,sCACKC,GAAG,CAAHA,KAAAA,CAAUC,GAAG,GAAbD,CAAAA,EAAAA,GAAAA,CADE,gBACFA,CADL,sBAEKA,GAAG,CAAHA,KAAAA,CAAAA,CAAAA,EAAAA,GAAAA,EAAAA,GAAAA,CAFL,gBAEKA,CAFL;AAID;AC5ND;AACA;AACA;;;IACO,Q;AAIe;AAEpBh4B,kBAAW,UAAXA,EAAW,eAAXA,EAAW,oBAAXA,EAAW,UAAXA,EAKE;AAAA;;AAAA,OAVFyf,UAUE,GAAA,KAAA,CAAA;AAAA,OATFmY,eASE,GAAA,KAAA,CAAA;AAAA,OARFR,oBAQE,GAAA,KAAA,CAAA;AAAA,OAPFvX,UAOE,GAAA,KAAA,CAAA;AACA,OAAA,UAAA,GAAA,UAAA;AACA,OAAA,eAAA,GAAA,eAAA;AACA,OAAA,oBAAA,GAAA,oBAAA;AACA,OAAA,UAAA,GAAA,UAAA;AACD,C;AAGH;AACA;AACA;;AAsCA;AACA;AACA;;;IACO,e;AACL;AACF;AACA;AACE7f,6BAAc;AAAA;AAAE;AAEhB;AACF;AACA;;;;;WACS2O,+BAAqB,WAArBA,EAEgB;AACrB,WAAA,cAAA,CAAoB/H,WAAW,CAA/B,SAAA;AAEA,UAAMgI,qBAAqB,GAAGtK,YAAY,CAAZA,GAAAA,CAA9B,aAA8BA,CAA9B;AACA,UAAMuK,SAAS,GAAGD,qBAAqB,CAArBA,MAAAA,CAA6BhI,WAAW,CAA1D,IAAkBgI,CAAlB;AAEA,UAAA,IAAA;;AACA,2CAA+B3O,MAAM,CAANA,OAAAA,CAA/B,wBAA+BA,CAA/B,wCAAyE;AAApE;AAAA,YAAM,MAAN;AAAA,YAAL,MAAK;;AACH,YAAIkO,MAAM,CAANA,KAAAA,IAAJ,SAAA,EAA+B;AAC7BhJ,UAAAA,IAAI,GAAJA,MAAAA;AACA;AACD;AACF;;AAED,UAAI,CAAJ,IAAA,EAAW;AACT,cAAM,IAAA,KAAA,CAAN,mDAAM,CAAN;AACD;;AAED,aAAA,IAAA;AACD;AAED;AACF;AACA;;;;WACS+yB,iCAAuB,WAAvBA,EAEoB;AACzB,WAAA,cAAA,CAAoBtxB,WAAW,CAA/B,SAAA;AACA,WAAA,cAAA,CAAoBA,WAAW,CAA/B,IAAA,EAAA,CAAA;;AAEA,0BAAmBmI,UAAU,CAC3BopB,wBAAwB,CADG,iBAAA,EAE3BvxB,WAAW,CAFb,IAA6B,CAA7B;AAAA,UAAO3B,QAAP,iBAAOA,QAAP;;AAKA,aAAO;AACLua,QAAAA,UAAU,EAAE5Y,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EADP,MAAA;AAEL6Y,QAAAA,UAAU,EAAE7Y,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EAFP,MAAA;AAGL3B,QAAAA,QAAQ,EAAE,IAAA,QAAA,CACR,IAAA,SAAA,CAAcA,QAAQ,CADd,UACR,CADQ,EAER,IAAA,SAAA,CAAcA,QAAQ,CAFd,eAER,CAFQ,EAGR,IAAA,SAAA,CAAcA,QAAQ,CAHd,oBAGR,CAHQ,EAIRA,QAAQ,CAJA,UAAA;AAHL,OAAP;AAUD;AAED;AACF;AACA;;;;WACS8tB,yBAAe,WAAfA,EAEgB;AACrB,WAAA,cAAA,CAAoBnsB,WAAW,CAA/B,SAAA;AACA,WAAA,cAAA,CAAoBA,WAAW,CAA/B,IAAA,EAAA,CAAA;;AAEA,0BAA+CmI,UAAU,CACvDopB,wBAAwB,CAD+B,SAAA,EAEvDvxB,WAAW,CAFb,IAAyD,CAAzD;AAAA,UAAM,aAAN,iBAAM,aAAN;AAAA,UAAsBwxB,qBAAtB,iBAAsBA,qBAAtB;;AAKA,aAAO;AACL5Y,QAAAA,UAAU,EAAE5Y,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EADP,MAAA;AAELkH,QAAAA,gBAAgB,EAAElH,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EAFb,MAAA;AAGLwJ,QAAAA,mBAAmB,EAAE,IAAA,SAAA,CAHhB,aAGgB,CAHhB;AAILgoB,QAAAA,qBAAqB,EAAE;AACrBhyB,UAAAA,KAAK,EAAEgyB;AADc;AAJlB,OAAP;AAQD;AAED;AACF;AACA;;;;WACS1E,wBAAc,WAAdA,EAE0B;AAC/B,WAAA,cAAA,CAAoB9sB,WAAW,CAA/B,SAAA;AACA,WAAA,cAAA,CAAoBA,WAAW,CAA/B,IAAA,EAAA,CAAA;;AAEA,0BAAmBmI,UAAU,CAC3BopB,wBAAwB,CADG,QAAA,EAE3BvxB,WAAW,CAFb,IAA6B,CAA7B;AAAA,UAAOuI,QAAP,iBAAOA,QAAP;;AAKA,aAAO;AACLqQ,QAAAA,UAAU,EAAE5Y,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EADP,MAAA;AAELyxB,QAAAA,0BAA0B,EAAEzxB,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EAFvB,MAAA;AAGLuI,QAAAA,QAHK,EAGLA,QAHK;AAILG,QAAAA,QAAQ,EAAE1I,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,EAAoB9D;AAJzB,OAAP;AAMD;AAED;AACF;AACA;;;;WACSuN,wBAAc,SAAdA,EAAqC;AAC1C,UAAI,CAACvO,SAAS,CAATA,MAAAA,CAAiBw2B,WAAW,CAAjC,SAAKx2B,CAAL,EAA8C;AAC5C,cAAM,IAAA,KAAA,CAAN,mDAAM,CAAN;AACD;AACF;AAED;AACF;AACA;;;;WACSyO,wBAAc,IAAdA,EAAc,cAAdA,EAAyD;AAC9D,UAAIxI,IAAI,CAAJA,MAAAA,GAAJ,cAAA,EAAkC;AAChC,cAAM,IAAA,KAAA,sCAC0BA,IAAI,CAACP,MAD/B,sCAAN,cAAM,EAAN;AAGD;AACF;;;;;AAGH;AACA;AACA;;;AA0BA,IAAM2wB,wBAAwB,GAAG,MAAM,CAAN,MAAA,CAI9B;AACDI,EAAAA,iBAAiB,EAAE;AACjBnyB,IAAAA,KAAK,EADY,CAAA;AAEjB+H,IAAAA,MAAM,EAAE7J,YAAY,CAAZA,MAAAA,CAAmE,CACzEA,YAAY,CAAZA,GAAAA,CADyE,aACzEA,CADyE,EAEzEoD,QAFMpD,EAAmE,CAAnEA;AAFS,GADlB;AAQDwvB,EAAAA,SAAS,EAAE;AACT1tB,IAAAA,KAAK,EADI,CAAA;AAET+H,IAAAA,MAAM,EAAE7J,YAAY,CAAZA,MAAAA,CAA2D,CACjEA,YAAY,CAAZA,GAAAA,CADiE,aACjEA,CADiE,EAEjEoD,SAAAA,CAFiE,eAEjEA,CAFiE,EAGjEpD,YAAY,CAAZA,GAAAA,CAHMA,uBAGNA,CAHiE,CAA3DA;AAFC,GARV;AAgBD2vB,EAAAA,QAAQ,EAAE;AACR7tB,IAAAA,KAAK,EADG,CAAA;AAER+H,IAAAA,MAAM,EAAE7J,YAAY,CAAZA,MAAAA,CAA0D,CAChEA,YAAY,CAAZA,GAAAA,CADgE,aAChEA,CADgE,EAEhEA,YAAY,CAAZA,IAAAA,CAFMA,UAENA,CAFgE,CAA1DA;AAFA;AAhBT,CAJ8B,CAAjC;AA6BA;AACA;AACA;;AAMA;AACA;AACA;;IACak0B,uBAAuB,GAAG,MAAM,CAAN,MAAA,CAAc;AACnDC,EAAAA,KAAK,EAAE;AACLryB,IAAAA,KAAK,EAAE;AADF,GAD4C;AAInDmuB,EAAAA,UAAU,EAAE;AACVnuB,IAAAA,KAAK,EAAE;AADG;AAJuC,CAAd,C;AASvC;AACA;AACA;;IACO,W;AACL;AACF;AACA;AACEpG,yBAAc;AAAA;AAAE;AAEhB;AACF;AACA;;AAcE;AACF;AACA;;;;;WACS04B,2BAAiB,MAAjBA,EAEmB;AACxB,UAAM,UAAN,GAAA,MAAA,CAAM,UAAN;AAAA,UAAM,UAAN,GAAA,MAAA,CAAM,UAAN;AAAA,UAA+BzzB,QAA/B,GAAA,MAAA,CAA+BA,QAA/B;AACA,UAAME,IAAI,GAAGgzB,wBAAwB,CAArC,iBAAA;AACA,UAAMvzB,IAAI,GAAG0M,UAAU,CAAA,IAAA,EAAO;AAC5BrM,QAAAA,QAAQ,EAAE;AACRwa,UAAAA,UAAU,EAAEliB,QAAQ,CAAC0H,QAAQ,CAARA,UAAAA,CADb,QACaA,EAAD,CADZ;AAER2yB,UAAAA,eAAe,EAAEr6B,QAAQ,CAAC0H,QAAQ,CAARA,eAAAA,CAFlB,QAEkBA,EAAD,CAFjB;AAGRmyB,UAAAA,oBAAoB,EAAE75B,QAAQ,CAC5B0H,QAAQ,CAARA,oBAAAA,CAJM,QAINA,EAD4B,CAHtB;AAMR4a,UAAAA,UAAU,EAAE5a,QAAQ,CAAC4a;AANb;AADkB,OAAP,CAAvB;AAUA,UAAM7N,eAAe,GAAG;AACtBjK,QAAAA,IAAI,EAAE,CACJ;AAACjF,UAAAA,MAAM,EAAP,UAAA;AAAqB8F,UAAAA,QAAQ,EAA7B,KAAA;AAAsCD,UAAAA,UAAU,EAAE;AAAlD,SADI,EAEJ;AAAC7F,UAAAA,MAAM,EAAP,kBAAA;AAA6B8F,UAAAA,QAAQ,EAArC,KAAA;AAA8CD,UAAAA,UAAU,EAAE;AAA1D,SAFI,EAGJ;AAAC7F,UAAAA,MAAM,EAAP,mBAAA;AAA8B8F,UAAAA,QAAQ,EAAtC,KAAA;AAA+CD,UAAAA,UAAU,EAAE;AAA3D,SAHI,EAIJ;AAAC7F,UAAAA,MAAM,EAAP,UAAA;AAAqB8F,UAAAA,QAAQ,EAA7B,IAAA;AAAqCD,UAAAA,UAAU,EAAE;AAAjD,SAJI,CADgB;AAOtB7G,QAAAA,SAAS,EAAE,KAPW,SAAA;AAQtB8C,QAAAA,IAAAA,EAAAA;AARsB,OAAxB;AAUA,aAAO,IAAA,sBAAA,CAAP,eAAO,CAAP;AACD;AAED;AACF;AACA;;;;WACSyM,uBAAa,MAAbA,EAA4D;AACjE,UAAM1J,WAAW,GAAG,IAApB,WAAoB,EAApB;AACAA,MAAAA,WAAW,CAAXA,GAAAA,CACE,aAAa,CAAb,aAAA,CAA4B;AAC1BsH,QAAAA,UAAU,EAAEsC,MAAM,CADQ,UAAA;AAE1BrC,QAAAA,gBAAgB,EAAEqC,MAAM,CAFE,UAAA;AAG1BpC,QAAAA,QAAQ,EAAEoC,MAAM,CAHU,QAAA;AAI1BnC,QAAAA,KAAK,EAAE,KAJmB,KAAA;AAK1BtN,QAAAA,SAAS,EAAE,KAAKA;AALU,OAA5B,CADF6F;AAUA,aAAO,WAAW,CAAX,GAAA,CACL,KAAA,iBAAA,CAAuB;AACrB6X,QAAAA,UAAU,EAAEjO,MAAM,CADG,UAAA;AAErBkO,QAAAA,UAAU,EAAElO,MAAM,CAANA,QAAAA,CAFS,UAAA;AAGrBtM,QAAAA,QAAQ,EAAEsM,MAAM,CAACtM;AAHI,OAAvB,CADK,CAAP;AAOD;AAED;AACF;AACA;;;;WACS0vB,mBAAS,MAATA,EAAoD;AACzD,UAAM,UAAN,GAAA,MAAA,CAAM,UAAN;AAAA,UAAM,gBAAN,GAAA,MAAA,CAAM,gBAAN;AAAA,UAAM,mBAAN,GAAA,MAAA,CAAM,mBAAN;AAAA,UAIEyD,qBAJF,GAAA,MAAA,CAIEA,qBAJF;AAOA,UAAMjzB,IAAI,GAAGgzB,wBAAwB,CAArC,SAAA;AACA,UAAMvzB,IAAI,GAAG0M,UAAU,CAAA,IAAA,EAAO;AAC5BujB,QAAAA,aAAa,EAAEt3B,QAAQ,CAAC6S,mBAAmB,CADf,QACJA,EAAD,CADK;AAE5BgoB,QAAAA,qBAAqB,EAAEA,qBAAqB,CAAChyB;AAFjB,OAAP,CAAvB;AAKA,UAAM2B,IAAI,GAAG,CACX;AAACjF,QAAAA,MAAM,EAAP,UAAA;AAAqB8F,QAAAA,QAAQ,EAA7B,KAAA;AAAsCD,QAAAA,UAAU,EAAE;AAAlD,OADW,EAEX;AAAC7F,QAAAA,MAAM,EAAP,mBAAA;AAA8B8F,QAAAA,QAAQ,EAAtC,KAAA;AAA+CD,QAAAA,UAAU,EAAE;AAA3D,OAFW,EAGX;AAAC7F,QAAAA,MAAM,EAAP,gBAAA;AAA2B8F,QAAAA,QAAQ,EAAnC,IAAA;AAA2CD,QAAAA,UAAU,EAAE;AAAvD,OAHW,CAAb;AAMA,aAAO,IAAA,WAAA,GAAA,GAAA,CAAsB;AAC3BZ,QAAAA,IAD2B,EAC3BA,IAD2B;AAE3BjG,QAAAA,SAAS,EAAE,KAFgB,SAAA;AAG3B8C,QAAAA,IAAAA,EAAAA;AAH2B,OAAtB,CAAP;AAKD;AAED;AACF;AACA;;;;WACSuwB,kBAAQ,MAARA,EAA6D;AAClE,UAAM,UAAN,GAAA,MAAA,CAAM,UAAN;AAAA,UAAM,0BAAN,GAAA,MAAA,CAAM,0BAAN;AAAA,UAAM,QAAN,GAAA,MAAA,CAAM,QAAN;AAAA,UAAyD7lB,QAAzD,GAAA,MAAA,CAAyDA,QAAzD;AACA,UAAMnK,IAAI,GAAGgzB,wBAAwB,CAArC,QAAA;AACA,UAAMvzB,IAAI,GAAG0M,UAAU,CAAA,IAAA,EAAO;AAACnC,QAAAA,QAAAA,EAAAA;AAAD,OAAP,CAAvB;AAEA,UAAMpH,IAAI,GAAG,CACX;AAACjF,QAAAA,MAAM,EAAP,UAAA;AAAqB8F,QAAAA,QAAQ,EAA7B,KAAA;AAAsCD,QAAAA,UAAU,EAAE;AAAlD,OADW,EAEX;AAAC7F,QAAAA,MAAM,EAAP,QAAA;AAAmB8F,QAAAA,QAAQ,EAA3B,KAAA;AAAoCD,QAAAA,UAAU,EAAE;AAAhD,OAFW,EAGX;AAAC7F,QAAAA,MAAM,EAAP,0BAAA;AAAqC8F,QAAAA,QAAQ,EAA7C,IAAA;AAAqDD,QAAAA,UAAU,EAAE;AAAjE,OAHW,CAAb;AAMA,aAAO,IAAA,WAAA,GAAA,GAAA,CAAsB;AAC3BZ,QAAAA,IAD2B,EAC3BA,IAD2B;AAE3BjG,QAAAA,SAAS,EAAE,KAFgB,SAAA;AAG3B8C,QAAAA,IAAAA,EAAAA;AAH2B,OAAtB,CAAP;AAKD;;;;;;AA9HU0zB,WAAAA,CASJx2B,SATIw2B,GASmB,IAAA,SAAA,CAAA,6CAAA,CATnBA;AAAAA,WAAAA,CAoBJlpB,KApBIkpB,GAoBY,IApBZA;ACpRb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAQA;AACA;AACA;AACA;AACA;AAOA;;SACO,4B;;;;;2FAAA,mBAAA,UAAA,EAAA,cAAA,EAAA,oCAAA,EAAA,mBAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaL,gBACEK,oCAAoC,IACpC14B,MAAM,CAANA,SAAAA,CAAAA,cAAAA,CAAAA,IAAAA,CAAAA,oCAAAA,EAFF,sBAEEA,CAFF,EAME;AACA24B,cAAAA,oBAAoB,GAApBA,oCAAAA;AAEA3rB,cAAAA,OAAO,GAAPA,mBAAAA;AATF,aAAA,MAUO;AACLA,cAAAA,OAAO,GAAPA,oCAAAA;AAGD;;AACKD,YAAAA,WA5BD,GA4BeC,OAAO,IAAI;AAC7BC,cAAAA,aAAa,EAAED,OAAO,CADO,aAAA;AAE7BE,cAAAA,mBAAmB,EAAEF,OAAO,CAAPA,mBAAAA,IAA+BA,OAAO,CAAC+F;AAF/B,aA5B1B;AAAA;AAAA,mBAiCmBhI,UAAU,CAAVA,kBAAAA,CAAAA,cAAAA,EAAxB,WAAwBA,CAjCnB;;AAAA;AAiCClC,YAAAA,SAjCD;AAsCCkK,YAAAA,UAtCD,GAsCc/F,OAAO,IAAIA,OAAO,CAArC,UAtCK;AAuCC6a,YAAAA,mBAvCD,GAuCuB8Q,oBAAoB,GAC5C5tB,UAAU,CAAVA,kBAAAA,CAAAA,oBAAAA,EAD4C,UAC5CA,CAD4C,GAE5CA,UAAU,CAAVA,kBAAAA,CAAAA,SAAAA,EAFJ,UAEIA,CAzCC;AAAA;AAAA,mBA0CU,mBA1CV;;AAAA;AA0CCqC,YAAAA,MA1CD,mBA0CL,KA1CK;;AAAA,iBA4CDA,MAAM,CAAV,GA5CK;AAAA;AAAA;AAAA;;AAAA,kBA6CG,IAAA,KAAA,2BACevE,SADf,sBACoCa,IAAI,CAAJA,SAAAA,CAD1C,MAC0CA,CADpC,OA7CH;;AAAA;AAAA,+CAkDL,SAlDK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;ACvCP,IAAMkvB,QAAQ,GAAG;AACfC,EAAAA,IAAI,EAAE;AACJC,IAAAA,MAAM,EADF,8BAAA;AAEJC,IAAAA,OAAO,EAFH,+BAAA;AAGJ,oBAAgB;AAHZ,GADS;AAMfC,EAAAA,KAAK,EAAE;AACLF,IAAAA,MAAM,EADD,+BAAA;AAELC,IAAAA,OAAO,EAFF,gCAAA;AAGL,oBAAgB;AAHX;AANQ,CAAjB;AAeA;AACA;AACA;;AACO,SAAA,aAAA,CAAA,OAAA,EAAA,GAAA,EAAiE;AACtE,MAAMv4B,GAAG,GAAGy4B,GAAG,KAAHA,KAAAA,GAAAA,MAAAA,GAAZ,OAAA;;AAEA,MAAI,CAAJ,OAAA,EAAc;AACZ,WAAOL,QAAQ,CAARA,GAAQ,CAARA,CAAP,QAAOA,CAAP;AACD;;AAED,MAAMpiB,GAAG,GAAGoiB,QAAQ,CAARA,GAAQ,CAARA,CAAZ,OAAYA,CAAZ;;AACA,MAAI,CAAJ,GAAA,EAAU;AACR,UAAM,IAAA,KAAA,mBAAqBp4B,GAArB,uBAAN,OAAM,EAAN;AACD;;AACD,SAAA,GAAA;AACD;ACDD;AACA;AACA;;;AACO,IAAM04B,gBAAgB,GAAG,UAAzB","sourcesContent":["import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","module.exports = assert;\n\nfunction assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n}\n\nassert.equal = function assertEqual(l, r, msg) {\n  if (l != r)\n    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));\n};\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n","'use strict';\n\nvar assert = require('minimalistic-assert');\nvar inherits = require('inherits');\n\nexports.inherits = inherits;\n\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = (c >> 6) | 192;\n          res[p++] = (c & 63) | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = (c >> 18) | 240;\n          res[p++] = ((c >> 12) & 63) | 128;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        } else {\n          res[p++] = (c >> 12) | 224;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0)\n        msg = '0' + msg;\n      for (i = 0; i < msg.length; i += 2)\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n  }\n  return res;\n}\nexports.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nexports.toHex = toHex;\n\nfunction htonl(w) {\n  var res = (w >>> 24) |\n            ((w >>> 8) & 0xff00) |\n            ((w << 8) & 0xff0000) |\n            ((w & 0xff) << 24);\n  return res >>> 0;\n}\nexports.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little')\n      w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nexports.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nexports.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7)\n    return '0' + word;\n  else if (word.length === 6)\n    return '00' + word;\n  else if (word.length === 5)\n    return '000' + word;\n  else if (word.length === 4)\n    return '0000' + word;\n  else if (word.length === 3)\n    return '00000' + word;\n  else if (word.length === 2)\n    return '000000' + word;\n  else if (word.length === 1)\n    return '0000000' + word;\n  else\n    return word;\n}\nexports.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big')\n      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];\n    else\n      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nexports.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = (m >>> 16) & 0xff;\n      res[k + 2] = (m >>> 8) & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = (m >>> 16) & 0xff;\n      res[k + 1] = (m >>> 8) & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n  return res;\n}\nexports.split32 = split32;\n\nfunction rotr32(w, b) {\n  return (w >>> b) | (w << (32 - b));\n}\nexports.rotr32 = rotr32;\n\nfunction rotl32(w, b) {\n  return (w << b) | (w >>> (32 - b));\n}\nexports.rotl32 = rotl32;\n\nfunction sum32(a, b) {\n  return (a + b) >>> 0;\n}\nexports.sum32 = sum32;\n\nfunction sum32_3(a, b, c) {\n  return (a + b + c) >>> 0;\n}\nexports.sum32_3 = sum32_3;\n\nfunction sum32_4(a, b, c, d) {\n  return (a + b + c + d) >>> 0;\n}\nexports.sum32_4 = sum32_4;\n\nfunction sum32_5(a, b, c, d, e) {\n  return (a + b + c + d + e) >>> 0;\n}\nexports.sum32_5 = sum32_5;\n\nfunction sum64(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nexports.sum64 = sum64;\n\nfunction sum64_hi(ah, al, bh, bl) {\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\nexports.sum64_hi = sum64_hi;\n\nfunction sum64_lo(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\nexports.sum64_lo = sum64_lo;\n\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\nexports.sum64_4_hi = sum64_4_hi;\n\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\nexports.sum64_4_lo = sum64_4_lo;\n\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = (lo + el) >>> 0;\n  carry += lo < el ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\nexports.sum64_5_hi = sum64_5_hi;\n\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n\n  return lo >>> 0;\n}\nexports.sum64_5_lo = sum64_5_lo;\n\nfunction rotr64_hi(ah, al, num) {\n  var r = (al << (32 - num)) | (ah >>> num);\n  return r >>> 0;\n}\nexports.rotr64_hi = rotr64_hi;\n\nfunction rotr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.rotr64_lo = rotr64_lo;\n\nfunction shr64_hi(ah, al, num) {\n  return ah >>> num;\n}\nexports.shr64_hi = shr64_hi;\n\nfunction shr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.shr64_lo = shr64_lo;\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction BlockHash() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\nexports.BlockHash = BlockHash;\n\nBlockHash.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert(this.pending === null);\n\n  return this._digest(enc);\n};\n\nBlockHash.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - ((len + this.padLength) % bytes);\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n\n  return res;\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar rotr32 = utils.rotr32;\n\nfunction ft_1(s, x, y, z) {\n  if (s === 0)\n    return ch32(x, y, z);\n  if (s === 1 || s === 3)\n    return p32(x, y, z);\n  if (s === 2)\n    return maj32(x, y, z);\n}\nexports.ft_1 = ft_1;\n\nfunction ch32(x, y, z) {\n  return (x & y) ^ ((~x) & z);\n}\nexports.ch32 = ch32;\n\nfunction maj32(x, y, z) {\n  return (x & y) ^ (x & z) ^ (y & z);\n}\nexports.maj32 = maj32;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\nexports.p32 = p32;\n\nfunction s0_256(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\nexports.s0_256 = s0_256;\n\nfunction s1_256(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\nexports.s1_256 = s1_256;\n\nfunction g0_256(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);\n}\nexports.g0_256 = g0_256;\n\nfunction g1_256(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);\n}\nexports.g1_256 = g1_256;\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_5 = utils.sum32_5;\nvar ft_1 = shaCommon.ft_1;\nvar BlockHash = common.BlockHash;\n\nvar sha1_K = [\n  0x5A827999, 0x6ED9EBA1,\n  0x8F1BBCDC, 0xCA62C1D6\n];\n\nfunction SHA1() {\n  if (!(this instanceof SHA1))\n    return new SHA1();\n\n  BlockHash.call(this);\n  this.h = [\n    0x67452301, 0xefcdab89, 0x98badcfe,\n    0x10325476, 0xc3d2e1f0 ];\n  this.W = new Array(80);\n}\n\nutils.inherits(SHA1, BlockHash);\nmodule.exports = SHA1;\n\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n\n  for(; i < W.length; i++)\n    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\nvar assert = require('minimalistic-assert');\n\nvar sum32 = utils.sum32;\nvar sum32_4 = utils.sum32_4;\nvar sum32_5 = utils.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\n\nvar BlockHash = common.BlockHash;\n\nvar sha256_K = [\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n];\n\nfunction SHA256() {\n  if (!(this instanceof SHA256))\n    return new SHA256();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n  ];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils.inherits(SHA256, BlockHash);\nmodule.exports = SHA256;\n\nSHA256.blockSize = 512;\nSHA256.outSize = 256;\nSHA256.hmacStrength = 192;\nSHA256.padLength = 64;\n\nSHA256.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n\n  assert(this.k.length === W.length);\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32(T1, T2);\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n  this.h[5] = sum32(this.h[5], f);\n  this.h[6] = sum32(this.h[6], g);\n  this.h[7] = sum32(this.h[7], h);\n};\n\nSHA256.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar SHA256 = require('./256');\n\nfunction SHA224() {\n  if (!(this instanceof SHA224))\n    return new SHA224();\n\n  SHA256.call(this);\n  this.h = [\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];\n}\nutils.inherits(SHA224, SHA256);\nmodule.exports = SHA224;\n\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 7), 'big');\n  else\n    return utils.split32(this.h.slice(0, 7), 'big');\n};\n\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar assert = require('minimalistic-assert');\n\nvar rotr64_hi = utils.rotr64_hi;\nvar rotr64_lo = utils.rotr64_lo;\nvar shr64_hi = utils.shr64_hi;\nvar shr64_lo = utils.shr64_lo;\nvar sum64 = utils.sum64;\nvar sum64_hi = utils.sum64_hi;\nvar sum64_lo = utils.sum64_lo;\nvar sum64_4_hi = utils.sum64_4_hi;\nvar sum64_4_lo = utils.sum64_4_lo;\nvar sum64_5_hi = utils.sum64_5_hi;\nvar sum64_5_lo = utils.sum64_5_lo;\n\nvar BlockHash = common.BlockHash;\n\nvar sha512_K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction SHA512() {\n  if (!(this instanceof SHA512))\n    return new SHA512();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xf3bcc908,\n    0xbb67ae85, 0x84caa73b,\n    0x3c6ef372, 0xfe94f82b,\n    0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1,\n    0x9b05688c, 0x2b3e6c1f,\n    0x1f83d9ab, 0xfb41bd6b,\n    0x5be0cd19, 0x137e2179 ];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\nutils.inherits(SHA512, BlockHash);\nmodule.exports = SHA512;\n\nSHA512.blockSize = 1024;\nSHA512.outSize = 512;\nSHA512.hmacStrength = 192;\nSHA512.padLength = 128;\n\nSHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W;\n\n  // 32 x 32bit words\n  for (var i = 0; i < 32; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14];  // i - 7\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32];  // i - 16\n    var c3_lo = W[i - 31];\n\n    W[i] = sum64_4_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n  }\n};\n\nSHA512.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n\n  assert(this.k.length === W.length);\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n\n    var T1_hi = sum64_5_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n\n    hh = gh;\n    hl = gl;\n\n    gh = fh;\n    gl = fl;\n\n    fh = eh;\n    fl = el;\n\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n\n    dh = ch;\n    dl = cl;\n\n    ch = bh;\n    cl = bl;\n\n    bh = ah;\n    bl = al;\n\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ ((~xh) & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ ((~xl) & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2);  // 34\n  var c2_hi = rotr64_hi(xl, xh, 7);  // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2);  // 34\n  var c2_lo = rotr64_lo(xl, xh, 7);  // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9);  // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9);  // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29);  // 61\n  var c2_hi = shr64_hi(xh, xl, 6);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29);  // 61\n  var c2_lo = shr64_lo(xh, xl, 6);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n","'use strict';\n\nvar utils = require('../utils');\n\nvar SHA512 = require('./512');\n\nfunction SHA384() {\n  if (!(this instanceof SHA384))\n    return new SHA384();\n\n  SHA512.call(this);\n  this.h = [\n    0xcbbb9d5d, 0xc1059ed8,\n    0x629a292a, 0x367cd507,\n    0x9159015a, 0x3070dd17,\n    0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31,\n    0x8eb44a87, 0x68581511,\n    0xdb0c2e0d, 0x64f98fa7,\n    0x47b5481d, 0xbefa4fa4 ];\n}\nutils.inherits(SHA384, SHA512);\nmodule.exports = SHA384;\n\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 12), 'big');\n  else\n    return utils.split32(this.h.slice(0, 12), 'big');\n};\n","'use strict';\n\nexports.sha1 = require('./sha/1');\nexports.sha224 = require('./sha/224');\nexports.sha256 = require('./sha/256');\nexports.sha384 = require('./sha/384');\nexports.sha512 = require('./sha/512');\n","'use strict';\n\nvar utils = require('./utils');\nvar common = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_3 = utils.sum32_3;\nvar sum32_4 = utils.sum32_4;\nvar BlockHash = common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160))\n    return new RIPEMD160();\n\n  BlockHash.call(this);\n\n  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];\n  this.endian = 'little';\n}\nutils.inherits(RIPEMD160, BlockHash);\nexports.ripemd160 = RIPEMD160;\n\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(\n      rotl32(\n        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),\n        s[j]),\n      E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(\n      rotl32(\n        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n        sh[j]),\n      Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'little');\n  else\n    return utils.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15)\n    return x ^ y ^ z;\n  else if (j <= 31)\n    return (x & y) | ((~x) & z);\n  else if (j <= 47)\n    return (x | (~y)) ^ z;\n  else if (j <= 63)\n    return (x & z) | (y & (~z));\n  else\n    return x ^ (y | (~z));\n}\n\nfunction K(j) {\n  if (j <= 15)\n    return 0x00000000;\n  else if (j <= 31)\n    return 0x5a827999;\n  else if (j <= 47)\n    return 0x6ed9eba1;\n  else if (j <= 63)\n    return 0x8f1bbcdc;\n  else\n    return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15)\n    return 0x50a28be6;\n  else if (j <= 31)\n    return 0x5c4dd124;\n  else if (j <= 47)\n    return 0x6d703ef3;\n  else if (j <= 63)\n    return 0x7a6d76e9;\n  else\n    return 0x00000000;\n}\n\nvar r = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n];\n\nvar rh = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n];\n\nvar s = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n];\n\nvar sh = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n];\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac))\n    return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\nmodule.exports = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize)\n    key = new this.Hash().update(key).digest();\n  assert(key.length <= this.blockSize);\n\n  // Add padding to key\n  for (var i = key.length; i < this.blockSize; i++)\n    key.push(0);\n\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x36;\n  this.inner = new this.Hash().update(key);\n\n  // 0x36 ^ 0x5c = 0x6a\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x6a;\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n","var hash = exports;\n\nhash.utils = require('./hash/utils');\nhash.common = require('./hash/common');\nhash.sha = require('./hash/sha');\nhash.ripemd = require('./hash/ripemd');\nhash.hmac = require('./hash/hmac');\n\n// Proxy hash functions to the main object\nhash.sha1 = hash.sha.sha1;\nhash.sha256 = hash.sha.sha256;\nhash.sha224 = hash.sha.sha224;\nhash.sha384 = hash.sha.sha384;\nhash.sha512 = hash.sha.sha512;\nhash.ripemd160 = hash.ripemd.ripemd160;\n","export const version = \"logger/5.6.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n})(ErrorCode || (ErrorCode = {}));\n;\nconst HEX = \"0123456789abcdef\";\nexport class Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                }\n                else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        let url = \"\";\n        switch (code) {\n            case ErrorCode.NUMERIC_FAULT: {\n                url = \"NUMERIC_FAULT\";\n                const fault = message;\n                switch (fault) {\n                    case \"overflow\":\n                    case \"underflow\":\n                    case \"division-by-zero\":\n                        url += \"-\" + fault;\n                        break;\n                    case \"negative-power\":\n                    case \"negative-width\":\n                        url += \"-unsupported\";\n                        break;\n                    case \"unbound-bitwise-result\":\n                        url += \"-unbound-result\";\n                        break;\n                }\n                break;\n            }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n                url = code;\n                break;\n        }\n        if (url) {\n            message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n        }\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger(version);\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n//# sourceMappingURL=index.js.map","export const version = \"bytes/5.6.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n///////////////////////////////\nfunction isHexable(value) {\n    return !!(value.toHexString);\n}\nfunction addSlice(array) {\n    if (array.slice) {\n        return array;\n    }\n    array.slice = function () {\n        const args = Array.prototype.slice.call(arguments);\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n    };\n    return array;\n}\nexport function isBytesLike(value) {\n    return ((isHexString(value) && !(value.length % 2)) || isBytes(value));\n}\nfunction isInteger(value) {\n    return (typeof (value) === \"number\" && value == value && (value % 1) === 0);\n}\nexport function isBytes(value) {\n    if (value == null) {\n        return false;\n    }\n    if (value.constructor === Uint8Array) {\n        return true;\n    }\n    if (typeof (value) === \"string\") {\n        return false;\n    }\n    if (!isInteger(value.length) || value.length < 0) {\n        return false;\n    }\n    for (let i = 0; i < value.length; i++) {\n        const v = value[i];\n        if (!isInteger(v) || v < 0 || v >= 256) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function arrayify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid arrayify value\");\n        const result = [];\n        while (value) {\n            result.unshift(value & 0xff);\n            value = parseInt(String(value / 256));\n        }\n        if (result.length === 0) {\n            result.push(0);\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        value = value.toHexString();\n    }\n    if (isHexString(value)) {\n        let hex = value.substring(2);\n        if (hex.length % 2) {\n            if (options.hexPad === \"left\") {\n                hex = \"0x0\" + hex.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                hex += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        const result = [];\n        for (let i = 0; i < hex.length; i += 2) {\n            result.push(parseInt(hex.substring(i, i + 2), 16));\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (isBytes(value)) {\n        return addSlice(new Uint8Array(value));\n    }\n    return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\nexport function concat(items) {\n    const objects = items.map(item => arrayify(item));\n    const length = objects.reduce((accum, item) => (accum + item.length), 0);\n    const result = new Uint8Array(length);\n    objects.reduce((offset, object) => {\n        result.set(object, offset);\n        return offset + object.length;\n    }, 0);\n    return addSlice(result);\n}\nexport function stripZeros(value) {\n    let result = arrayify(value);\n    if (result.length === 0) {\n        return result;\n    }\n    // Find the first non-zero entry\n    let start = 0;\n    while (start < result.length && result[start] === 0) {\n        start++;\n    }\n    // If we started with zeros, strip them\n    if (start) {\n        result = result.slice(start);\n    }\n    return result;\n}\nexport function zeroPad(value, length) {\n    value = arrayify(value);\n    if (value.length > length) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n    }\n    const result = new Uint8Array(length);\n    result.set(value, length - value.length);\n    return addSlice(result);\n}\nexport function isHexString(value, length) {\n    if (typeof (value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (length && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    return true;\n}\nconst HexCharacters = \"0123456789abcdef\";\nexport function hexlify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid hexlify value\");\n        let hex = \"\";\n        while (value) {\n            hex = HexCharacters[value & 0xf] + hex;\n            value = Math.floor(value / 16);\n        }\n        if (hex.length) {\n            if (hex.length % 2) {\n                hex = \"0\" + hex;\n            }\n            return \"0x\" + hex;\n        }\n        return \"0x00\";\n    }\n    if (typeof (value) === \"bigint\") {\n        value = value.toString(16);\n        if (value.length % 2) {\n            return (\"0x0\" + value);\n        }\n        return \"0x\" + value;\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        return value.toHexString();\n    }\n    if (isHexString(value)) {\n        if (value.length % 2) {\n            if (options.hexPad === \"left\") {\n                value = \"0x0\" + value.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                value += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        return value.toLowerCase();\n    }\n    if (isBytes(value)) {\n        let result = \"0x\";\n        for (let i = 0; i < value.length; i++) {\n            let v = value[i];\n            result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n        }\n        return result;\n    }\n    return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n}\n/*\nfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\n    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\n        return \"0x0\" + value.substring(2);\n    }\n    return value;\n}\n*/\nexport function hexDataLength(data) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        return null;\n    }\n    return (data.length - 2) / 2;\n}\nexport function hexDataSlice(data, offset, endOffset) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        logger.throwArgumentError(\"invalid hexData\", \"value\", data);\n    }\n    offset = 2 + 2 * offset;\n    if (endOffset != null) {\n        return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n    }\n    return \"0x\" + data.substring(offset);\n}\nexport function hexConcat(items) {\n    let result = \"0x\";\n    items.forEach((item) => {\n        result += hexlify(item).substring(2);\n    });\n    return result;\n}\nexport function hexValue(value) {\n    const trimmed = hexStripZeros(hexlify(value, { hexPad: \"left\" }));\n    if (trimmed === \"0x\") {\n        return \"0x0\";\n    }\n    return trimmed;\n}\nexport function hexStripZeros(value) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    value = value.substring(2);\n    let offset = 0;\n    while (offset < value.length && value[offset] === \"0\") {\n        offset++;\n    }\n    return \"0x\" + value.substring(offset);\n}\nexport function hexZeroPad(value, length) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    else if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    if (value.length > 2 * length + 2) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n    }\n    while (value.length < 2 * length + 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n    return value;\n}\nexport function splitSignature(signature) {\n    const result = {\n        r: \"0x\",\n        s: \"0x\",\n        _vs: \"0x\",\n        recoveryParam: 0,\n        v: 0,\n        yParityAndS: \"0x\",\n        compact: \"0x\"\n    };\n    if (isBytesLike(signature)) {\n        let bytes = arrayify(signature);\n        // Get the r, s and v\n        if (bytes.length === 64) {\n            // EIP-2098; pull the v from the top bit of s and clear it\n            result.v = 27 + (bytes[32] >> 7);\n            bytes[32] &= 0x7f;\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n        }\n        else if (bytes.length === 65) {\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n            result.v = bytes[64];\n        }\n        else {\n            logger.throwArgumentError(\"invalid signature string\", \"signature\", signature);\n        }\n        // Allow a recid to be used as the v\n        if (result.v < 27) {\n            if (result.v === 0 || result.v === 1) {\n                result.v += 27;\n            }\n            else {\n                logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\n            }\n        }\n        // Compute recoveryParam from v\n        result.recoveryParam = 1 - (result.v % 2);\n        // Compute _vs from recoveryParam and s\n        if (result.recoveryParam) {\n            bytes[32] |= 0x80;\n        }\n        result._vs = hexlify(bytes.slice(32, 64));\n    }\n    else {\n        result.r = signature.r;\n        result.s = signature.s;\n        result.v = signature.v;\n        result.recoveryParam = signature.recoveryParam;\n        result._vs = signature._vs;\n        // If the _vs is available, use it to populate missing s, v and recoveryParam\n        // and verify non-missing s, v and recoveryParam\n        if (result._vs != null) {\n            const vs = zeroPad(arrayify(result._vs), 32);\n            result._vs = hexlify(vs);\n            // Set or check the recid\n            const recoveryParam = ((vs[0] >= 128) ? 1 : 0);\n            if (result.recoveryParam == null) {\n                result.recoveryParam = recoveryParam;\n            }\n            else if (result.recoveryParam !== recoveryParam) {\n                logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n            }\n            // Set or check the s\n            vs[0] &= 0x7f;\n            const s = hexlify(vs);\n            if (result.s == null) {\n                result.s = s;\n            }\n            else if (result.s !== s) {\n                logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\n            }\n        }\n        // Use recid and v to populate each other\n        if (result.recoveryParam == null) {\n            if (result.v == null) {\n                logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\n            }\n            else if (result.v === 0 || result.v === 1) {\n                result.recoveryParam = result.v;\n            }\n            else {\n                result.recoveryParam = 1 - (result.v % 2);\n            }\n        }\n        else {\n            if (result.v == null) {\n                result.v = 27 + result.recoveryParam;\n            }\n            else {\n                const recId = (result.v === 0 || result.v === 1) ? result.v : (1 - (result.v % 2));\n                if (result.recoveryParam !== recId) {\n                    logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\n                }\n            }\n        }\n        if (result.r == null || !isHexString(result.r)) {\n            logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\n        }\n        else {\n            result.r = hexZeroPad(result.r, 32);\n        }\n        if (result.s == null || !isHexString(result.s)) {\n            logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\n        }\n        else {\n            result.s = hexZeroPad(result.s, 32);\n        }\n        const vs = arrayify(result.s);\n        if (vs[0] >= 128) {\n            logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\n        }\n        if (result.recoveryParam) {\n            vs[0] |= 0x80;\n        }\n        const _vs = hexlify(vs);\n        if (result._vs) {\n            if (!isHexString(result._vs)) {\n                logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\n            }\n            result._vs = hexZeroPad(result._vs, 32);\n        }\n        // Set or check the _vs\n        if (result._vs == null) {\n            result._vs = _vs;\n        }\n        else if (result._vs !== _vs) {\n            logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\n        }\n    }\n    result.yParityAndS = result._vs;\n    result.compact = result.r + result.yParityAndS.substring(2);\n    return result;\n}\nexport function joinSignature(signature) {\n    signature = splitSignature(signature);\n    return hexlify(concat([\n        signature.r,\n        signature.s,\n        (signature.recoveryParam ? \"0x1c\" : \"0x1b\")\n    ]));\n}\n//# sourceMappingURL=index.js.map","export const version = \"sha2/5.6.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport hash from \"hash.js\";\n//const _ripemd160 = _hash.ripemd160;\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { SupportedAlgorithm } from \"./types\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport function ripemd160(data) {\n    return \"0x\" + (hash.ripemd160().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha256(data) {\n    return \"0x\" + (hash.sha256().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha512(data) {\n    return \"0x\" + (hash.sha512().update(arrayify(data)).digest(\"hex\"));\n}\nexport function computeHmac(algorithm, key, data) {\n    if (!SupportedAlgorithm[algorithm]) {\n        logger.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"hmac\",\n            algorithm: algorithm\n        });\n    }\n    return \"0x\" + hash.hmac(hash[algorithm], arrayify(key)).update(arrayify(data)).digest(\"hex\");\n}\n//# sourceMappingURL=sha2.js.map","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport nacl from 'tweetnacl';\nimport {sha256} from '@ethersproject/sha2';\n\nimport {Struct, SOLANA_SCHEMA} from './util/borsh-schema';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Buffer\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = sha256(new Uint8Array(buffer)).slice(2);\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = sha256(new Uint8Array(buffer)).slice(2);\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return is_on_curve(pubkey.toBytes()) == 1;\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n\n// @ts-ignore\nlet naclLowLevel = nacl.lowlevel;\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p: any) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7,\n  0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83,\n]);\nfunction neq25519(a: any, b: any) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","import nacl from 'tweetnacl';\nimport type {SignKeyPair as KeyPair} from 'tweetnacl';\nimport type {Buffer} from 'buffer';\n\nimport {toBuffer} from './util/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return toBuffer(this._keypair.secretKey);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction-constants';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * The message header, identifying signed and read-only account\n */\nexport type MessageHeader = {\n  /**\n   * The number of signatures required for this message to be considered valid. The\n   * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n   */\n  numRequiredSignatures: number;\n  /** The last `numReadonlySignedAccounts` of the signed keys are read-only accounts */\n  numReadonlySignedAccounts: number;\n  /** The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts */\n  numReadonlyUnsignedAccounts: number;\n};\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import nacl from 'tweetnacl';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {\n  PACKET_DATA_SIZE,\n  SIGNATURE_LENGTH_IN_BYTES,\n} from './transaction-constants';\nimport {Connection} from './connection';\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\nimport invariant from './util/assert';\nimport type {Signer} from './keypair';\nimport type {Blockhash} from './blockhash';\nimport type {CompiledInstruction} from './message';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?: TransactionBlockhashCtor | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const newOpts = opts as TransactionBlockhashCtor;\n      Object.assign(this, newOpts);\n      this.recentBlockhash = newOpts.blockhash;\n      this.lastValidBlockHeight = newOpts.lastValidBlockHeight;\n    } else {\n      const oldOpts = opts as TransactionCtorFields_DEPRECATED;\n      Object.assign(this, oldOpts);\n      this.recentBlockhash = oldOpts.recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    const {nonceInfo} = this;\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < this.instructions.length; i++) {\n      if (this.instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions: CompiledInstruction[] = this.instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status =\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n      ? (\n          await connection.confirmTransaction(\n            {\n              signature: signature,\n              blockhash: transaction.recentBlockhash,\n              lastValidBlockHeight: transaction.lastValidBlockHeight,\n            },\n            options && options.commitment,\n          )\n        ).value\n      : (\n          await connection.confirmTransaction(\n            signature,\n            options && options.commitment,\n          )\n        ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\nimport {u64} from './util/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './system-program';\nimport {IInstructionInputData} from './instruction';\nimport {PACKET_DATA_SIZE} from './transaction-constants';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport {u64} from './util/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n","export function makeWebsocketUrl(endpoint: string) {\n  let url = new URL(endpoint);\n  const useHttps = url.protocol === 'https:';\n\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = '';\n\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  if (url.port !== '') {\n    url.port = String(Number(url.port) + 1);\n  }\n  return url.toString();\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError} from './errors';\nimport fetchImpl, {Response} from './fetch-impl';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction, TransactionStatus} from './transaction';\nimport {Message} from './message';\nimport assert from './util/assert';\nimport {sleep} from './util/sleep';\nimport {toBuffer} from './util/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredTimeoutError,\n} from './util/tx-expiry-custom-errors';\nimport {makeWebsocketUrl} from './util/url';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => any;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy = {\n  signature: TransactionSignature;\n} & BlockhashWithExpiryBlockHeight;\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n};\n\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A confirmed transaction on the ledger\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  useHttps: boolean,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(useHttps);\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64) */\n  encoding?: 'base64' | 'jsonParsed';\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {[header: string]: string};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let url = new URL(endpoint);\n    const useHttps = url.protocol === 'https:';\n\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      url.toString(),\n      useHttps,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get balance for ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block time for slot ' + slot + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get minimum ledger slot: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get first available block: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token account balance: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token largest accounts: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info for accounts ' + keys + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitment?: Commitment,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitment,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined,\n      epoch !== undefined ? {epoch} : undefined,\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new Error(\n        `failed to get Stake Activation ${publicKey.toBase58()}: ${\n          res.error.message\n        }`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const extra: Pick<GetProgramAccountsConfig, 'dataSlice' | 'filters'> = {};\n\n    let commitment;\n    let encoding;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n        encoding = configOrCommitment.encoding;\n\n        if (configOrCommitment.dataSlice) {\n          extra.dataSlice = configOrCommitment.dataSlice;\n        }\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const extra: Pick<GetParsedProgramAccountsConfig, 'filters'> = {};\n\n    let commitment;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: BlockheightBasedTransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` using a `TransactionConfirmationConfig` */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy:\n      | BlockheightBasedTransactionConfirmationStrategy\n      | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config =\n        strategy as BlockheightBasedTransactionConfirmationStrategy;\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const subscriptionCommitment = commitment || this.commitment;\n    let timeoutId;\n    let subscriptionId;\n    let done = false;\n\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          rawSignature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            done = true;\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    const checkBlockHeight = async () => {\n      try {\n        const blockHeight = await this.getBlockHeight(commitment);\n        return blockHeight;\n      } catch (_e) {\n        return -1;\n      }\n    };\n\n    const expiryPromise = new Promise<\n      | {__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED}\n      | {__type: TransactionStatus.TIMED_OUT; timeoutMs: number}\n    >(resolve => {\n      if (typeof strategy === 'string') {\n        let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n        switch (subscriptionCommitment) {\n          case 'processed':\n          case 'recent':\n          case 'single':\n          case 'confirmed':\n          case 'singleGossip': {\n            timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n            break;\n          }\n          // exhaust enums to ensure full coverage\n          case 'finalized':\n          case 'max':\n          case 'root':\n        }\n\n        timeoutId = setTimeout(\n          () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n          timeoutMs,\n        );\n      } else {\n        let config =\n          strategy as BlockheightBasedTransactionConfirmationStrategy;\n        (async () => {\n          let currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n          while (currentBlockHeight <= config.lastValidBlockHeight) {\n            await sleep(1000);\n            if (done) return;\n            currentBlockHeight = await checkBlockHeight();\n            if (done) return;\n          }\n          resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n        })();\n      }\n    });\n\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      switch (outcome.__type) {\n        case TransactionStatus.BLOCKHEIGHT_EXCEEDED:\n          throw new TransactionExpiredBlockheightExceededError(rawSignature);\n        case TransactionStatus.PROCESSED:\n          result = outcome.response;\n          break;\n        case TransactionStatus.TIMED_OUT:\n          throw new TransactionExpiredTimeoutError(\n            rawSignature,\n            outcome.timeoutMs / 1000,\n          );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitment?: Commitment): Promise<string> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new Error('failed to get slot leaders: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitment?: Commitment,\n  ): Promise<(InflationReward | null)[]> {\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined,\n      {\n        epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation reward: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitment?: Commitment): Promise<EpochInfo> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const args = this._buildArgs(limit ? [limit] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get recent performance samples: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: Message,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const wireMessage = message.serialize().toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result as unknown as RpcResponseAndContext<number>;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitment?: Commitment,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get latest blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get genesis hash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  async getBlock(\n    slot: number,\n    opts?: {commitment?: Finality},\n  ): Promise<BlockResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  async getBlockHeight(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block height information: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block production information: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  async getTransaction(\n    signature: string,\n    opts?: {commitment?: Finality},\n  ): Promise<TransactionResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: new Message(result.transaction.message),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error('failed to get transactions: ' + res.error.message);\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(TransactionResponse | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error('failed to get transactions: ' + res.error.message);\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new Error('failed to get blocks: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error(\n          'failed to get confirmed transactions: ' + res.error.message,\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'airdrop to ' + to.toBase58() + ' failed: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration++;\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._subscriptionsByHash[hash] = {\n        ...subscription,\n        state: 'pending',\n      };\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'subscribing',\n                };\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                };\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'pending',\n                };\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._subscriptionsByHash[hash] = {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  };\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._subscriptionsByHash[hash] = {\n                      ...subscription,\n                      state: 'subscribed',\n                    };\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'unsubscribed',\n                };\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import nacl from 'tweetnacl';\n\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(nacl.sign.keyPair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n    return new Keypair(keypair);\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return this._keypair.secretKey;\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport nacl from 'tweetnacl';\n\nimport {Keypair} from './keypair';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = nacl.sign.detached(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport secp256k1 from 'secp256k1';\nimport sha3 from 'js-sha3';\n\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\nimport {toBuffer} from './util/to-buffer';\n\nconst {publicKeyCreate, ecdsaSign} = secp256k1;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(\n        sha3.keccak_256.update(toBuffer(publicKey)).digest(),\n      ).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        sha3.keccak_256.update(toBuffer(message)).digest(),\n      );\n      const {signature, recid: recoveryId} = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'InitializeAccount' | 'Withdraw';\n\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {\n  BlockheightBasedTransactionConfirmationStrategy,\n  Connection,\n} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {BlockheightBasedTransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategy: BlockheightBasedTransactionConfirmationStrategy,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategyOrConfirmOptions:\n    | BlockheightBasedTransactionConfirmationStrategy\n    | ConfirmOptions\n    | undefined,\n  maybeConfirmOptions?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  let confirmationStrategy:\n    | BlockheightBasedTransactionConfirmationStrategy\n    | undefined;\n  let options: ConfirmOptions | undefined;\n  if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'lastValidBlockHeight',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as BlockheightBasedTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions as\n      | ConfirmOptions\n      | undefined;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy\n    ? connection.confirmTransaction(confirmationStrategy, commitment)\n    : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './compute-budget';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './ed25519-program';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './publickey';\nexport * from './stake-program';\nexport * from './system-program';\nexport * from './secp256k1-program';\nexport * from './transaction';\nexport * from './transaction-constants';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './vote-program';\nexport * from './sysvar';\nexport * from './errors';\nexport * from './util/borsh-schema';\nexport * from './util/send-and-confirm-transaction';\nexport * from './util/send-and-confirm-raw-transaction';\nexport * from './util/cluster';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"]},"metadata":{},"sourceType":"module"}